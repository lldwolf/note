<!DOCTYPE html>

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>AutoCAD的二次开发</title>
<script type="text/javascript" src="../../mylib/js/css.js"></script>
</head>

<body>
<p id="title">第十一章 AutoCAD的二次开发</p>
<h1>11.1 启动AutoCAD</h1>
<h2>11.1.1 引用AutoCAD类库</h2>
<p>要在C#中操纵AutoCAD，首先要建立对AutoCAD的引用，方法如下：</p>
<ol>
  <li>确保AutoCAD已安装，本例中我使用的是AutoCAD 2005</li>
  <li>菜单“项目”-&gt;“添加引用”</li>
  <li>打开“COM”控制面板</li>
  <li>导入 AutoCAD 2005类型库 和 AutoCAD/ObjectDBX Common 16.0 Type Library</li>
</ol>
<h2>11.1.2 引用需要的包</h2>
<pre class="code" data-type="csharp">using Autodesk.AutoCAD.Interop;
using Autodesk.AutoCAD.Interop.Common;</pre>
<h2>11.1.3 启动AutoCAD </h2>
<pre class="code" data-type="csharp">AcadApplication xApp;
try
{
	xApp = (AcadApplication)System.Runtime.InteropServices.Marshal.GetActiveObject("AutoCAD.Application");
}
catch
{
	xApp = new AcadApplicationClass();
}
xApp.Visible = true;</pre>
<h1>11.2 新建AutoCAD文档</h1>
<h1>11.3 打开AutoCAD文档</h1>
<pre class="code" data-type="csharp">AcadDocument AcadDoc = xApp.Documents.Open(this.txtFile.Text, Missing.Value, Missing.Value);</pre>
<p>参数说明：</p>
<table style="width:99%" >
  <tr>
    <th width="29%">参数</th>
    <th width="71%">说明</th>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
</table>
<h1>11.4 遍历AutoCAD图纸中的所有对象</h1>
<pre class="code" data-type="csharp">for(int i = 0; i < this.AcadDoc.ModelSpace.Count; i++)
{
	AcadEntity entity = this.AcadDoc.ModelSpace.Item(i);		//取得图纸上的对象
	string id = text_entity.ObjectID.ToString();		//获得对象的ObjectId
	if(entity.EntityName.Equals("AcDbText"))			//如果为文本对象
	{
		AcadText text_entity = (AcadText)entity;		//将对象转换为文本对象
		string name = text_entity.ObjectName;		//获得对象的ObjectName
		string val = text_entity.TextString;		//获得文本对象的字符串内容
		double[] coordinates = (double[])text_entity.InsertionPoint;	//获得文本对象的插入点坐标（3元组）
	}
}</pre>
<p>对象的内部名称</p>
<table style="width:70%" >
  <tr>
    <th width="50%">对象</th>
    <th width="50%">名称</th>
  </tr>
  <tr>
    <td>块</td>
    <td>AcDbBlockReference</td>
  </tr>
  <tr>
    <td>文本</td>
    <td>AcDbText</td>
  </tr>
  <tr>
    <td>圆</td>
    <td>AcDbCircle</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
</table>
<p>&nbsp;</p>
<h1>11.5 选取图纸上某一范围内的对象</h1>
<pre class="code" data-type="csharp">xApp.ZoomAll();		//使用该语句保证选择区域肯定在屏幕内

//生成一个新的选择集
string Name = "selection_set";
string set_name = Name;
for(int i = 0; i < AcadDoc.SelectionSets.Count; i++)		//若已有该选择集则删除
{
	AcadSelectionSet temp = this.AcadDoc.SelectionSets.Item(i);
	if(temp.Name.Equals(set_name))
	{
		temp.Delete();
		break;
	}
}

AcadSelectionSet sset = AcadDoc.SelectionSets.Add(Name);

//定义选择区域的左下角坐标和右上角坐标
double[] StartPos = new double[3]{0, 0, 0};
double[] EndPos = new double[3]{100, 100, 0};

//只选择该区域内的文本对象
object gpCode = new short[]{0};
object dataValue = new object[]{"Text"};
object groupCode = gpCode;
object DataCode = dataValue;
sset.Select(AcSelect.acSelectionSetWindow, StartPos, EndPos, groupCode, DataCode);
//若将最后两个参数设为Missing.Value则表示选择该区域内的全部对象</pre>
<p>这段代码比较复杂，有以下几个值得注意的地方：</p>
<p>1、调用 xApp.ZoomAll() 使所有的对象均在屏幕上显示。AutoCAD有个很奇怪的特点，那就是如果选择区域没在屏幕上显示的部分不会被选择进来。</p>
<p>2、在对选择对象进行过滤时，使用的是 short 数组，如果使用 int 则会运行出错（谁能看到这篇文章真是便宜你们了，我曾经为了这个问题调试了一整天，苦啊）。</p>
<p>最后，AcadSelectionSet.Select() 的参数说明如下：</p>
<table style="width:99%" >
  <tr>
    <th width="29%">参数</th>
    <th width="71%">说明</th>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
</table>
<p>对于过滤时使用的对象类型字符串，列表如下：</p>
<table style="width:70%" >
  <tr>
    <th width="40%">对象</th>
    <th width="60%">字符串</th>
  </tr>
  <tr>
    <td>文本</td>
    <td>Text</td>
  </tr>
  <tr>
    <td>圆</td>
    <td>Circle</td>
  </tr>
  <tr>
    <td>块</td>
    <td>Insert</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
</table>
<p>&nbsp; </p>
<p>&nbsp;</p>
<p>&nbsp;</p>

</body>
</html>
