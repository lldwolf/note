<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
<title>ZedGraph</title>
<script type="text/javascript" src="../../mylib/js/css.js"></script>
</head>

<body>
<p id="title">ZedGraph</p>

<h1>概述</h1>
<p>ZedGraph是.net平台下的图表控控件，可应用于Winform和ASP.NET程序，与另一个著名的图表控件dotnetCharting类似，但最让我动心的是，这是一个开源、免费的控件，而dotnetCharting是收费的，虽然在中国遍地都是破解版，但既然有正版的可用，还是用正版的好。ZedGraph提供的图表类型没有dotnetCharting丰富，貌似也没有它华丽，但是，对一般的应用绝对足够。如果你觉得Excel的图表功能对足以满足你的应用，那么,ZedGraph也绝对可以，它提供的图表功能只比Excel多，不比Excel少。</p>
<h1>图表类型</h1>
<p>ZedGraph提供如下图表类型：</p>
<ul>
  <li>柱状图</li>
  <li>折线图</li>
  <li>饼图</li>
</ul>
<h1>公用操作</h1>
<h2>填充模式</h2>
<p>填充模式可用于填充图表背景、柱体、饼块等实体区域，其对应类为ZedGraph.Fill，操作方式为先生成Fill对象，再将其赋给各实体区域对象的Fill属性。ZedGraph支持如下填充模式</p>
<ul>
  <li>单色填充</li>
  <li>渐变色填充</li>
  <li>图案填充</li>
</ul>
<h3>单色填充</h3>
<p>下例生成的为黄色填充模式</p>
<pre class="code" data-type="csharp">Fill fill = new Fill(Color.Yellow);</pre>
<h3>渐变色填充</h3>
<pre class="code" data-type="csharp">Fill fill = new Fill(Color.White, Color.Blue, 45f); </pre>
<p>上例创建的填充模式说明如下，由白色渐变到蓝色，最后一个参数指明了渐变的方向，单位为度，45f表示方向为45度角，即左上角为白色，右下角为蓝色，中间为渐变色。如果设为0，则表示由左到右变换，设为90则表示由上到下变换。</p>
<p>实际上，参数中的颜色是可变参数，可输入任意多个，例如，可以实现由白变蓝，再由蓝变红。</p>
<p>ZedGraph对柱体的默认填充模式为渐变色填充，角度为0（从左到右）。</p>
<h3>图案填充</h3>
<p>要使用图案填充，要生成 TextureBrush 对象，Fill可以接受该对象作为构造函数参数，如下所示：</p>
<pre class="code" data-type="csharp">Stream img_stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(&quot;ZedGraphLLd.Resources.bg_bar.jpg&quot;);
Image image = Bitmap.FromStream(img_stream) as Bitmap;
TextureBrush brush = new TextureBrush(image);
Fill fill = new Fill(brush);</pre> 
<p>在此我将一个图片作为嵌入的资源放到了主目录下的Resources文件夹下，关键在于取得图像，嵌入资源方式和磁盘文件方式均可。</p>
<h2>图例样式</h2>
<p>设置 GraphPane.Legend.IsVisible 确定是否显示图例。</p>
<h2>文本标记 </h2>
<p>如果要在图表中添加文本标记，需使用 ZedGraph.TextObj 对象。</p>
<p>TextObj 对象最常用的属性如下所示：</p>
<ul>
  <li>文本字符串：这是当然的了。</li>
  <li>坐标：要显示的位置，该值还与 TextObj.Location.CoordinateFrame 属性相关。</li>
  <li>对齐方式：TextObj.Location.AlignH 和 TextObj.Location.AlignV 属性分别表示水平和垂直对齐</li>
  <li>文字方向：TextObj.FontSpec.Angle，单位为角度，逆时针方向</li>
</ul>
<p>例如，下例创建了一个覆盖模式(Overlay)的柱状图，并使用TextObj对象添加标记</p>
<pre class="code" data-type="csharp">ZedGraphControl graph_control = new ZedGraphControl();
this.Controls.Add(graph_control);
graph_control.Dock = DockStyle.Fill;

GraphPane pane = graph_control.GraphPane;
pane.XAxis.Title.Text = &quot;区域&quot;;
pane.YAxis.Title.Text = &quot;数量&quot;;
pane.Title.Text = &quot;柱状图&quot;;

double[] y = { 100, 115, 75, -22, 98, 40, -10 };
double[] y2 = { 90, 100, 95, -35, 80, 35, 35 };
double[] y3 = { 80, 110, 65, -15, 54, 67, 18 };

// Manually sum up the curves
for (int i = 0; i &lt; y.GetLength(0); i++)
	y2[i] += y[i];
for (int i = 0; i &lt; y2.GetLength(0); i++)
	y3[i] += y2[i];

BarItem bar_item1 = pane.AddBar(&quot;Bar1&quot;, null, y, Color.GreenYellow);
BarItem bar_item2 = pane.AddBar(&quot;Bar2&quot;, null, y2, Color.Yellow);
BarItem bar_item3 = pane.AddBar(&quot;Bar3&quot;, null, y3, Color.Red);

pane.BarSettings.Type = BarType.Overlay;

// Shift the text items up by 5 user scale units above the bars
const float shift = 5;

for (int i = 0; i &lt; y.Length; i++)
{
	// format the label string to have 1 decimal place
	string lab = y3[i].ToString(&quot;F1&quot;);
	// create the text item (assumes the x axis is ordinal or text)
	// for negative bars, the label appears just above the zero value
	TextObj text = new TextObj(lab, (float)(i + 1), (float)(y3[i] &lt; 0 ? 0.0 : y3[i]) + shift);
	// tell Zedgraph to use user scale units for locating the TextObj
	text.Location.CoordinateFrame = CoordType.AxisXYScale;
	// AlignH the left-center of the text to the specified point
	text.Location.AlignH = AlignH.Left;
	text.Location.AlignV = AlignV.Center;
	text.FontSpec.Border.IsVisible = true;
	text.FontSpec.Fill = new Fill(Color.Blue);
	text.FontSpec.Fill.IsVisible = true;
	// rotate the text 90 degrees
	text.FontSpec.Angle = 90;
	// add the TextObj to the list
	pane.GraphObjList.Add(text);
}


graph_control.AxisChange();</pre>
<p>图例如下所示：</p>
<p><img src="images/zedgraph_bar3.jpg" width="593" height="349" /></p>
<h1>图表样式 </h1>
<h2>图表</h2>
<p>对于图表，ZedGraph提供如下操作：</p>
<ul>
  <li>设定图表标题</li>
  <li>设定图表背景色</li>
  <li>对于不同的系列，定义图例说明</li>
</ul>
<h3>设定图表标题</h3>
<p>使用 GraphPane.Title.Text 属性，设定为需要的字符串即可。</p>
<h3>设定图表背景色</h3>
<p>使用 GraphPane.Chart.Fill 属性 </p>
<h2>坐标系</h2>
<p>对于需要使用坐标系的图（柱状图、折线图等），需要完成如下操作：</p>
<ul>
  <li>设定X、Y坐标轴的标题</li>
  <li>设定X、Y坐标轴的刻度</li>
  <li>零刻度轴显示</li>
</ul>
<h3>设定X、Y坐标轴的标题</h3>
<p>设定属性 GraphPane.XAxis.Title.Text 和 GraphPane.YAxis.Title.Text 属性，分别为X、Y坐标轴标题</p>
<h3>设定X、Y坐标轴刻度</h3>
<p>如果不作任何设置，会自动生成刻度，例如对于竖柱图表，Y轴根据各柱的高度自动设定刻度，X轴则为顺序号</p>
<h3>零刻度轴显示</h3>
<p>对于横柱图表，如果柱体值有负数，一般需要显示一条额外的零刻度线，需设 GraphPane.XAxis.MajorGrid.IsZeroLine 为true </p>
<h2>柱状图</h2>
<p>对于柱状图，ZedGraph提供如下操作</p>
<ul>
  <li>设定柱体的背景</li>
  <li>设定柱体的边框线</li>
  <li>为柱体添加数字标记</li>
  <li>柱体与坐标的关系</li>
</ul>
<h3>设定柱体的背景</h3>
<p>设定BarItem.Bar.Fill属性，设定值为ZedGraph.Fill对象，有关该对象，可参见 节</p>
<h3>设定柱体的边框线</h3>
<p>BarItem.Bar.Border.IsVisible属性，默认为true，即显示边框线</p>
<h3>为柱体添加数字标记</h3>
<p>调用静态方法 BarItem.CreateBarLabels()，有两种调用方式</p>
<ul>
  <li>public static void CreateBarLabels(GraphPane pane, bool isBarCenter, string valueFormat);<br />
    <br />
  有3个参数，第2个表示是否显示在柱体中间，第3个为显示格式字符串，有关格式化字符串样式，可参考 <em>基础知识</em> 一节的 <em>数字转为字符串</em> 。 </li>
  <li>public static void CreateBarLabels(GraphPane pane, bool isBarCenter, string valueFormat, string fontFamily, float fontSize, Color fontColor, bool isBold, bool isItalic, bool isUnderline);<br />
    <br />
  比上一个方法多了些对字体的设置，看看参数名就明白了，不再赘述。</li>
</ul>
<p>对于普通的数字标记，上述方法即可满足要求，但对于有特殊要求的形式，则需要手工指定，例如覆盖方式的柱状图，手工指定标记的方法请参照本章【公用操作】一节的【文本标记】部分</p>
<h3>柱体与坐标的关系</h3>
<p>以竖柱为例，与X坐标关系有两种：</p>
<ul>
  <li>柱形在坐标标记处</li>
  <li>柱形在坐标标记间</li>
</ul>
<p>可通过设置属性 GraphPane.XAxis.MajorTic.IsBetweenLabels 实现，默认为 false，表示显示在坐标标记处。</p>
<h1>柱状图</h1>
<h2>创建竖柱图</h2>
<p>下例创建了一个简单的柱状图，它有两个系列，代码如下所示：</p>
<pre class="code" data-type="csharp">using System.Drawing;
using ZedGraph;
...
ZedGraphControl graph_control = new ZedGraphControl();
this.Controls.Add(graph_control);
graph_control.Dock = DockStyle.Fill;

GraphPane pane = graph_control.GraphPane;

double[] y = { 80, 70, 65, 78, 40 };
double[] y2 = { 70, 50, 85, 54, 63 };
BarItem bar_item1 = pane.AddBar(&quot;Bar1&quot;, null, y, Color.GreenYellow);
BarItem bar_item2 = pane.AddBar(&quot;Bar2&quot;, null, y2, Color.Yellow);
graph_control.AxisChange();</pre>
<p>效果如下图所示：</p>
<p><img src="images/zedgraph_bar1.jpg" width="508" height="319" /></p>
<h2>创建横柱图</h2>
<p>下例创建的是一个横柱图，代码如下所示：</p>
<pre class="code" data-type="csharp">ZedGraphControl graph_control = new ZedGraphControl();
this.Controls.Add(graph_control);
graph_control.Dock = DockStyle.Fill;

GraphPane pane = graph_control.GraphPane;

double[] y = { 80, 70, 65, 78, 40 };
BarItem bar_item1 = pane.AddBar(&quot;Simple bar&quot;, y, null, Color.GreenYellow);

pane.BarSettings.Base = BarBase.Y;

graph_control.AxisChange();</pre> 
<p>关键在于两点：</p>
<ol>
  <li>在创建BarItem时，将值数组作为参数x传入，而不是y</li>
  <li>设定GraphPane的BarSettings.Base 的属性为 BarBase.Y</li>
</ol>
<p>效果如下图所示：</p>
<p><img src="images/zedgraph_bar2.jpg" width="503" height="329" /></p>
<h2>多段柱图表</h2>
<p>&nbsp;</p>
<p>&nbsp; </p>
<h1>折线图</h1>
<p>&nbsp; </p>
<p>&nbsp;</p>
<p>&nbsp; </p>

</body>
</html>
