<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
	<script type="text/javascript" src="../../mylib/js/css.js"></script>
	<title>用户控件</title>
</head>

<body>
	<p id="title">用户控件</p>
	<h1>简介 </h1>
	<h2>创建 </h2>
	<ul>
		<li>使用新建中的“用户控件”项。控件为从UserControl控件继承类。</li>
		<li>使用新建中的“自定义控件”项，控件为从Control继承</li>
	</ul>
	<p>“用户控件”创建容易，调试方便，但执行效率较低，“自定义控件”则相反。另外，在当前项目中创建的“用户控件”可直接显示在右侧的控件面板中，而“自定义控件”需使用单独的控件库项目生成dll文件后，才能安装在右侧的控件面板中。</p>
	<h2>属性</h2>
	<p>默认的public属性都会在设计器的右边显示，如果不想让设计的属性出现在右边，在属性前添加一个描述[Browsable(false)]，如下例所示：</p>
	<pre class="code" data-type="csharp">[Browsable(false)]
public int IntValue
{
	get
	{
		return this._IntValue;
	}

	set
	{
		this._IntValue = value;
	}
}</pre>
	<h3>初始化代码生成控制</h3>
	<p>默认情况下，将用户控件添加到窗体中时，自定义的public属性会自动在窗体的InitializeComponent方法中生成初始化代码，可以使用描述DesignerSerializationVisibility来控件初始化代码的生成，例如：</p>
	<pre class="code" data-type="csharp">[DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]</pre>
	<p>此为默认值，初始化代码功能打开</p>
	<pre class="code" data-type="csharp">[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]</pre>
	<p>则初始化代码功能关闭，</p>

	<h1>常用属性支持</h1>
	<h2>ToolboxBitmapAttribute</h2>
	<p>用于设定控件在工具箱上的图标，添加在控件类前，例如：</p>
	<pre class="code" data-type="csharp">[ToolboxBitmap(typeof(ControlA), &quot;MyBitmap.bmp&quot;)]
</pre>
	<p>其中MyBitmap.bmp是程序中嵌入的位图资源，大小为 16*16。在使用位图资源时，要注意位图资源的名称并不是简单的文件名，而是……有点说不清楚，举例子说明吧，如果图片在子目录MyDir下，而项目的默认命名空间为MyNameSpace，那么位图资源的路径即为“MyDir.ByBitmap.bmp”。</p>
	<p>也可以使用下面代码使用现有控件的图标，如下所示：</p>
	<p>[ToolboxBitmap(typeof(System.Windows.Forms.TextBox))]</p>
	<h2>ToolboxItemAttribute</h2>
	<p>System.ComponentModel.ToolboxItemAttribute用于工具箱支持，添加在控件类前，</p>
	<p>添加工具箱支持</p>
	<pre class="code" data-type="csharp">[System.ComponentModel.ToolboxItem(true)]]</pre>
	<p>取消工具箱支持</p>
	<pre class="code" data-type="csharp">[System.ComponentModel.ToolboxItem(false)]</pre>
	<h2>DefaultValueAttribute</h2>
	<p>用于定义控件属性的默认值</p>
	<h2>DescriptionAttribute</h2>
	<p>用于在界面设计时显示属性的说明信息</p>
	<h2>CategoryAttribute</h2>
	<p>用于指定在界面设计时的属性子窗口属于哪一类，例如，对Label控件，AutoSize属性属于“行为”类属性，如下所示：</p>
	<pre class="code" data-type="csharp">[Category(&quot;行为&quot;)]</pre>
	<h2>DefaultPropertyAttribute</h2>
	<p>控件的默认属性，如设定默认的属性为Text属性（即在设计界面上放置该控件时，默认的焦点属性）：</p>
	<pre class="code" data-type="csharp">[DefaultProperty(&quot;Text&quot;)]</pre>
	<h2>BrowsableAttribute</h2>
	<p>指定属性是否显示在设计界面的属性窗口中，默认为true，如使用如下代码则不显示： </p>
	<pre class="code" data-type="csharp">[Browsable(false)]</pre>
	<h2>DesignerSerializationVisibilityAttribute</h2>
	<p>指定属性是否在窗体的初始化过程 InitializeComponent 中出现对该属性的初始化代码。 </p>
	<p>有时我们需要继承现有控件来创建自己的控件，根据实际情况需要屏蔽父控件的一些公用属性，可组合BrowsableAttribute和DesignerSerializationVisibilityAttribute，如下例所示，用户控件自System.Windows.Forms.Panel派生，屏蔽其AutoScroll属性，代码如下所示：</p>
	<pre class="code" data-type="csharp">using System.ComponentModel;

public abstract class CustomScrollControl : System.Windows.Forms.Panel
{
	[Browsable(false),DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
	public override bool AutoScroll
	{
		get{return false;}
		set
		{
			if (value)
				throw new SourceGridException(&quot;Auto Scroll not supported in this control&quot;);
			base.AutoScroll = false;
		}
	}
}</pre>
	<h1>自定义事件 </h1>
	<p>自定义事件请参考 <a href="event.htm">事件</a> 一章</p>
	<p>&nbsp;</p>

</body>
</html>
