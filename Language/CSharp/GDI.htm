<!DOCTYPE html>

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
<title>GDI开发</title>
<script type="text/javascript" src="../../mylib/js/css.js"></script>
</head>

<body>
<p id="title">GDI开发</p>

<h1>基本概念</h1>
<h2>屏幕坐标与工作区坐标</h2>
<p>工作区坐标是指以窗口工作区左上角为坐标原点(0, 0)，这是在绘图时使用的默认坐标系，而屏幕坐标是指以整个屏幕的左上角为坐标原点(0, 0)，可以视之为绝对坐标。</p>
<p>Control对象提供了两个函数来转换这两个坐标：</p>
<ul>
  <li>PointToScreen：将工作区坐标转换为屏幕坐标</li>
  <li>PointToClient：将屏幕坐标转换为工作区坐标</li>
</ul>
<h1>绘图设备信息</h1>
<h2>获取屏幕分辨率</h2>
<pre class="code" data-type="csharp">Screen s = Screen.PrimaryScreen;
Rectangle r = s.Bounds;
MessageBox.Show(r.X + &quot;, &quot; + r.Y + &quot;, w = &quot; + r.Width + &quot;, h = &quot; + r.Height);</pre>
<h1>基本用法</h1>
<p>如下代码是在窗体上绘制一条直线</p>
<pre class="code" data-type="csharp">Pen p = new Pen(Color.Blue, 4);
Graphics g = this.CreateGraphics();
g.DrawRectangle(p, X, Y, WIDTH, HEIGHT);</pre>
<p>处理图形包括两个步骤：</p>
<ol type="1">
	<li>创建 <b>Graphics</b> 对象。</li>

	<li>使用 <b>Graphics</b> 对象绘制线条和形状、呈现文本或显示与操作图像。</li>
</ol>

<h2>创建 Graphics 对象</h2>
<p>图形对象可以用各种方法来创建：</p>
<ul type="disc">
	<li>接收对图形对象的引用，该对象为窗体或控件的 Paint 事件中 PaintEventArgs 的一部分。在为控件创建绘制代码时，通常会使用此方法来获取对图形对象的引用。</li>

	<li>调用某控件或窗体的 CreateGraphics 方法来获取对 <b>Graphics </b>对象的引用，该对象表示该控件或窗体的绘图表面。如果想在已存在的窗体或控件上绘图，则可使用此方法。</li>

	<li>从继承自图像的任何对象创建 <b>Graphics</b> 对象。此方法在您需要更改已存在的图像时十分有用。</li>
</ul>

<h3>Paint 事件处理程序中的 PaintEventArgs</h3>
<pre class="code" data-type="csharp">private void Form1_Paint(object sender, 
   System.Windows.Forms.PaintEventArgs pe) 
{
   // Declares the Graphics object and sets it to the Graphics object
   // supplied in the PaintEventArgs.
   Graphics g = pe.Graphics;
   // Insert code to paint the form here.
}</pre>
<h3>CreateGraphics 方法</h3>
<pre class="code" data-type="csharp">Graphics g;
// Sets g to a graphics object representing the drawing surface of the
// control or form g is a member of.
g = this.CreateGraphics();</pre>
<h3>从 Image 对象创建</h3>
<pre class="code" data-type="csharp">Bitmap myBitmap = new Bitmap(@"C:\myPic.bmp");
Graphics g = Graphics.FromImage(myBitmap);</pre>
<h2>保存绘图结果</h2>
<pre class="code" data-type="csharp">Graphics g = this.CreateGraphics();
MemoryStream ms = new MemoryStream();
IntPtr hdc = g.GetHdc();
Metafile mf = new Metafile(ms, hdc);

g.ReleaseHdc(hdc);
g.Dispose();
g = Graphics.FromImage(mf);
Brush brush = new SolidBrush(Color.Red);
Pen pen = new Pen(brush);
g.DrawEllipse(pen, 100, 100, 500, 500);
g.Dispose();

mf.Save(@&quot;c:\1.emf&quot;, ImageFormat.Emf);
MessageBox.Show(&quot;OK&quot;);</pre>
<h1>文本</h1>
<h2>示例</h2>
<h2>字体</h2>
<p>创建字体</p>
<pre class="code" data-type="csharp">Font objFont = new Font("Tahoma", 10, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);</pre>
<p>基于现有字体创建</p>
<pre class="code" data-type="csharp">Font f = new Font(objFont, FontStyle.Bold);</pre>
<h2>文本的几何信息</h2>
<p>获取文本的绘制尺寸</p>
<pre class="code" data-type="csharp">Graphics g = ...;
Font font = ...;
SizeF = g.MeasureString("文本内容", font);</pre>
<h2>文本布局</h2>
<p>文本布局通常使用 StringFormat 类来实现，用于文本的对齐、行距等控制，通常用于将文本绘制在指定 Rectangle 内的情况。</p>
<table style="width:97%">
	<tbody>
		<tr>
			<th>属性</th>
			<th>描述</th>
			<th>示例</th>
		</tr>
		<tr>
			<td>Alignment</td>
			<td>文本水平对齐方式</td>
			<td><pre class="code" data-type="csharp">StringFormat format = new StringFormat();
format.Alignment = StringAlignment.Center;		//居中对齐</pre></td>
		</tr>
		<tr>
			<td>LineAlignment</td>
			<td>文本垂直对齐方式</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Trimming</td>
			<td>文本剪裁方式，当指定矩形不足以显示指定的文本时，将以此属性进行剪裁
			<ul>
			<li>StringTrimming.Character: 以字符为单位进行剪裁</li>
			<li>StringTrimming.EllipsisCharacter: 以字符为单位进行剪裁，并在剪裁显示省略号</li>
			<li>StringTrimming.EllipsisPath: 在中间进行剪裁，显示首文本和尾文本，并在剪裁处显示省略号</li>
			<li>StringTrimming.EllipsisWord: 以单词为单位进行剪裁，并在剪裁处显示省略号</li>
			<li>StringTrimming.None: 不进行剪裁，实际效果与 Word 方式很相似</li>
			<li>StringTrimming.Word: 以单词为单位进行剪裁</li>
			</ul></td>
			<td><pre class="code" data-type="csharp">private void ShowStringTrimming(PaintEventArgs e)
{

    StringFormat format1 = new StringFormat();
    string quote = &quot;Not everything that can be counted counts, and not everything that counts can be counted.&quot;;
    format1.Trimming = StringTrimming.EllipsisWord;
    e.Graphics.DrawString(quote, this.Font, Brushes.Black, 
        new RectangleF(10.0F, 10.0F, 90.0F, 50.0F), format1);
}</pre></td>
		</tr>
	</tbody>
</table>
<p><b>注意：</b>StringFormat 类提供两个默认工厂实例，GenericDefault 和 GenericTypographic。在实际应用中，如果使用 Graphics.MeasureString 方法来确定文本框的大小，通常情况下文本反而会显示不下，一般情况下会被剪裁掉一个字符，如果使用 GenericTypographic 工厂属性产生的实例则可避免这个问题。</p>
<h1>Image 对象</h1>
<h2>Image 对象与byte[]转换</h2>
<pre class="code" data-type="csharp">//byte[] 转换为 Image
byte[] logbtye = ...
MemoryStream ms = new MemoryStream();
ms.Write(logbtye, 0, logbtye.Length);
Image logo_img = Image.FromStream(ms);
ms.Close();

//Image 转换为 byte[]
MemoryStream stream = new MemoryStream();
img.Save(stream, img.RawFormat);
stream.Position = 0;

byte[] imageData = new byte[stream.Length];
stream.Read(imageData, 0, imageData.Length);
stream.Close();</pre>

<p>&nbsp; </p>

</body>
</html>
