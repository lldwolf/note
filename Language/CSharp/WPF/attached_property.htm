<!DOCTYPE html>

<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
	<script type="text/javascript" src="../../../mylib/js/css.js"></script>
	<title>C#.net使用手册</title>
</head>
<body>
	<p id="title">附加属性 (Attached Property)</p>

	<h1>概述</h1>
	<h2>什么时附加属性</h2>
	<p>使用例子来说明更容易理解一些，我们在使用 Grid 布局方式时，在控件中声明的 Grid.Row 即是一个依赖属性，该属性定义在 Grid 中，但作用于 Grid 的子成员身上。</p>
	<p>附加属性是XAML定义的一个概念，可作为全局属性应用于任何对象。在WPF中，附加属性是依赖属性一种特殊形式。</p>
	<h2>为什么使用附加属性</h2>
	<p>附加属性常用于以下场景</p>
	<ul>
		<li>父元素想通过附加属性来控制子元素，典型的如各种布局控件</li>
		<li>子元素通过附加属性可使用在不同的父元素中</li>
		<li>通过附加属性提供类似服务的功能。</li>
	</ul>
	<h1>示例</h1>
	<h2>由父元素控制的附加属性 - 使用附加属性实现自定义布局</h2>
	<p>现在我们使用附加属性来完成这么一个极坐标布局，它的子元素按极坐标方式来定义位置，只要定义子元素距原点的半径和偏移角度来定义其位置</p>
	<p>首先，我们定义一个类 ClockPanel，作为我们的布局对象。然后我们定义两个附加属性 Radius 和 Angle，分别准备用于子元素的半径和角度，顺便说一下，通过 propa 可快速生成附加属性的代码</p>
	<pre class="code" data-type="csharp" data-collapsed="true" title="查看代码">public class ClockPanel : Panel
{
	public static double GetRadius(DependencyObject obj)
	{
		return (double)obj.GetValue(RadiusProperty);
	}

	public static void SetRadius(DependencyObject obj, double value)
	{
		obj.SetValue(RadiusProperty, value);
	}

	public static readonly DependencyProperty RadiusProperty =
		DependencyProperty.RegisterAttached(&quot;Radius&quot;, typeof(double), typeof(ClockPanel), new UIPropertyMetadata(0.0));

	public static double GetAngle(DependencyObject obj)
	{
		return (double)obj.GetValue(AngleProperty);
	}

	public static void SetAngle(DependencyObject obj, double value)
	{
		obj.SetValue(AngleProperty, value);
	}

	public static readonly DependencyProperty AngleProperty = DependencyProperty.RegisterAttached(&quot;Angle&quot;, typeof(double), typeof(ClockPanel), new UIPropertyMetadata(0.0));

}</pre>
	<p>然后需要重载如下两个函数：</p>
	<ul>
		<li>MeasureOverride：确定 Panel 的实际大小</li>
		<li>ArrangeOverride：确定子元素的位置和大小</li>
	</ul>
	<pre class="code" data-type="csharp" data-collapsed="true" title="查看代码">protected override Size MeasureOverride(Size availableSize)
{
	double minValue = Math.Min(availableSize.Width, availableSize.Height);
	return new Size(minValue, minValue);
}

protected override Size ArrangeOverride(Size finalSize)
{
	Point basePt = new Point(finalSize.Width / 2, finalSize.Height / 2);
	foreach (UIElement child in this.Children)
	{
		child.Measure(finalSize);
				
		double angle = ClockPanel.GetAngle(child) / 180 * Math.PI;
		double radius = ClockPanel.GetRadius(child);
		Point pt = new Point();
		pt.X = basePt.X + radius * Math.Cos(angle);
		pt.Y = basePt.Y - radius * Math.Sin(angle);
		Rect rect = new Rect(pt, child.DesiredSize);
		child.Arrange(rect);
	}

	return finalSize;
}</pre>

	<p>下面是使用该自定义 Panel 的 XAML</p>
	<pre class="code" data-type="xml" data-collapsed="true" title="查看代码">&lt;Window x:Class=&quot;WpfDemo.AttachProperty.ClockWindow&quot;
		xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
		xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
		xmlns:local=&quot;clr-namespace:WpfDemo.AttachProperty&quot;
		Title=&quot;ClockWindow&quot;
		Height=&quot;300&quot;
		Width=&quot;300&quot;&gt;
	&lt;Window.Resources&gt;
		&lt;Style TargetType=&quot;TextBlock&quot;&gt;
			&lt;Setter Property=&quot;HorizontalAlignment&quot;
					Value=&quot;Center&quot; /&gt;
			&lt;Setter Property=&quot;local:ClockPanel.Radius&quot;
					Value=&quot;50&quot; /&gt;
		&lt;/Style&gt;
	&lt;/Window.Resources&gt;
	&lt;local:ClockPanel&gt;
		&lt;TextBlock local:ClockPanel.Angle=&quot;90&quot;
				   local:ClockPanel.Radius=&quot;80&quot;&gt;12&lt;/TextBlock&gt;
		&lt;TextBlock local:ClockPanel.Angle=&quot;60&quot;&gt;1&lt;/TextBlock&gt;
		&lt;TextBlock local:ClockPanel.Angle=&quot;30&quot;&gt;2&lt;/TextBlock&gt;
		&lt;TextBlock local:ClockPanel.Angle=&quot;0&quot;&gt;3&lt;/TextBlock&gt;
		&lt;TextBlock local:ClockPanel.Angle=&quot;-30&quot;&gt;4&lt;/TextBlock&gt;
		&lt;TextBlock local:ClockPanel.Angle=&quot;-60&quot;&gt;5&lt;/TextBlock&gt;
		&lt;TextBlock local:ClockPanel.Angle=&quot;-90&quot;&gt;6&lt;/TextBlock&gt;
	&lt;/local:ClockPanel&gt;
&lt;/Window&gt;</pre>

</body>
</html>
