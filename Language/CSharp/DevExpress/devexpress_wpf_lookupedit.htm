<!DOCTYPE html>

<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
	<title>WPF LookUpEdit Control</title>
	<script type="text/javascript" src="../../../mylib/js/css.js"></script>
</head>

<body>
	<p id="title">LookUpEdit</p>
	<h1>Overview</h1>
	<h2>本例用到的 Namespace</h2>
	<pre class="code" data-type="xml">xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"</pre>
	<h2>常用属性</h2>
	<table style="width:80%">
		<tr>
			<th>Property</th>
			<th>Desc.</th>
		</tr>
		<tr>
			<td>PopupWidth</td>
			<td>弹出下拉框宽度</td>
		</tr>
	</table>
	<h1>各种示例</h1>
	<h2>使用 GridControl 作为 LookUpEdit 的下拉控件</h2>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;dxg:LookUpEdit x:Name="lkpEdit"
				Width="150"
				PopupWidth="500"
				<span class="emphasis">AutoPopulateColumns="False"</span>
				<span class="emphasis">Loaded="lkpEdit_Loaded"</span>&gt;
	&lt;dxg:LookUpEdit.PopupContentTemplate&gt;
		&lt;ControlTemplate&gt;
			&lt;DockPanel&gt;
				&lt;StackPanel DockPanel.Dock="Bottom"
							HorizontalAlignment="Center"
							Orientation="Horizontal"&gt;
					&lt;Button&gt;Add&lt;/Button&gt;
					&lt;Button&gt;Delete&lt;/Button&gt;
				&lt;/StackPanel&gt;
				<span class="emphasis">&lt;dxg:GridControl Name="PART_GridControl"&gt;</span>
					&lt;dxg:GridControl.View&gt;
						&lt;dxg:TableView CellStyle="{x:Null}"
									   AllowEditing="False" /&gt;
					&lt;/dxg:GridControl.View&gt;
					&lt;dxg:GridControl.Columns&gt;
						&lt;dxg:GridColumn FieldName="CountryCode"
										Width="100"
										Header="Country Code"&gt;
						&lt;/dxg:GridColumn&gt;
						&lt;dxg:GridColumn FieldName="CountryName"
										Width="100"
										Header="CountryName"&gt;
						&lt;/dxg:GridColumn&gt;
					&lt;/dxg:GridControl.Columns&gt;
				&lt;/dxg:GridControl&gt;
			&lt;/DockPanel&gt;
		&lt;/ControlTemplate&gt;
	&lt;/dxg:LookUpEdit.PopupContentTemplate&gt;
&lt;/dxg:LookUpEdit&gt;</pre>
	<p>注意点如下:</p>
	<ul>
		<li>AutoPopulateColumns="False"：必须声明，否则将出会把所有的 Properties 显示在 Grid 中</li>
		<li>Loaded 事件：用于加载数据</li>
		<li>PART_GridControl：必须将其作为 GridControl 的名字，否则点击其中的行时不会关闭弹出框</li>
	</ul>
	<p>加载数据的 Loaded 事件程序如下所示：</p>
	<pre class="code" data-type="csharp">private void lkpEdit_Loaded(object sender, RoutedEventArgs e)
{
	this.lkpEdit.ItemsSource = ...
}</pre>
	<h2>基于 LookUpEdit 的自定义控件</h2>
	<p>本例实现与上例类似的 LookUpEdit Grid Dropdown，将其封装为一个自定义控件</p>
	<p>首先将 ControlTemplate 定义在资源字典中，创建一个 Resource Dictionary (WPF) Dictionary1.xaml</p>
	<pre class="code" data-type="xml" data-collapsed="true" title="Dictionary1.xaml">&lt;ResourceDictionary xmlns=“http://schemas.microsoft.com/winfx/2006/xaml/presentation“
					xmlns:x=“http://schemas.microsoft.com/winfx/2006/xaml“
					xmlns:dxg=“http://schemas.devexpress.com/winfx/2008/xaml/grid“&gt;
	&lt;ControlTemplate x:Key=“popupGridLkpEdtTemplate“&gt;
		&lt;dxg:GridControl x:Name=“PART_GridControl“&gt;
			&lt;dxg:GridControl.View&gt;
				&lt;dxg:TableView AllowEditing=“False“
							   AllowBestFit=“True“
							   AutoWidth=“True“
							   NavigationStyle=“Row“
							   ShowGroupPanel=“False“ /&gt;
			&lt;/dxg:GridControl.View&gt;
			&lt;dxg:GridControl.Columns&gt;
				&lt;dxg:GridColumn FieldName=“CountryCode“
								Header=“Country Code“&gt;
				&lt;/dxg:GridColumn&gt;
				&lt;dxg:GridColumn FieldName=“CountryName“
								Header=“Country Name“&gt;
				&lt;/dxg:GridColumn&gt;
			&lt;/dxg:GridControl.Columns&gt;
		&lt;/dxg:GridControl&gt;
	&lt;/ControlTemplate&gt;
&lt;/ResourceDictionary&gt;</pre>
	<p>然后继承 LookUpEdit 组件实现自定义控件</p>
	<pre class="code" data-type="csharp" data-collapsed="true" title="PopupGridLookUpEdit.cs">public class PopupGridLookUpEdit : LookUpEdit
{
	public PopupGridLookUpEdit() : base()
	{
		this.AutoPopulateColumns = false;
		this.ItemsSource = Country.GetTestingData(); //Set datasource
		ResourceDictionary myresourcedictionary = new ResourceDictionary();
		myresourcedictionary.Source = new Uri(“/DXWPFApplication1;component/Dictionary1.xaml“, UriKind.RelativeOrAbsolute);
		this.PopupContentTemplate = myresourcedictionary[“popupGridLkpEdtTemplate“] as ControlTemplate;
	}
}</pre>

</body>
</html>
