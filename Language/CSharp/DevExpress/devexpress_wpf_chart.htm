<!DOCTYPE html>

<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
	<title>DevExpress.XtraGrid.GridControl</title>
	<script type="text/javascript" src="../../../mylib/js/css.js"></script>

</head>

<body>
	<p id="title">WPF Chart Control</p>
	<h1>Overview</h1>
	<h2>本例用到的 Namespace</h2>
	<pre class="code">xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"</pre>
	<h2>杂谈</h2>
	XYDiagram2D 用于所有的使用二维坐标的图表，例如柱状图，点线图等。饼图则不属此类。
	<h1>柱状图</h1>
	<h2>Overview</h2>
	<table style="width:90%">
		<tr>
			<th>Class</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>BarStackedSeries2D</td>
			<td>所有的 Series 在同一坐标点显示一根柱</td>
		</tr>
		<tr>
			<td>BarSideBySideStackedSeries2D</td>
			<td>支持多个 Series 显示为多根柱, 使用 StackedGroup 属性来设定每个 Serise 显示在哪根柱子</td>
		</tr>
	</table>
	<h2>基本柱状图示例</h2>
	<h3>不使用数据源的 BarStackedSeries2D</h3>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;dxc:ChartControl&gt;
	&lt;dxc:XYDiagram2D&gt;
		&lt;dxc:BarStackedSeries2D BarWidth="0.5"
								DisplayName="S1"&gt;
			&lt;dxc:SeriesPoint Argument="1"
							 Value="3" /&gt;
			&lt;dxc:SeriesPoint Argument="3"
							 Value="6" /&gt;
			&lt;dxc:SeriesPoint Argument="5"
							 Value="-1" /&gt;
		&lt;/dxc:BarStackedSeries2D&gt;
		&lt;dxc:BarStackedSeries2D BarWidth="0.5"
								DisplayName="S2"&gt;
			&lt;dxc:SeriesPoint Argument="1"
							 Value="5" /&gt;
			&lt;dxc:SeriesPoint Argument="3"
							 Value="7" /&gt;
			&lt;dxc:SeriesPoint Argument="5"
							 Value="2" /&gt;
		&lt;/dxc:BarStackedSeries2D&gt;
	&lt;/dxc:XYDiagram2D&gt;
&lt;/dxc:ChartControl&gt;</pre>
	<h3>使用数据源的 BarStackedSeries2D</h3>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;dxc:ChartControl DataSource="{Binding}"&gt;
	&lt;dxc:XYDiagram2D&gt;
		&lt;dxc:BarStackedSeries2D ArgumentDataMember="Year"
								ValueDataMember="Income1"
								DisplayName="Income1"&gt;
		&lt;/dxc:BarStackedSeries2D&gt;
		&lt;dxc:BarStackedSeries2D ArgumentDataMember="Year"
								ValueDataMember="Income2"
								DisplayName="Income2"&gt;
		&lt;/dxc:BarStackedSeries2D&gt;
	&lt;/dxc:XYDiagram2D&gt;
&lt;/dxc:ChartControl&gt;</pre>
	<p>使用如下代码设定其数据源</p>
	<pre class="code" data-type="csharp" data-collapsed="true" title="C#">Random r = new Random();
DataTable tb = new DataTable();
tb.Columns.Add("Year", typeof(int));
tb.Columns.Add("Income1", typeof(int));
tb.Columns.Add("Income2", typeof(int));

for (int i = 2000; i &lt;= 2010; i++)
{
	tb.Rows.Add(i, r.Next(1000, 2000), r.Next(1000, 2000));
}

this.DataContext = tb;</pre>
	<h2>显示收支结余柱状图</h2>
	<p>该图显示收入，支出及节余，收入为正，支出为付，节余为两者差值。与普通的 BarStackedSeries2D 不同，节余不能直接简单地作为一个系列，而是需要覆盖到已有系列上</p>
	<p>在本例中，需结合使用 BarSideBySideStackedSeries2D 和 BarStackedSeries2D，如下所示</p>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;dxc:ChartControl HorizontalAlignment="Left"
				  Name="chartControl1"						  
				  VerticalAlignment="Top"&gt;
	&lt;dxc:XYDiagram2D&gt;
		&lt;dxc:BarSideBySideStackedSeries2D DisplayName="Income"
										  BarWidth="0.5"
										  StackedGroup="1"&gt;
			&lt;dxc:SeriesPoint Argument="1"
							 Value="8" /&gt;
			&lt;dxc:SeriesPoint Argument="3"
							 Value="10" /&gt;
			&lt;dxc:SeriesPoint Argument="5"
							 Value="1" /&gt;
		&lt;/dxc:BarSideBySideStackedSeries2D&gt;
		&lt;dxc:BarSideBySideStackedSeries2D BarWidth="0.5"
										  DisplayName="Outcome"
										  StackedGroup="1"&gt;
			&lt;dxc:SeriesPoint Argument="1"
							 Value="-5" /&gt;
			&lt;dxc:SeriesPoint Argument="3"
							 Value="-4" /&gt;
			&lt;dxc:SeriesPoint Argument="5"
							 Value="-2" /&gt;
		&lt;/dxc:BarSideBySideStackedSeries2D&gt;
		&lt;dxc:BarStackedSeries2D BarWidth="0.5"
								DisplayName="Balance"&gt;
			&lt;dxc:SeriesPoint Argument="1"
							 Value="3" /&gt;
			&lt;dxc:SeriesPoint Argument="3"
							 Value="6" /&gt;
			&lt;dxc:SeriesPoint Argument="5"
							 Value="-1" /&gt;
		&lt;/dxc:BarStackedSeries2D&gt;
	&lt;/dxc:XYDiagram2D&gt;
&lt;/dxc:ChartControl&gt;</pre>
	<h2>提示</h2>
	<p>提示有两种，一种是 Hint，由 ChartControl.ToolTipEnabled 控制，一种是鼠标跟随提示，由 ChartControl.CrosshairEnabled 控制</p>
	<h3>定制 Crosshair 提示</h3>
	<p>柱状图默认提示格式为 "当前X坐标值：值" 的列表，如果我想显示为如下格式：</p>
	<pre>当前X坐标值
系列1图例序列名：值
...
系列n图例序列名：值</pre>
	<p>可通过 ChartControl.CustomDrawCrosshair 事件实现</p>
	<pre class="code" data-type="csharp">private void ChartControl_CustomDrawCrosshair(object sender, CustomDrawCrosshairEventArgs e)
{
	for (int i = 0; i &lt; e.CrosshairElements.Count; i++)
	{
		CrosshairElement elem = e.CrosshairElements[i];
		MyViewModel MyViewModel = elem.SeriesPoint.Tag as MyViewModel;

		if (i == 0)
		{
			elem.LabelElement.HeaderText = MyViewModel.XAxisValue;
		}

		elem.LabelElement.Text = string.Format("{0}: {1}", elem.Series.DisplayName, DataTypeHelper.FormatNumberForChart(elem.SeriesPoint.Value));
	}
}</pre>
	<p>点评如下：</p>
	<ul>
		<li>默认情况下 HeaderText 不显示，在此事件中进行设置为 X 值。只设一次是因为多个系例只需显示一次X值</li>
		<li>可能过 SeriesPoint.Tag 取到绑定的对象</li>
	</ul>
	<h3>定制 Crosshair 模板</h3>
	<p>可通过 Blend 分解 ChartControl 控件得到其 CrosshairLabelTemplate 模板，亦可实现同样效果。</p>
    <h2>Drill Down</h2>
    <p>下面的示例显示各个区域的人口。点击某个区域即可显示子区域的人口</p>
    <pre class="code" data-type="xml">&lt;dxc:ChartControl x:Name="chartControl"
                  DataSource="{Binding}"
                  MouseDown="ChartControl_MouseDown"
                  MouseMove="chartControl_MouseMove"&gt;
    &lt;dxc:XYDiagram2D&gt;
        &lt;dxc:BarStackedSeries2D ArgumentDataMember="AreaName"
                                ValueDataMember="People"
                                DisplayName="People"&gt;
            &lt;dxc:BarStackedSeries2D.Model&gt;
                &lt;dxc:SimpleBar2DModel /&gt;
            &lt;/dxc:BarStackedSeries2D.Model&gt;
        &lt;/dxc:BarStackedSeries2D&gt;
    &lt;/dxc:XYDiagram2D&gt;
&lt;/dxc:ChartControl&gt;</pre>
    <pre class="code" data-type="csharp" data-collapsed="true" title="C#">public Window29()
{
    InitializeComponent();

    Area china = new Area() { AreaName = "China", People = 1300000000 };
    Area india = new Area() { AreaName = "India", People = 1000000000 };
    Area japan = new Area() { AreaName = "Japan", People = 130000000 };
    Area russia = new Area() { AreaName = "Russia", People = 250000000 };
    Area france = new Area() { AreaName = "France", People = 80000000 };
    Area german = new Area() { AreaName = "Germany", People = 90000000 };

    AreaCollection asia = new AreaCollection() { AreaName = "ASIA" };
    asia.Areas.AddRange(new Area[] { china, india, japan });
    AreaCollection europe = new AreaCollection() { AreaName = "EUROPE" };
    europe.Areas.AddRange(new Area[] { russia, france, german });

    List&lt;AreaCollection&gt; list = new List&lt;AreaCollection&gt;() { asia, europe };
    this.DataContext = list;
}

public class AreaCollection
{
    public AreaCollection()
    {
        this.Areas = new List&lt;Area&gt;();
    }

    public string AreaName { get; set; }
    public List&lt;Area&gt; Areas { get; set; }

    public long People
    {
        get
        {
            if (this.Areas == null)
            {
                return 0;
            }
            else
            {
                long people = 0;
                this.Areas.ForEach(item =&gt; people += item.People);
                return people;
            }
        }
    }
}


public class Area
{
    public string AreaName { get; set; }
    public long People { get; set; }
}

private void ChartControl_MouseDown(object sender, MouseButtonEventArgs e)
{
    ChartHitInfo hitInfo = this.chartControl.CalcHitInfo(e.GetPosition(this));
    SeriesPoint point = hitInfo.SeriesPoint;

    if (point != null &amp;&amp; point.Tag != null)
    {
        if (point.Tag is AreaCollection)
        {
            AreaCollection areas = point.Tag as AreaCollection;
            this.DataContext = areas.Areas;
        }
    }
}

private void chartControl_MouseMove(object sender, MouseEventArgs e)
{
    ChartHitInfo hitInfo = this.chartControl.CalcHitInfo(e.GetPosition(this));
    SeriesPoint point = hitInfo.SeriesPoint;

    if (point != null &amp;&amp; point.Tag != null)
    {
        if (point.Tag is AreaCollection)
        {
            Mouse.SetCursor(Cursors.Hand);
        }
        else
        {
            Mouse.SetCursor(Cursors.Arrow);
        }
    }
}</pre>
	<h1>饼图</h1>
	<h2>饼图示例</h2>
	<pre class="code" data-type="xml">&lt;dxc:ChartControl DataSource="{Binding}"&gt;
	&lt;dxc:SimpleDiagram2D&gt;
		&lt;dxc:PieSeries2D DisplayName="Series 1"
			ArgumentDataMember="Country"
			ValueDataMember="Area"
			HoleRadiusPercent="0"
			ArgumentScaleType="Qualitative"
			ToolTipEnabled="True"
			ToolTipPointPattern="{}{V:N0}"
			SweepDirection="Counterclockwise"
			Rotation="0"&gt;
		&lt;/dxc:PieSeries2D&gt;
	&lt;/dxc:SimpleDiagram2D&gt;
&lt;/dxc:ChartControl&gt;</pre>
	<h2>在饼图上比例</h2>
	<p>在 ChartControl 内添加</p>
	<pre class="code" data-type="xml">&lt;dxc:PieSeries2D.Label&gt;
	&lt;dxc:SeriesLabel Visible="True"
					 dxc:PieSeries.LabelPosition="Outside"
					 ResolveOverlappingMode="JustifyAroundPoint"
					 FontSize="9"
					 Margin="0" /&gt;
&lt;/dxc:PieSeries2D.Label&gt;
&lt;dxc:PieSeries2D.PointOptions&gt;
	&lt;dxc:PointOptions PointView="Values"&gt;
		&lt;dxc:PointOptions.ValueNumericOptions&gt;
			&lt;dxc:NumericOptions Format="Percent"
								Precision="0" /&gt;
		&lt;/dxc:PointOptions.ValueNumericOptions&gt;
	&lt;/dxc:PointOptions&gt;
&lt;/dxc:PieSeries2D.PointOptions&gt;</pre>
	<ul>
		<li>ResolveOverlappingMode 用于解决显示相互覆盖的情况</li>
	</ul>
	<h2>饼图样式</h2>
	<p>使用如下XAML将其设置为无外框样式</p>
	<pre class="code" data-type="xml">&lt;dxc:PieSeries2D.Model&gt;
	&lt;dxc:BorderlessFlatPie2DModel /&gt;
&lt;/dxc:PieSeries2D.Model&gt;</pre>
	<h1>Legend</h1>
	<h2>显示图例</h2>
	<pre class="code" data-type="xml">&lt;dxc:ChartControl.Legend&gt;
	&lt;dxc:Legend HorizontalPosition="Center"
				Orientation="Horizontal"
				VerticalPosition="TopOutside" /&gt;
&lt;/dxc:ChartControl.Legend&gt;</pre>
	<ul>
		<li>HorizontalPosition 表示图例的水平显示位置</li>
		<li>VerticalPosition 表示图例的垂直显示位置</li>
		<li>Orientation 表示各图例的排列方式</li>
	</ul>
	<h1>坐标</h1>
	<p>本例主要以 X 坐标作为示例，Y 坐标可使用相同方式实现</p>
	<h2>旋转坐标</h2>
	<h3>使用 AxisLabel.Angle 属性</h3>
	<pre class="code" data-type="xml">&lt;dxc:ChartControl&gt;
	&lt;dxc:XYDiagram2D&gt;
		&lt;dxc:XYDiagram2D.AxisX&gt;
			&lt;dxc:AxisX2D&gt;
				&lt;dxc:AxisX2D.Label&gt;
					<span class="emphasis">&lt;dxc:AxisLabel Angle="-45" /&gt;</span>
				&lt;/dxc:AxisX2D.Label&gt;
			&lt;/dxc:AxisX2D&gt;
		&lt;/dxc:XYDiagram2D.AxisX&gt;
	&lt;/dxc:XYDiagram2D&gt;
&lt;/dxc:ChartControl&gt;</pre>
	<h3>使用 AxisLabel.ElementTemplate</h3>
	<pre class="code" data-type="xml">&lt;Window.Resources&gt;
<span class="emphasis">	&lt;DataTemplate x:Key="AxisXLabelTemplate"&gt;
		&lt;ContentPresenter Content="{Binding Path=Content}}"&gt;
			&lt;ContentPresenter.LayoutTransform&gt;
				&lt;RotateTransform Angle="-45" /&gt;
			&lt;/ContentPresenter.LayoutTransform&gt;
		&lt;/ContentPresenter&gt;
	&lt;/DataTemplate&gt;</span>
&lt;/Window.Resources&gt;
&lt;dxc:ChartControl&gt;
	&lt;dxc:XYDiagram2D&gt;
		&lt;dxc:XYDiagram2D.AxisX&gt;
			&lt;dxc:AxisX2D&gt;
				&lt;dxc:AxisX2D.Label&gt;
					<span class="emphasis">&lt;dxc:AxisLabel ElementTemplate="{StaticResource AxisXLabelTemplate}" /&gt;</span>
				&lt;/dxc:AxisX2D.Label&gt;
			&lt;/dxc:AxisX2D&gt;
		&lt;/dxc:XYDiagram2D.AxisX&gt;
	&lt;/dxc:XYDiagram2D&gt;
&lt;/dxc:ChartControl&gt;</pre>
	<h2>防止坐标重叠</h2>
	<pre class="code" data-type="xml">&lt;dxc:ChartControl&gt;
	&lt;dxc:XYDiagram2D&gt;
		&lt;dxc:XYDiagram2D.AxisX&gt;
			&lt;dxc:AxisX2D&gt;
				&lt;dxc:AxisX2D.Label&gt;
					&lt;dxc:AxisLabel&gt;
						<span class="emphasis">&lt;dxc:Axis2D.ResolveOverlappingOptions&gt;
							&lt;dxc:AxisLabelResolveOverlappingOptions AllowHide="True"
																	AllowRotate="True"
																	AllowStagger="True" /&gt;
						&lt;/dxc:Axis2D.ResolveOverlappingOptions&gt;</span>
					&lt;/dxc:AxisLabel&gt;
				&lt;/dxc:AxisX2D.Label&gt;
			&lt;/dxc:AxisX2D&gt;
		&lt;/dxc:XYDiagram2D.AxisX&gt;
	&lt;/dxc:XYDiagram2D&gt;
&lt;/dxc:ChartControl&gt;</pre>
	<p>根据需要设置</p>
	<ul>
		<li>AllowHide: 允许隐藏某些坐标</li>
		<li>AllowRotate: 允许对坐标进行旋转</li>
		<li>AllowStagger：允许错位显示坐标</li>
	</ul>
	<h2>格式化坐标显示</h2>
	<p>使用 Converter 进行</p>
	<p>例如，将数字 1,2,3,4 显示为 Jan, Feb, Mar, Apr 月份英文</p>
	<pre class="code" data-type="xml">&lt;Window.Resources&gt;
	<span class="emphasis">&lt;local:MyNumConverter x:Key="myConverter" /&gt;
	&lt;DataTemplate x:Key="AxisXLabelTemplate"&gt;
		&lt;ContentPresenter Content="{Binding Path=Content, Converter={StaticResource myConverter}}" /&gt;
	&lt;/DataTemplate&gt;</span>
&lt;/Window.Resources&gt;
&lt;dxc:ChartControl&gt;
	&lt;dxc:XYDiagram2D EnableAxisXNavigation="True"&gt;
		&lt;dxc:XYDiagram2D.AxisX&gt;
			&lt;dxc:AxisX2D&gt;
				&lt;dxc:AxisX2D.Label&gt;
					<span class="emphasis">&lt;dxc:AxisLabel ElementTemplate="{StaticResource AxisXLabelTemplate}" /&gt;</span>
				&lt;/dxc:AxisX2D.Label&gt;
			&lt;/dxc:AxisX2D&gt;
		&lt;/dxc:XYDiagram2D.AxisX&gt;
		&lt;dxc:BarStackedSeries2D BarWidth="0.5"
								DisplayName="Test"&gt;
			&lt;dxc:SeriesPoint Argument="1"
							 Value="3" /&gt;
			&lt;dxc:SeriesPoint Argument="3"
							 Value="6" /&gt;
			&lt;dxc:SeriesPoint Argument="5"
							 Value="-1" /&gt;
		&lt;/dxc:BarStackedSeries2D&gt;
	&lt;/dxc:XYDiagram2D&gt;
&lt;/dxc:ChartControl&gt;</pre>

	<p>Converter 声明如下</p>
	<pre class="code" data-type="csharp">class MyNumConverter : IValueConverter
{
	public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
	{
		int v = System.Convert.ToInt32(value);
		string disp = "N/A";

		if (v > 0 && v <= 12)
		{
			disp = (new DateTime(2016, v, 1)).ToString("MMM");
		}

		return disp;			
	}
}</pre>
	<h2>日期坐标兼自定义坐标</h2>
	<p>下例是一个定义以日期作为X坐标的例子</p>
	<pre class="code" data-type="xml">&lt;dxc:ChartControl x:Name="chartControl1"
				  DataSource="{Binding}"&gt;
	&lt;dxc:XYDiagram2D&gt;
		&lt;dxc:XYDiagram2D.AxisX&gt;
			&lt;dxc:AxisX2D GridSpacing="1"
						 DateTimeGridAlignment="Month"
						 DateTimeMeasureUnit="Week"&gt;
				&lt;dxc:AxisX2D.DateTimeOptions&gt;
					&lt;dxc:DateTimeOptions Format="Custom"
										 FormatString="MMM" /&gt;
				&lt;/dxc:AxisX2D.DateTimeOptions&gt;
			&lt;/dxc:AxisX2D&gt;
		&lt;/dxc:XYDiagram2D.AxisX&gt;
		&lt;dxc:BarStackedSeries2D BarWidth="0.2"
								ArgumentDataMember="Date"
								ValueDataMember="Value"
								DisplayName="Net"&gt;
		&lt;/dxc:BarStackedSeries2D&gt;
	&lt;/dxc:XYDiagram2D&gt;
&lt;/dxc:ChartControl&gt;</pre>
	<p>说明如下：</p>
	<ul>
		<li>DateTimeGridAlignment 表示在X轴显示坐标时以 Month 作为单位</li>
		<li>DateTimeMeasureUnit 表示画柱子时每个星期画一根柱子</li>
		<li>GridSpacing 表示在 X 轴每隔1个月显示一次坐标</li>
		<li>DateTimeOptions 用于指定X坐标日期显示的格式</li>
		<li>采用如上设置后，柱子的提示显示不出具体日期值，修正方案可参考本文中的 CustomDrawCrosshair 事件实现。</li>
	</ul>
	<p>使用如下代码绑定示例数据源</p>
	<pre class="code" data-type="csharp">DataTable tb = new DataTable();
tb.Columns.Add("Date", typeof(DateTime));
tb.Columns.Add("Value", typeof(int));
Random r = new Random((int)DateTime.Now.Ticks);

DateTime endDate = new DateTime(DateTime.Now.Year, 12, 31);

for (DateTime dt = new DateTime(DateTime.Now.Year, 1, 1); dt &lt;= endDate; dt = dt.AddDays(7))
{
	tb.Rows.Add(dt, r.Next(100));
}

this.DataContext = tb;

((XYDiagram2D)this.chartControl1.Diagram).ActualAxisX.CustomLabels.Clear();
for (int m = 1; m &lt;= 12; m++)
{
	DateTime month = new DateTime(DateTime.Now.Year, m, 1);
	((XYDiagram2D)this.chartControl1.Diagram).ActualAxisX.CustomLabels.Add(new CustomAxisLabel() { Content = month.ToString("MMM"), Value = month });
}</pre>
	<p>之所以要自定义 X 坐标值是因为默认情况下，会将月份显示在最后一根柱子上，导致第一根柱子显示的是 Dec。但我想让月份显示在第一根柱子上，于是就将原坐标清除并重新显示一遍</p>
	<h1>配色效果</h1>
	<h2>自定义配色</h2>
	<p>默认情况下，会使用自动分配的颜色来显示各系列。可使用如下方式使用自定义颜色(假如我们有3个系列)</p>
	<pre class="code" data-type="xml">&lt;dxc:ChartControl.Palette&gt;
	&lt;dxc:CustomPalette&gt;
		&lt;dxc:CustomPalette.Colors&gt;
			&lt;Color&gt;#002d72&lt;/Color&gt;
			&lt;Color&gt;#99abc7&lt;/Color&gt;
			&lt;Color&gt;#00bdf2&lt;/Color&gt;
		&lt;/dxc:CustomPalette.Colors&gt;
	&lt;/dxc:CustomPalette&gt;
&lt;/dxc:ChartControl.Palette&gt;</pre>
	<h2>定义配色效果</h2>
	<p>默认情况下使用由浓变淡的一种效果，可使用如下方式改为简单效果</p>
	<pre class="code" data-type="xml">&lt;dxc:ChartControl&gt;
	&lt;dxc:ChartControl.Diagram&gt;
		&lt;dxc:XYDiagram2D&gt;
			&lt;dxc:BarSideBySideSeries2D&gt;
				<span class="emphasis">&lt;dxc:BarSideBySideSeries2D.Model&gt;
					&lt;dxc:SimpleBar2DModel /&gt;显示收支结余柱状图
				&lt;/dxc:BarSideBySideSeries2D.Model&gt;</span>
			&lt;/dxc:BarSideBySideSeries2D&gt;
	&lt;/dxc:ChartControl.Diagram&gt;
&lt;/dxc:ChartControl&gt;</pre>
	<p>还有很多其它的效果可选，例如3D效果之类</p>
	<h1>图表标题</h1>
	<h2>显示标题</h2>
	<pre class="code" data-type="xml">&lt;dxc:ChartControl.Titles&gt;
	&lt;dxc:Title Content="My Title"
			   FontSize="12"
			   Padding="0"
			   Margin="0,-10,0,0"
			   FontWeight="Bold"
			   HorizontalAlignment="Center"&gt;&lt;/dxc:Title&gt;
&lt;/dxc:ChartControl.Titles&gt;</pre>
</body>
</html>
