<!DOCTYPE html>

<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
	<title>WPF Grid Control</title>
	<script type="text/javascript" src="../../../mylib/js/css.js"></script>
</head>

<body>
	<p id="title">WPF Grid Control</p>
	<h1>Overview</h1>
	<h2>本例用到的 Namespace</h2>
	<pre class="code" data-type="xml">xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"</pre>
	<h2>标准用法</h2>
	<p>标准用法如下</p>
	<pre class="code" data-type="xml">&lt;dxg:GridControl ItemsSource="{Binding}"&gt;
	&lt;dxg:GridControl.View&gt;
		&lt;dxg:TableView /&gt;
	&lt;/dxg:GridControl.View&gt;
	&lt;dxg:GridControl.Columns&gt;
		&lt;dxg:GridColumn FieldName="Name"
						Width="100"
						Header="Name"&gt;
		&lt;/dxg:GridColumn&gt;
	&lt;/dxg:GridControl.Columns&gt;
&lt;/dxg:GridControl&gt;</pre>
	<p>说明如下：</p>
	<ul>
		<li>其数据源需设置 ItemsSource</li>
	</ul>
	<h1>常规显示设置</h1>
	<h2>格式化输出</h2>
	<p>例如，格式化日期格式，百分数格式，对齐方式等</p>
	<p>GridColumn 支持 C# 常规的 Format String，如下例格式化日期和百分数</p>
	<pre class="code" data-type="xml">&lt;dxg:GridColumn FieldName="SettlementDate"
                Header="Settlement Date"
                Width="95"&gt;
    &lt;dxg:GridColumn.EditSettings&gt;
        &lt;dxe:TextEditSettings DisplayFormat="d" HorizontalContentAlignment="Right"/&gt;
    &lt;/dxg:GridColumn.EditSettings&gt;
&lt;/dxg:GridColumn&gt;
&lt;dxg:GridColumn ReadOnly="True"
				FieldName="Value"
				Width="100"
				Header="Value (Percentage)"&gt;
	&lt;dxg:GridColumn.EditSettings&gt;
		&lt;dxe:TextEditSettings DisplayFormat="p" /&gt;
	&lt;/dxg:GridColumn.EditSettings&gt;
&lt;/dxg:GridColumn&gt;</pre>
	<p><a href="../Basic.htm#format_string">更多的 Format String</a></p>
	<h2>GridColumn DisplayTemplate</h2>
	<p>可用来设定某列的显示方式，例如，下例用来设置某列右对齐显示</p>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;Window.Resources&gt;
	&lt;ControlTemplate x:Key="decimalColumn"&gt;
		&lt;StackPanel VerticalAlignment="Center"
					DataContext="{Binding Path=RowData.Row}"&gt;
			&lt;TextBlock HorizontalAlignment="Right"
						VerticalAlignment="Bottom"
						Text="{Binding Path=Name}" /&gt;
		&lt;/StackPanel&gt;
	&lt;/ControlTemplate&gt;
&lt;/Window.Resources&gt;
&lt;Grid&gt;
	&lt;dxg:GridControl ItemsSource="{Binding}"&gt;
		&lt;dxg:GridControl.View&gt;
			&lt;dxg:TableView /&gt;
		&lt;/dxg:GridControl.View&gt;
		&lt;dxg:GridControl.Columns&gt;
			&lt;dxg:GridColumn ReadOnly="True"
							FieldName="Name"
							Width="100"
							Header="Name"
							DisplayTemplate="{StaticResource decimalColumn}"&gt;
			&lt;/dxg:GridColumn&gt;
		&lt;/dxg:GridControl.Columns&gt;
	&lt;/dxg:GridControl&gt;
&lt;/Grid&gt;
</pre>
	<h2>使用 CellTemplate</h2>
	<p>例如使用 CellTemplate 来实现最长输入长度</p>
	<pre class="code" data-type="xml">&lt;dxg:GridColumn&gt;
	&lt;dxg:GridColumn.CellTemplate&gt;
		&lt;DataTemplate&gt;
			&lt;dxe:TextEdit x:Name="PART_Editor" MaxLength="10" ShowBorder="False" Text="{Binding Comments}" /&gt;
		&lt;/DataTemplate&gt;
	&lt;/dxg:GridColumn.CellTemplate&gt;
&lt;/dxg:GridColumn&gt;</pre>
	<p>注意要将名字命名为 PART_Editor，不然输入内容不会自动回传给 ViewModel</p>
	<h1>Filter</h1>
	<h2>Filter Overview</h2>
	<p>默认情况下 GridControl 会支持 Filter 功能，Filter 方式为单选列表</p>
	<p>如果想改为多选，可使用如下设定</p>
	<p>对 GridColumn 进行如下设定</p>
	<pre class="code" data-type="xml">&lt;GridColumn FilterPopupMode="CheckedList" /&gt;</pre>
	<h2>定制 DateTime Filter</h2>
	<p>定制 DateTime 类型列的 Filter，使用一个日期范围，效果如下图所示</p>
	<p>
		<img alt="" src="img/wpf_grid_custom_date_filter.png" /></p>
	<h3>XAML</h3>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;Window x:Class="DXWPFApplication1.Window13"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
		xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
		xmlns:local="clr-namespace:DXWPFApplication1.Controls"
		Title="Date Time Filter"
		Height="400"
		Width="500"&gt;
	&lt;Window.Resources&gt;
		&lt;DataTemplate x:Key="dateRangeFilterPopupTemplate"&gt;
			&lt;local:DateEditFilter Margin="10"
								  FieldName="{Binding DataContext.FieldName, 
										RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type dxg:ColumnHeaderFilterControl}}}"
								  Filter="{Binding Path=CustomColumnFilter, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"&gt;
				&lt;Grid&gt;
					&lt;Grid.Resources&gt;
						&lt;Style TargetType="{x:Type dxe:DateEdit}"&gt;
							&lt;Setter Property="Height" Value="22" /&gt;
						&lt;/Style&gt;
						&lt;Style TargetType="{x:Type TextBlock}"&gt;
							&lt;Setter Property="Height" Value="20" /&gt;
						&lt;/Style&gt;
					&lt;/Grid.Resources&gt;
					&lt;Grid.RowDefinitions&gt;
						&lt;RowDefinition Height="30" /&gt;
						&lt;RowDefinition Height="30" /&gt;
					&lt;/Grid.RowDefinitions&gt;
					&lt;Grid.ColumnDefinitions&gt;
						&lt;ColumnDefinition Width="40" /&gt;
						&lt;ColumnDefinition Width="100" /&gt;
					&lt;/Grid.ColumnDefinitions&gt;
					&lt;TextBlock Grid.Row="0" Grid.Column="0" Text="From:" /&gt;
					&lt;dxe:DateEdit Grid.Row="0" Grid.Column="1" x:Name="PART_DateEditFrom" Width="100" /&gt;
					&lt;TextBlock Grid.Row="1" Grid.Column="0" Text="To:" /&gt;
					&lt;dxe:DateEdit Grid.Row="1" Grid.Column="1" x:Name="PART_DateEditTo" Width="100" /&gt;
				&lt;/Grid&gt;
			&lt;/local:DateEditFilter&gt;
		&lt;/DataTemplate&gt;
	&lt;/Window.Resources&gt;
	&lt;Grid&gt;
		&lt;dxg:GridControl x:Name="gridControl"
						 ItemsSource="{Binding}"&gt;
			&lt;dxg:GridControl.View&gt;
				&lt;dxg:TableView /&gt;
			&lt;/dxg:GridControl.View&gt;
			&lt;dxg:GridControl.Columns&gt;
				&lt;dxg:GridColumn ReadOnly="True"
								FieldName="Date"
								Width="100"
								AllowEditing="False"
								Header="Date"
								FilterPopupMode="Custom"
								CustomColumnFilterPopupTemplate="{StaticResource ResourceKey=dateRangeFilterPopupTemplate}" /&gt;
				&lt;dxg:GridColumn ReadOnly="True"
								FieldName="Value"
								Width="100"
								Header="Value" /&gt;
			&lt;/dxg:GridControl.Columns&gt;
		&lt;/dxg:GridControl&gt;
	&lt;/Grid&gt;
&lt;/Window&gt;</pre>

	<p>代码中使用了如下技巧</p>
	<ol>
		<li>绑定 FiledName 的方式，注意此处的 FieldName 是指在弹出控件中我们自己定义的依赖属性，具体声明请看后面相应的代码</li>
		<li>GridColumn.FilterPopupMode 要设为 Custom</li>
		<li>使用 GridColumn.CustomColumnFilterPopupTemplate 来定制 Filter Popup</li>
	</ol>
	<h3>自定义 Popup 控件</h3>
	<pre class="code" data-type="csharp" data-collapsed="true" title="DateFilter class">public class DateEditFilter : ContentControl
{
	public static readonly DependencyProperty FilterProperty;
	static DateEditFilter()
	{
		FilterProperty = DependencyProperty.Register("Filter", typeof(CriteriaOperator), typeof(DateEditFilter), new FrameworkPropertyMetadata(null));
	}

	public CriteriaOperator Filter
	{
		get { return (CriteriaOperator)GetValue(FilterProperty); }
		set { SetValue(FilterProperty, value); }
	}

	DateEdit dateEditFrom;
	DateEdit dateEditTo;

	public string FieldName
	{
		get { return (string)GetValue(FieldNameProperty); }
		set { SetValue(FieldNameProperty, value); }
	}

	// Using a DependencyProperty as the backing store for FieldName.  This enables animation, styling, binding, etc...
	public static readonly DependencyProperty FieldNameProperty =
		DependencyProperty.Register("FieldName", typeof(string), typeof(DateEditFilter), new PropertyMetadata(""));

	public override void OnApplyTemplate()
	{
		base.OnApplyTemplate();

		if (dateEditFrom != null)
		{
			dateEditFrom.EditValueChanged -= new EditValueChangedEventHandler(dateEdit_EditValueChanged);
		}

		if (dateEditTo != null)
		{
			dateEditTo.EditValueChanged -= new EditValueChangedEventHandler(dateEdit_EditValueChanged);
		}

		dateEditFrom = FindName("PART_DateEditFrom") as DateEdit;
		dateEditTo = FindName("PART_DateEditTo") as DateEdit;

		if (Filter is GroupOperator)
		{
			GroupOperator op = Filter as GroupOperator;
			if (!object.ReferenceEquals(op, null))
			{
				dateEditFrom.EditValue = ((op.Operands[0] as BinaryOperator).RightOperand as OperandValue).Value;
				dateEditTo.EditValue = ((op.Operands[1] as BinaryOperator).RightOperand as OperandValue).Value;
			}
		}
		else if (Filter is BinaryOperator)
		{
			BinaryOperator op = Filter as BinaryOperator;

			if (op.OperatorType == BinaryOperatorType.GreaterOrEqual)
			{
				dateEditFrom.EditValue = (op.RightOperand as OperandValue).Value;
			}
			else if (op.OperatorType == BinaryOperatorType.LessOrEqual)
			{
				dateEditTo.EditValue = (op.RightOperand as OperandValue).Value;
			}
		}

		dateEditTo.EditValueChanged += new EditValueChangedEventHandler(dateEdit_EditValueChanged);
		dateEditFrom.EditValueChanged += new EditValueChangedEventHandler(dateEdit_EditValueChanged);
	}

	private void dateEdit_EditValueChanged(object sender, EditValueChangedEventArgs e)
	{
		if (dateEditFrom.EditValue != null &amp;&amp; dateEditTo.EditValue != null)
		{
			Filter = CriteriaOperator.And(new BinaryOperator(this.FieldName, dateEditFrom.EditValue, BinaryOperatorType.GreaterOrEqual),
										  new BinaryOperator(this.FieldName, dateEditTo.EditValue, BinaryOperatorType.LessOrEqual));
		}
		else if (dateEditFrom.EditValue != null)
		{
			Filter = CriteriaOperator.And(new BinaryOperator(this.FieldName, dateEditFrom.EditValue, BinaryOperatorType.GreaterOrEqual));
		}
		else if (dateEditTo.EditValue != null)
		{
			Filter = CriteriaOperator.And(new BinaryOperator(this.FieldName, dateEditTo.EditValue, BinaryOperatorType.LessOrEqual));
		}
		else
		{
			Filter = null;
		}
	}
}</pre>

	<p>代码中使用了如下技巧</p>
	<ol>
		<li>定义依赖属性 FieldName 来接收绑定的列信息</li>
		<li>使用 FindName 查找 Template 中的控件</li>
		<li>在 OnApplyTemplate 中预先解除事件处理函数，完成后再重新设定来避免不必要的事件触发</li>
		<li>OnApplyTempate 中在弹出时初始化 Filter 值</li>
		<li>如何在设定 Filter 值时将其应用到 Grid 中</li>
	</ol>

	<h1>各种示例</h1>
	<h2>CellTemplate</h2>
	<p>Grid 中的数据部分加载，最后一行显示一个 More 按钮，按下后加载全部</p>
	<p>注意点：</p>
	<ol>
		<li>使用 CellTemplate 定制第一列的显示，如果不为 More 则显示 TextBlockinte，否则显示 Button</li>
		<li>使用 DataTrigger 实现，对于不等于情况需要使用 Converter 实现</li>
		<li>要考虑排序问题，这个 More 按钮是不参与排序的</li>
	</ol>
	<h3>CellTemplate 实现</h3>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;dxg:GridColumn.CellTemplate&gt;
	&lt;DataTemplate&gt;
		&lt;Grid DataContext="{Binding Path=RowData.Row}"&gt;
			&lt;TextBlock DockPanel.Dock="Left" Text="{Binding City}"&gt;
				&lt;TextBlock.Style&gt;
					&lt;Style TargetType="{x:Type TextBlock}"&gt;
						&lt;Style.Triggers&gt;
							&lt;DataTrigger Binding="{Binding Path=Name}" Value="More..."&gt;
								&lt;Setter Property="Visibility" Value="Hidden" /&gt;
							&lt;/DataTrigger&gt;
						&lt;/Style.Triggers&gt;
					&lt;/Style&gt;
				&lt;/TextBlock.Style&gt;
			&lt;/TextBlock&gt;
			&lt;Button HorizontalAlignment="Left" Content="{Binding City}"
					Command="{Binding RelativeSource={RelativeSource AncestorType=UserControl, AncestorLevel=1}, Path=DataContext.LoadMoreCommand}"&gt;
				&lt;Button.Style&gt;
					&lt;Style TargetType="{x:Type Button}"&gt;
						&lt;Style.Triggers&gt;
							&lt;DataTrigger Binding="{Binding Path=City,Converter={StaticResource ResourceKey=antiConverter}, ConverterParameter='More...'}"
											Value="True"&gt;
								&lt;Setter Property="Visibility" Value="Hidden" /&gt;
							&lt;/DataTrigger&gt;
						&lt;/Style.Triggers&gt;
					&lt;/Style&gt;
				&lt;/Button.Style&gt;
			&lt;/Button&gt;
		&lt;/Grid&gt;
	&lt;/DataTemplate&gt;
&lt;/dxg:GridColumn.CellTemplate&gt;</pre>
	<p>使用的技巧</p>
	<ul>
		<li>使用 Grid 作为布局，这样两个控件会共享同一空间。如果使用 StackPanel 或其它，其中一个不显示时会留下空白区</li>
		<li>在 GridControl 内部，DataContext 要使用 RowData.Row 来表示当前行数据</li>
		<li>正常 DataTrigger 都是作相等判断，所以不相等判断需要使用 Converter 实现 (不是 More 则隐藏按钮)，该 Converter 关键代码如下所示
			<pre class="code" data-type="csharp">public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
{
	return System.Convert.ToString(value) != System.Convert.ToString(parameter);
}</pre>
		</li>
		<li>Converter 还传了固定参数 "More..." 作为比较值</li>
		<li>Button 绑定的 Command 并不属于 GridControl 的 DataSource，而是属于 UserControl 的 ViewModel，所以在此使用了相对绑定方式</li>
	</ul>
	<h3>自定义排序</h3>
	<ol>
		<li>在 GridColumn 中将 SortMode 设为 "Custom"</li>
		<li>在 GridControl 中添加 CustomColumnSort 事件处理函数，如下所示：
			<pre class="code" data-type="csharp">private void gridResult_CustomColumnSort(object sender, DevExpress.Xpf.Grid.CustomColumnSortEventArgs e)
{
	List&lt;Person&gt; list = this.gridResult.ItemsSource as List&lt;Person&gt;;
	if (list[e.ListSourceRowIndex1].City == "More...")
	{
		e.Result = (e.SortOrder == DevExpress.Data.ColumnSortOrder.Ascending) ? 1 : -1;
		e.Handled = true;
	}
}</pre>
		</li>
	</ol>
	<h2>Master-Detail Grid</h2>
	<h3>XAML</h3>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;dxg:GridControl ItemsSource="{Binding}"&gt;
	&lt;dxg:GridControl.Resources&gt;
		&lt;converter:ShowDetailButtonConverter x:Key="showDetailButtonConverter" /&gt;
	&lt;/dxg:GridControl.Resources&gt;
	&lt;dxg:GridControl.DetailDescriptor&gt;
		&lt;dxg:DataControlDetailDescriptor ItemsSourceBinding="{Binding Cities}"&gt;
			&lt;dxg:GridControl&gt;
				&lt;dxg:GridControl.View&gt;
					&lt;dxg:TableView ShowGroupPanel="False" /&gt;
				&lt;/dxg:GridControl.View&gt;
				&lt;dxg:GridControl.Columns&gt;
					&lt;dxg:GridColumn ReadOnly="True"
									FieldName="CityName"
									Width="100"
									Header="City" /&gt;
					&lt;dxg:GridColumn ReadOnly="True"
									FieldName="PostCode"
									Width="100"
									Header="Post Code" /&gt;
				&lt;/dxg:GridControl.Columns&gt;
			&lt;/dxg:GridControl&gt;
		&lt;/dxg:DataControlDetailDescriptor&gt;
	&lt;/dxg:GridControl.DetailDescriptor&gt;
	&lt;dxg:GridControl.View&gt;
		&lt;dxg:TableView ShowGroupPanel="False"
					   
					   IsDetailButtonVisibleBinding="{Binding Row.Cities, Converter={StaticResource showDetailButtonConverter}}" /&gt;
	&lt;/dxg:GridControl.View&gt;
	&lt;dxg:GridControl.Columns&gt;
		&lt;dxg:GridColumn ReadOnly="True"
						FieldName="CountryCode"
						Width="100"
						Header="Country Code" /&gt;
		&lt;dxg:GridColumn ReadOnly="True"
						FieldName="CountryName"
						Width="100"
						Header="Country Name" /&gt;
	&lt;/dxg:GridControl.Columns&gt;
&lt;/dxg:GridControl&gt;</pre>
	<p>使用的技巧</p>
	<ul>
		<li>DataControlDetailDescriptor 的使用</li>
		<li>使用 TableView.IsDetailButtonVisibleBinding 属性只显示有 Detail 数据的行显示展开图标</li>
		<li>在 Detail Grid 中也需标 ShowGroupPanel="False" 否则顶端会出现空白</li>
	</ul>
	<h3>C#</h3>
	<pre class="code" data-type="csharp" data-collapsed="true" title="Converter">public class ShowDetailButtonConverter : IValueConverter
{
	public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
	{
		if (value != null)
		{
			int count = ((List&lt;City&gt;)value).Count;
			return count &gt; 0;
		}
		else
		{
			return false;
		}
	}

	public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
	{
		throw new NotImplementedException();
	}
}</pre>
	<pre class="code" data-type="csharp" data-collapsed="true" title="Bind Data">List&lt;Country&gt; countries = new List&lt;Country&gt;();

for (int i = 1; i &lt; 10; i++)
{
	Country country = new Country() { CountryCode = "CountryCode " + i, CountryName = "Country " + i };
	country.Cities = new List&lt;City&gt;();

	for (int j = 1; j &lt; 5; j++)
	{
		country.Cities.Add(new City() { CityName = "City " + i + " " + j, PostCode = "Post " + i + " " + j });
	}

	countries.Add(country);
}

countries[2].Cities = new List&lt;City&gt;();

this.DataContext = countries;</pre>
	<pre class="code" data-type="csharp" data-collapsed="true" title="Data Class">public class Country
{
	public string CountryCode { get; set; }
	public string CountryName { get; set; }
	public List&lt;City&gt; Cities { get; set; }
}

public class City
{
	public string CityName { get; set; }
	public string PostCode { get; set; }
}</pre>
	<h2>显示汇总信息</h2>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;dxg:GridControl ItemsSource="{Binding}"&gt;
	&lt;dxg:GridControl.View&gt;
		&lt;dxg:TableView ShowFixedTotalSummary="True"
					   ShowTotalSummary="True" /&gt;
	&lt;/dxg:GridControl.View&gt;
	&lt;dxg:GridControl.TotalSummary&gt;
		&lt;dxg:GridSummaryItem SummaryType="Count"
							 Alignment="Left" /&gt;
		&lt;dxg:GridSummaryItem SummaryType="Average"
							 FieldName="Income"
							 DisplayFormat="Avg: {0:N0}" /&gt;
		&lt;dxg:GridSummaryItem SummaryType="Sum"
							 FieldName="Income" /&gt;
	&lt;/dxg:GridControl.TotalSummary&gt;
	&lt;dxg:GridControl.Columns&gt;
		&lt;dxg:GridColumn Header="Name"
						FieldName="Name" /&gt;
		&lt;dxg:GridColumn Header="Income"
						FieldName="Income"&gt;
			&lt;dxg:GridColumn.EditSettings&gt;
				&lt;dxe:TextEditSettings DisplayFormat="c" /&gt;
			&lt;/dxg:GridColumn.EditSettings&gt;
		&lt;/dxg:GridColumn&gt;
	&lt;/dxg:GridControl.Columns&gt;
&lt;/dxg:GridControl&gt;</pre>
	<pre class="code" data-type="csharp" data-collapsed="true" title="C#">DataTable tb = new DataTable();
tb.Columns.Add("Name", typeof(string));
tb.Columns.Add("Income", typeof(decimal));
Random r = new Random();

for (int i = 1; i < 10; i++)
{
	tb.Rows.Add("Person " + i, r.Next(1000, 10000));
}

this.DataContext = tb;</pre>
	<p>使用技巧如下：</p>
	<ul>
		<li>ShowFixedTotalSummary 用于显示固定的汇总列（对齐与各列无关），一旦设定了 GridSummaryItem.Alignment，则显示在固定汇总列上</li>
		<li>ShowTotalSummary 用于显示普通汇总列，显示时与相应的列对齐</li>
		<li>如何定制汇总列显示</li>
		<li>Count/Sum/Average 的使用</li>
	</ul>
	<h2>两个 GridControl 联动</h2>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;dxg:GridControl x:Name="gridCountry"
				 ItemsSource="{Binding}"&gt;
	&lt;dxg:GridControl.View&gt;
		&lt;dxg:TableView x:Name="viewCountry"
					   ShowGroupPanel="False"
					   AllowEditing="False" /&gt;
	&lt;/dxg:GridControl.View&gt;
	&lt;dxg:GridControl.Columns&gt;
		&lt;dxg:GridColumn FieldName="CountryName"
						Header="Country" /&gt;
	&lt;/dxg:GridControl.Columns&gt;
&lt;/dxg:GridControl&gt;
&lt;dxg:GridControl ItemsSource="{Binding ElementName=viewCountry, Path=FocusedRow.Cities}"&gt;
	&lt;dxg:GridControl.View&gt;
		&lt;dxg:TableView ShowGroupPanel="False"
					   AllowEditing="False" /&gt;
	&lt;/dxg:GridControl.View&gt;
	&lt;dxg:GridControl.Columns&gt;
		&lt;dxg:GridColumn FieldName="CityName"
						Header="City" /&gt;
	&lt;/dxg:GridControl.Columns&gt;
&lt;/dxg:GridControl&gt;</pre>
	<p>技术要点</p>
	<ul>
		<li>使用控件绑定方</li>
	</ul>
	<pre class="code" data-type="csharp" data-collapsed="true" title="C#">public class Country
{
	public string CountryCode { get; set; }
	public string CountryName { get; set; }
	public List&lt;City&gt; Cities { get; set; }
}

public class City
{
	public string CityName { get; set; }
	public string PostCode { get; set; }
}</pre>
	<h2>禁止当前单元格高亮</h2>
	<p>对于只读表格，整行选中时，当前单元格显示与其他单元格显示不一致，看上去不太舒服</p>
	<pre class="code" data-type="xml">&lt;dxg:TableView CellStyle="{x:Null}" /&gt;</pre>
	<p>或者</p>
	<pre class="code" data-type="xml">&lt;dxg:TableView NavigationStyle="Row" /&gt;</pre>
	<h2>单双行显示不同背景色</h2>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;dxg:GridControl ItemsSource="{Binding}"&gt;
	&lt;dxg:GridControl.Resources&gt;
		&lt;ResourceDictionary&gt;
			&lt;SolidColorBrush x:Key="evenRowBrush"
							 Color="#FFDCE2E2" /&gt;
			&lt;SolidColorBrush x:Key="oddRowBrush"
							 Color="#FFFFFF" /&gt;
			&lt;Style x:Key="OddEvenRowStyle"
				   BasedOn="{StaticResource {dxgt:GridRowThemeKey ResourceKey=RowStyle}}"
				   TargetType="{x:Type dxg:GridRowContent}"&gt;
				&lt;Style.Triggers&gt;

					&lt;MultiDataTrigger&gt;
						&lt;MultiDataTrigger.Conditions&gt;
							&lt;Condition Binding="{Binding Path=EvenRow}"
									   Value="False" /&gt;
							&lt;Condition Binding="{Binding Path=SelectionState}"
									   Value="None" /&gt;
						&lt;/MultiDataTrigger.Conditions&gt;
						&lt;Setter Property="Background"
								Value="{StaticResource evenRowBrush}" /&gt;
					&lt;/MultiDataTrigger&gt;

					&lt;MultiDataTrigger&gt;
						&lt;MultiDataTrigger.Conditions&gt;
							&lt;Condition Binding="{Binding Path=EvenRow}"
									   Value="True" /&gt;
							&lt;Condition Binding="{Binding Path=SelectionState}"
									   Value="None" /&gt;
						&lt;/MultiDataTrigger.Conditions&gt;
						&lt;Setter Property="Background"
								Value="{StaticResource oddRowBrush}" /&gt;
					&lt;/MultiDataTrigger&gt;
				&lt;/Style.Triggers&gt;
			&lt;/Style&gt;
		&lt;/ResourceDictionary&gt;
	&lt;/dxg:GridControl.Resources&gt;
	&lt;dxg:GridControl.View&gt;
		&lt;dxg:TableView RowStyle="{StaticResource OddEvenRowStyle}" /&gt;
	&lt;/dxg:GridControl.View&gt;
	&lt;dxg:GridControl.Columns&gt;
		&lt;dxg:GridColumn Header="FIELD"
						Width="175"
						FixedWidth="True"
						FieldName="DisplayLabel" /&gt;
		&lt;dxg:GridColumn Header=""
						Width="75"
						FixedWidth="True"
						FieldName="Operator" /&gt;
		&lt;dxg:GridColumn Header="VALUES"
						FieldName="DisplayValues" /&gt;
	&lt;/dxg:GridControl.Columns&gt;
&lt;/dxg:GridControl&gt;</pre>
	<h2>在标题栏实现 Check/Uncheck All 功能</h2>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;Window x:Class="DXWPFApplication1.Window20"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
		xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
		Title="Check/Uncheck all in Grid Column Header"
		x:Name="TestWindow"
		Height="400"
		Width="500"&gt;
	&lt;DockPanel&gt;
		&lt;dxg:GridControl ItemsSource="{Binding Path=List}"&gt;
			&lt;dxg:GridControl.View&gt;
				&lt;dxg:TableView /&gt;
			&lt;/dxg:GridControl.View&gt;
			&lt;dxg:GridControl.Columns&gt;
				<span class="emphasis">&lt;dxg:GridColumn Fixed="Left"
								Header="{Binding ElementName=TestWindow, Path=DataContext}"
								HorizontalHeaderContentAlignment="Center"
								FieldName="IsChecked"&gt;
					&lt;dxg:GridColumn.HeaderTemplate&gt;
						&lt;DataTemplate&gt;
							&lt;StackPanel VerticalAlignment="Center"&gt;
								&lt;dxe:CheckEdit HorizontalAlignment="Center"
											   HorizontalContentAlignment="Center"
											   IsChecked="{Binding Path=IsAllChecked}" /&gt;
							&lt;/StackPanel&gt;
						&lt;/DataTemplate&gt;
					&lt;/dxg:GridColumn.HeaderTemplate&gt;
				&lt;/dxg:GridColumn&gt;</span>
				&lt;dxg:GridColumn Header="Id"
								FieldName="Id" /&gt;
				&lt;dxg:GridColumn Header="Value"
								FieldName="Value" /&gt;
			&lt;/dxg:GridControl.Columns&gt;
		&lt;/dxg:GridControl&gt;
	&lt;/DockPanel&gt;
&lt;/Window&gt;</pre>
	<p>注意如下几点：</p>
	<ul>
		<li>GirdColumn.Header 的设置很重要，需绑定当前的 DataContext，用于 HeaderTemplate 中的 DataContext</li>
	</ul>
	<pre class="code" data-type="csharp" data-collapsed="true" title="View Model">public class CheckTestVM : ViewModelBase
{
	public CheckTestVM()
	{
		this.List = new List&lt;CheckTestData&gt;();
	}

	private bool isAllChecked;
	public bool IsAllChecked
	{
		get { return this.isAllChecked; }
		set
		{
			this.Set(() =&gt; this.IsAllChecked, ref this.isAllChecked, value);
			this.List.ForEach(item =&gt; item.IsChecked = value);
		}
	}

	public List&lt;CheckTestData&gt; List { get; set; }
}

public class CheckTestData : ViewModelBase
{
	private bool isChecked;
	public bool IsChecked
	{
		get { return this.isChecked; }
		set { this.Set(() =&gt; this.IsChecked, ref this.isChecked, value); }
	}

	public int Id { get; set; }
	public string Value { get; set; }
}</pre>
	<h2>右键菜单与焦点记录</h2>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;dxb:BarManager CreateStandardLayout="False"
				AllowQuickCustomization="False"
				AllowCustomization="False"&gt;
	&lt;dxb:BarManager.Items&gt;
		&lt;dxb:BarButtonItem x:Name="btnShow"
						   Content="Show Info"
						   Command="{Binding PopupCommand}"
						   CommandParameter="{Binding ElementName=viewMain, Path=FocusedRow}" /&gt;
	&lt;/dxb:BarManager.Items&gt;
	&lt;dxg:GridControl x:Name="grid"
					 ItemsSource="{Binding Path=CountryList}"&gt;
		&lt;dxb:BarManager.DXContextMenu&gt;
			&lt;dxb:PopupMenu&gt;
				&lt;dxb:BarButtonItemLink BarItemName="btnShow" /&gt;
			&lt;/dxb:PopupMenu&gt;
		&lt;/dxb:BarManager.DXContextMenu&gt;
		&lt;dxg:GridControl.View&gt;
			&lt;dxg:TableView x:Name="viewMain"
						   AllowBestFit="True"
						   AllowEditing="False" /&gt;
		&lt;/dxg:GridControl.View&gt;
		&lt;dxg:GridControl.Columns&gt;
			&lt;dxg:GridColumn Header="Country"
							FieldName="CountryName" /&gt;
			&lt;dxg:GridColumn Header="City"
							FieldName="CountryCode" /&gt;
		&lt;/dxg:GridControl.Columns&gt;
	&lt;/dxg:GridControl&gt;
&lt;/dxb:BarManager&gt;</pre>
	<p>注意点：</p>
	<ul>
		<li>右键菜单(Context Menu) 的 XAML 实现</li>
		<li>使用当前行作为菜单命令的参数，注意使用的是 View 而不是 GridControl</li>
	</ul>
	<p>ViewModel 的实现如下所示 (使用了 MVVMLight Framework)</p>
	<pre class="code" data-type="csharp" data-collapsed="true" title="View Model">public class PopupMenuTestVm : ViewModelBase
{
	public PopupMenuTestVm()
	{
		this.CountryList = new List&lt;Country&gt;()
		{
			new Country() {CountryName = "China", CountryCode = "CN"},
			new Country() {CountryName = "United States", CountryCode = "US"}
		};

		this.PopupCommand = new RelayCommand&lt;Country&gt;(this.ShowCountry);
	}

	public ICommand PopupCommand { get; private set; }
	public List&lt;Country&gt; CountryList { get; set; }

	private void ShowCountry(Country country)
	{
		MessageBox.Show(country.CountryName);
	}
}</pre>
	<h2>Banded Grid</h2>
	<p>如下图带有多行标题栏的 Grid</p>
	<p><img alt="" src="img/banded_grid.png" /></p>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;dxg:GridControl Name="gridTest"
				 ItemsSource="{Binding}"&gt;
	&lt;dxg:GridControl.View&gt;
		&lt;dxg:TableView NavigationStyle="Row"
					   AllowEditing="False"
					   AllowBestFit="True"
					   AllowPerPixelScrolling="True"
					   ShowGroupPanel="False"&gt;
			&lt;i:Interaction.Behaviors&gt;
				&lt;dxg:BandedViewBehavior&gt;
					&lt;dxg:BandedViewBehavior.ColumnDefinitions&gt;
						&lt;dxg:ColumnDefinition /&gt;
						&lt;dxg:ColumnDefinition /&gt;
						&lt;dxg:ColumnDefinition/&gt;
						&lt;dxg:ColumnDefinition/&gt;
						&lt;dxg:ColumnDefinition/&gt;
					&lt;/dxg:BandedViewBehavior.ColumnDefinitions&gt;
					&lt;dxg:BandedViewBehavior.RowDefinitions&gt;
						&lt;dxg:RowDefinition Height="Auto" /&gt;
						&lt;dxg:RowDefinition Height="Auto" /&gt;
					&lt;/dxg:BandedViewBehavior.RowDefinitions&gt;
					&lt;dxg:BandedViewBehavior.TemplatesContainer&gt;
						&lt;dxg:TemplatesContainer /&gt;
					&lt;/dxg:BandedViewBehavior.TemplatesContainer&gt;
				&lt;/dxg:BandedViewBehavior&gt;
			&lt;/i:Interaction.Behaviors&gt;
		&lt;/dxg:TableView&gt;
	&lt;/dxg:GridControl.View&gt;

	&lt;dxg:GridControl.Columns&gt;
		&lt;dxg:GridColumn Header="Basic Info"
						dxg:BandedViewBehavior.Column="0"
						dxg:BandedViewBehavior.ColumnSpan="2"
						dxg:BandedViewBehavior.IsBand="True" /&gt;
		&lt;dxg:GridColumn FieldName="Name"
						dxg:BandedViewBehavior.Column="0"
						dxg:BandedViewBehavior.Row="1" /&gt;
		&lt;dxg:GridColumn FieldName="Gender"
						dxg:BandedViewBehavior.Column="1"
						dxg:BandedViewBehavior.Row="1" /&gt;
		&lt;dxg:GridColumn Header="Score"
						dxg:BandedViewBehavior.Column="2"
						dxg:BandedViewBehavior.ColumnSpan="3"
						dxg:BandedViewBehavior.IsBand="True" /&gt;
		&lt;dxg:GridColumn FieldName="Math"
						dxg:BandedViewBehavior.Column="2"
						dxg:BandedViewBehavior.Row="1" /&gt;
		&lt;dxg:GridColumn FieldName="Chinese"
						dxg:BandedViewBehavior.Column="3"
						dxg:BandedViewBehavior.Row="1" /&gt;
		&lt;dxg:GridColumn FieldName="English"
						dxg:BandedViewBehavior.Column="4"
						dxg:BandedViewBehavior.Row="1" /&gt;
	&lt;/dxg:GridControl.Columns&gt;
&lt;/dxg:GridControl&gt;</pre>
	<h2>在 Grid 内使用内置 LookUpEdit 所为单元格控件</h2>
	<p>在全例中，同时使用了 GriCotnrol 作为 LookUpEdit 的下拉组件</p>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;dxg:GridControl Name="gridTest"
				 ItemsSource="{Binding Path=CountryList}"&gt;
	&lt;dxg:GridControl.View&gt;
		&lt;dxg:TableView&gt; /&gt;
	&lt;/dxg:GridControl.View&gt;
	&lt;dxg:GridControl.Columns&gt;
		&lt;dxg:GridColumn FieldName="CountryCode"
						Header="Country Code"&gt;
			<span class="emphasis">&lt;dxg:GridColumn.EditSettings&gt;
				&lt;dxg:LookUpEditSettings IsTextEditable="False"
										AutoPopulateColumns="False"
										DataContext="{Binding ElementName=window25, Path=DataContext}"
										ItemsSource="{Binding CountryList}"
										PopupWidth="800"&gt;
					&lt;dxg:LookUpEditSettings.PopupContentTemplate&gt;
						&lt;ControlTemplate&gt;
							&lt;dxg:GridControl Name="PART_GridControl"&gt;
								&lt;dxg:GridControl.View&gt;
									&lt;dxg:TableView  /&gt;
								&lt;/dxg:GridControl.View&gt;
								&lt;dxg:GridControl.Columns&gt;
									&lt;dxg:GridColumn FieldName="CountryCode"
													Header="Country Code"&gt;
									&lt;/dxg:GridColumn&gt;
									&lt;dxg:GridColumn FieldName="CountryName"
													Header="CountryName"&gt;
									&lt;/dxg:GridColumn&gt;
								&lt;/dxg:GridControl.Columns&gt;
							&lt;/dxg:GridControl&gt;
						&lt;/ControlTemplate&gt;
					&lt;/dxg:LookUpEditSettings.PopupContentTemplate&gt;
				&lt;/dxg:LookUpEditSettings&gt;
			&lt;/dxg:GridColumn.EditSettings&gt;
		&lt;/dxg:GridColumn&gt;</span>
	&lt;/dxg:GridControl.Columns&gt;
&lt;/dxg:GridControl&gt;</pre>
	<p>需要注意的点</p>
	<ul>
		<li>使用了 LookUpEditSettings 而不是直接使用 LookUpEdit，其与 GridControl 内置的 LookUpEdit 实现</li>
		<li>LookUpEdit 的数据绑定方式，指定了父控件的数据源，window25 是 Window 的名字</li>
	</ul>
	<h2>在 GridControl 的 LookUpEdit Cell 中自定义过滤</h2>
	<p>本例主要用于使用自定义的 TextEdit 来过滤 GridControl 中的内容，但该 GridControl 作为 LookUpEditSetting 的 ControlTemplate 存在于另一个父 GridControl 中(GridControl 中套 GridControl)</p>
	<p>之所以使用自定义的 Search String 而不使用 GridControl 内置的 ShowSearchPanelMode 属性是因为当 GridControl 以 PART_GridControl 方式作为 LookUpEdit 的 PopupContentTemplate 后，一些属性被禁用了（用了也白用）以适应 LookUpEdit 的特点。 </p>
	<p>关键代码如下所示</p>
	<pre class="code" data-type="xml" data-collapsed="true" title="XAML">&lt;dxg:GridControl x:Name=”parentGrid”&gt;
	&lt;dxg:GridControl.View&gt;
		&lt;dxg:TableView ShownEditor=”viewInvestors_ShownEditor” /&gt;
	&lt;/dxg:GridControl.View&gt;
	&lt;&lt;dxg:GridColumns&gt;
		&lt;dxg:GridColumn Header=”dropdownColumn”&gt;
		&lt;/dxg:GridColumn&gt;
			&lt;dxg:GridColumn.EditSettings&gt;
					&lt;dxg:LookUpEditSettings x:Name=”parentInvestorLkpEdt”
											IsTextEditable=”False”
											AutoPopulateColumns=”False”&gt;
						&lt;dxg:LookUpEditSettings.PopupContentTemplate&gt;
							&lt;ControlTemplate&gt;
								&lt;StackPanel&gt;
									&lt;dxe:TextEdit x:Name=”txtQuickSearch” EditValueChanging=”txtQuickSearch_EditValueChanging” /&gt;
									&lt;dxg:GridControl x:Name=”PART_GridControl” AutoPopulateColumns=”False”&gt;
										&lt;dxg:GridControl.View&gt;
											&lt;dxg:TableView x:Name=”primaryInvestorDetailTableView” /&gt;
										&lt;/dxg:GridControl.View&gt;
									&lt;/dxg:GridControl&gt;
								&lt;/StackPanel&gt;
							&lt;/ControlTemplate&gt;
						&lt;/dxg:LookUpEditSettings.PopupContentTemplate&gt;
					&lt;/dxg:LookUpEditSettings&gt;
				&lt;/dxg:GridColumn.EditSettings&gt;
	&lt;/&lt;dxg:GridColumns&gt;
&lt;/dxg:GridControl&gt;</pre>
	<pre class="code" data-type="csharp" data-collapsed="true" title="xaml.cs">private LookUpEdit lookupEditor = null;

private void txtQuickSearch_EditValueChanging(object sender, DevExpress.Xpf.Editors.EditValueChangingEventArgs e)
{
	if (this.lookupEditor != null)
	{
		GridControl gridControl = this.lookupEditor.GetGridControl();
		TableView view = gridControl.View as TableView;
		view.SearchPanelFindFilter = FilterCondition.Contains;
		view.SearchString = Convert.ToString(e.NewValue);
	}
}

private void viewInvestors_ShownEditor(object sender, EditorEventArgs e)
{
	if (e.Editor is LookUpEdit)
	{
		this.lookupEditor = e.Editor as LookUpEdit;
		this.lookupEditor.PopupOpened -= lookupEditor_PopupOpened;
		this.lookupEditor.PopupOpened += lookupEditor_PopupOpened;
	}
}

void lookupEditor_PopupOpened(object sender, RoutedEventArgs e)
{
	EditorPopupBase popup = typeof(LookUpEdit).InvokeMember(”Popup”, 
		BindingFlags.GetProperty | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance,
		null, this.lookupEditor, null) as EditorPopupBase;
	TextEdit filterEditor = LayoutHelper.FindElementByName(popup.Child as PopupBorderControl, ”txtQuickSearch”) as TextEdit;

	if (filterEditor != null)
	{
		filterEditor.Text = string.Empty;
	}
}</pre>
	<p>关键点如下：</p>
	<ul>
		<li>使用父 GridControl.View 的 ShownEditor 事件来获取真正弹出的 LookUpEdit 控件，该控件是动态根据 LookUpEditSetting 生成的，无法直接根据变量名获取</li>
		<li>在获取到 LookUpEdit 控件后，使用反射获取其 Popup 值，因为该值为 protected，所以不得不使用反射获取，再进一步使用 LayoutHelper.FindElementByName 来获取其 TextEdit 控件并清除其值，保证每次弹出时搜索字符串都为空</li>
	</ul>
	<h2>设置选中行/焦点行的样式</h2>
	<pre class="code" data-type="xml">&lt;Window.Resources&gt;
	&lt;Style x:Key="SelectedRowStyle"
		   TargetType="{x:Type dxg:GridRowContent}"&gt;
		&lt;Style.Triggers&gt;
			&lt;DataTrigger Binding="{Binding Path=IsSelected}"
						 Value="True"&gt;
				&lt;Setter Property="Background"
						Value="Gray" /&gt;
				&lt;Setter Property="Foreground"
						Value="White" /&gt;
			&lt;/DataTrigger&gt;
			&lt;Trigger Property="dxg:GridViewBase.IsFocusedRow"
					 Value="True"&gt;
				&lt;Setter Property="Background"
						Value="YellowGreen" /&gt;
				&lt;Setter Property="Foreground"
						Value="White" /&gt;
			&lt;/Trigger&gt;
		&lt;/Style.Triggers&gt;
	&lt;/Style&gt;
&lt;/Window.Resources&gt;

&lt;dxg:GridControl&gt;
	&lt;dxg:GridControl.View&gt;
		&lt;dxg:TableView MultiSelectMode="Row"
					   RowStyle="{StaticResource SelectedRowStyle}" /&gt;
&lt;/dxg:GridControl&gt;
</pre>
	<h2>Navigator Bar</h2>
	<p>内置的 Navigator Bar 截止到 2016-11-3 日还尚未实现:)</p>
</body>
</html>
