<!DOCTYPE html>

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>Zip文件处理</title>
<script type="text/javascript" src="../../mylib/js/css.js"></script>
</head>

<body>
<p id="title">Zip文件处理――SharpZipLib</p>
<h1>下载控件</h1>
<h2>控件名称</h2>
<p>SharpZip</p>
<h2>下载地址</h2>
<p>本地</p>
<p><a href="downloads/084SharpZipLib.zip">可执行文件</a>、<a href="downloads/084SharpZipLib_SourceSamples.zip">源代码</a></p>
<p>网上最新版本</p>
<h1>示例</h1>
<h2>解压缩</h2>
<p>解压缩至目录</p>
<div id="accordion-unzip-folder">
<p><a href="#">查看代码</a></p>
<pre class="code" data-type="csharp">using System.IO;
using ICSharpCode.SharpZipLib.BZip2;
using ICSharpCode.SharpZipLib.Zip;
using ICSharpCode.SharpZipLib.Zip.Compression;
using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
using ICSharpCode.SharpZipLib.GZip;

private void upzipfile()
{
	ZipInputStream s = new ZipInputStream(File.OpenRead("压缩文件名".zip));
	
	ZipEntry theEntry;	
	while ((theEntry = s.GetNextEntry()) != null)
	{
		string directoryName = @"D:\目标目录\";
		string fileName= Path.GetFileName(theEntry.Name);
		
		// create directory
		Directory.CreateDirectory(directoryName);
		
		if (fileName != String.Empty)
		{
			FileStream streamWriter = File.Create(directoryName + theEntry.Name);
			
			int size = 2048;	
			byte[] data = new byte[2048];
			while (true)	
			{
				size = s.Read(data, 0, data.Length);	
				if (size > 0)
				{
					streamWriter.Write(data, 0, size);	
				}
				else	
				{
					break;	
				}
			}
			
			streamWriter.Close();
		}
	}
	s.Close();	
}
</pre>
</div>
<p>解压缩数组</p>
<div id="accordion-unzip-byte-array">
<p><a href="#">查看代码</a></p>
<pre class="code" data-type="csharp">using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using ICSharpCode.SharpZipLib.Zip;
using ICSharpCode.SharpZipLib.Checksums;

public static byte[] Decompress(byte[] buffer)
{
	MemoryStream ms2 = new MemoryStream(buffer);
	ZipInputStream zipStream = new ZipInputStream(ms2);
	MemoryStream ms3 = new MemoryStream();
	byte[] buf = new byte[1024 * 10];
	ZipEntry theEntry = zipStream.GetNextEntry();
	while (true)
	{
		int size = zipStream.Read(buf, 0, buf.Length);
		if (size &gt; 0)
			ms3.Write(buf, 0, size);
		else
			break;
	}
	ms3.Seek(0, SeekOrigin.Begin);
	byte[] decompressed_buffer = new byte[ms3.Length];
	ms3.Read(decompressed_buffer, 0, decompressed_buffer.Length);

	zipStream.Close();
	ms2.Close();
	ms3.Close();

	return decompressed_buffer;
}</pre></div>
<h2>压缩</h2>
<p>压缩单个文件</p>
<div id="accordion-zip-single-file">
<p><a href="#">查看代码</a></p>
<pre class="code" data-type="csharp">using System.IO;
using ICSharpCode.SharpZipLib.Checksums;
using ICSharpCode.SharpZipLib.Zip;
using ICSharpCode.SharpZipLib.Zip.Compression;
using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
using ICSharpCode.SharpZipLib.GZip;
using ICSharpCode.SharpZipLib.BZip2;

static private void add_file_to_zip(string zip_file, string src_file)
{
	Crc32 crc = new Crc32();
	ZipOutputStream s = new ZipOutputStream(File.Create(zip_file));
	
	s.SetLevel(5); // 0 - store only to 9 - means best compression
	FileStream fs = File.OpenRead(src_file);
		
	byte[] buffer = new byte[fs.Length];
	fs.Read(buffer, 0, buffer.Length);
	string zip_file_name = src_file.Substring(src_file.LastIndexOf('\\') + 1, src_file.Length - src_file.LastIndexOf('\\') - 1);
	ZipEntry entry = new ZipEntry(zip_file_name);
		
	entry.DateTime = DateTime.Now;
	entry.Size = fs.Length;
	fs.Close();
		
	crc.Reset();
	crc.Update(buffer);
	entry.Crc  = crc.Value;
	s.PutNextEntry(entry);
	s.Write(buffer, 0, buffer.Length);
	
	s.Finish();
	s.Close();
}</pre>
</div>
<p>压缩多个文件</p>
<div id="accordion-zip-multi-files">
<p><a href="#">查看代码</a></p>
<pre class="code" data-type="csharp">using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using ICSharpCode.SharpZipLib.Zip;
using ICSharpCode.SharpZipLib.Checksums;

public static bool CompressFile(string objFile, List&lt;string&gt; srcFiles)
{
	try
	{
		Crc32 crc = new Crc32();
		ZipOutputStream s = new ZipOutputStream(File.Create(objFile));

		s.SetLevel(5); // 0 - store only to 9 - means best compression

		foreach (string src_file in srcFiles)
		{
			FileStream fs = null;
			try
			{
				fs = File.OpenRead(src_file);
			}
			catch
			{
				//用于源文件被读锁定的情况
				String tempFile = FileHelper.GetAvailableFile(Path.Combine(TempDirectory.GetPath(), Path.GetFileName(src_file)), true);
				File.Copy(src_file, tempFile);
				try
				{
					fs = File.OpenRead(tempFile);
				}
				catch { }
			}

			if (fs == null)
				continue;

			byte[] buffer = new byte[fs.Length];
			fs.Read(buffer, 0, buffer.Length);
			string zip_file_name = src_file.Substring(src_file.LastIndexOf('\\') + 1, src_file.Length - src_file.LastIndexOf('\\') - 1);
			ZipEntry entry = new ZipEntry(zip_file_name);

			entry.DateTime = DateTime.Now;
			entry.Size = fs.Length;
			fs.Close();

			crc.Reset();
			crc.Update(buffer);
			entry.Crc = crc.Value;
			s.PutNextEntry(entry);
			s.Write(buffer, 0, buffer.Length);

		}

		s.Finish();
		s.Close();
	}
	catch (Exception ex)
	{
		return false;
	}

	return true;
}</pre>
</div>
<p>压缩数据流</p>
<div id="accordion-compress-byte-array">
<p><a href="#">查看代码</a></p>
<pre class="code" data-type="csharp">using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using ICSharpCode.SharpZipLib.Zip;
using ICSharpCode.SharpZipLib.Checksums;

public static byte[] Compress(byte[] buffer)
{
	byte[] compressedBuf = null;
	try
	{
		MemoryStream ms = new MemoryStream();
		ZipOutputStream zipStream = new ZipOutputStream(ms);
		zipStream.IsStreamOwner = false;

		zipStream.SetLevel(5); // 0 - store only to 9 - means best compression

		ZipEntry newEntry = new ZipEntry(System.Guid.NewGuid().ToString().ToUpper());
		newEntry.DateTime = DateTime.Now;
		zipStream.PutNextEntry(newEntry);
		zipStream.Write(buffer, 0, buffer.Length);
		zipStream.CloseEntry();
		zipStream.Close();

		compressedBuf = ms.ToArray();
	}
	catch (Exception ex)
	{
		System.Diagnostics.Debug.WriteLine(ex.ToString());
		return null;
	}

	return compressedBuf;
}</pre></div>
<p>&nbsp;</p>

</body>
</html>
