<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
<title>命名空间列表</title>
<script type="text/javascript" src="../../mylib/js/css.js"></script>
</head>

<body>
<h1>命名空间列表</h1>

<table style="width:98%" >
  <tr>
    <th width="20%">名称</th>
    <th width="75%">简介</th>
    <th width="5%">版本</th>
  </tr>
  <tr>
    <td>System</td>
    <td>包含基本类和基类，这些类定义常用的值和引用数据类型、事件和事件处理程序、接口、属性和异常处理。
      <br />
      <br />
    其他类提供的服务支持数据类型转换、方法参数操作、数学运算、远程和本地程序调用、应用程序环境管理和对托管与非托管应用程序的监控。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.CodeDom</td>
    <td>包含可以用于表示源代码文档的元素和结构的类。此命名空间中的类可用来建立源代码文档结构的模型，使用 System.CodeDom.Compiler 命名空间提供的功能可以将源代码文档输出为所支持语言的源代码。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.CodeDom.Compiler</td>
    <td>包含了这样一些类型：它们的用途是对所支持编程语言的源代码的生成和编译进行管理。每个代码生成器都可以基于 Code Document Object Model (CodeDOM) 源代码模型（由 System.CodeDom 命名空间提供的元素组成）的结构来生成特定某种编程语言的源代码。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Collections</td>
    <td>定义各种集合对象（如列表、队列、位数组、哈希表和字典）。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Collections.<br />
    Generic</td>
    <td>包含定义泛型集合的接口和类，泛型集合允许用户创建强类型集合，它能提供比非泛型强类型集合更好的类型安全性和性能。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Collections<br />
    .ObjectModel</td>
    <td>包含可在可重用库的对象模型中用作集合的类。在属性或方法返回集合时使用这些类。</td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Collections.<br />
    Specialized</td>
    <td>包含专用的和强类型的集合，例如，链接的列表词典、位向量以及只包含字符串的集合。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.ComponentModel</td>
    <td><p>System.ComponentModel 命名空间提供用于实现组件和控件运行时和设计时行为的类。此命名空间包括用于实现属性和类型转换器、绑定到数据源以及授权组件的基类和接口。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"> </p>
      <p xmlns="">该命名空间中的类分为以下类别： </p>
      <ul xmlns="">
        <li>
          <p>核心组件类。请参见 Component、IComponent、Container 和 IContainer 类。</p>
        </li>
        <li>
          <p>组件授权。请参见 License、LicenseManager、LicenseProvider 和 LicenseProviderAttribute 类。</p>
        </li>
        <li>
          <p>属性。请参见 <MSHelp:link tabIndex=0 
keywords="T:System.Attribute">Attribute</MSHelp:link> 类。</p>
        </li>
        <li>
          <p>说明符和持久性。请参见 TypeDescriptor、EventDescriptor 和 PropertyDescriptor 类。</p>
        </li>
        <li>
          <p>类型转换器。请参见 TypeConverter 类。</p>
        </li>
    </ul></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.ComponentModel.<br />
    Design</td>
    <td>包含的类可供开发人员用来为组件生成自定义的设计时行为，以及在设计时配置组件所需的用户界面。设计时环境提供的系统使开发人员能够排列组件并配置组件的属性。某些组件可能需要特定的设计时仅有的行为，才能在设计时环境中正常运行。同时，提供自定义用户界面来帮助开发人员配置组件或复杂数据类型的值，这可能也非常也用。在此命名空间中定义的类和接口可用于生成组件的设计时行为、访问设计时服务，以及实现自定义的设计时配置接口。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Configuration</td>
    <td>包含提供用于处理配置数据的编程模型的类型。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Configuration.<br />
    Assemblies</td>
    <td>包含用于配置程序集的类。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Configuration.<br />
    Internal</td>
    <td>包含仅供内部使用的配置类型。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Configuration.<br />
    Provider</td>
    <td>包含由服务器和客户端应用程序共享的基类，用于支持可插接式模型轻松地添加或移除功能。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Data</td>
    <td>提供对表示 ADO.NET 结构的类的访问。通过 ADO.NET 可以生成一些组件，用于有效管理多个数据源的数据。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Data.Common</td>
    <td>包含由各种 .NET Framework 数据提供程序共享的类。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Data.Design</td>
    <td>包含可用于生成自定义类型化数据集的类。</td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Data.Odbc</td>
    <td>用于 ODBC 的 .NET Framework 数据提供程序。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Data.OleDb</td>
    <td>用于 OLE DB 的 .NET Framework 数据提供程序。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Data.OracleClient</td>
    <td>用于 Oracle 的 .NET Framework 数据提供程序。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Data.Sql</td>
    <td>包含支持 SQL Server 特定的功能的类。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Data.SqlClient</td>
    <td>用于 SQL Server 的 .NET Framework 数据提供程序。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Data.SqlServerCe</td>
    <td>用于 SQL Server Mobile 的 .NET Compact Framework 数据提供程序。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Data.SqlTypes</td>
    <td>为 SQL Server 2005 中的本机数据类型提供类。这些类为 .NET Framework 公共语言运行库 (CLR) 所提供的数据类型提供了一种更为安全和快速的替代项。使用此命名空间中的类有助于防止出现精度损失造成的类型转换错误。由于其他数据类型在幕后与 SqlTypes 进行相互转换，所以在此命名空间内显式创建和使用对象将会使代码更快。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Deployment.<br />
    Application</td>
    <td><p>使用 System.Deployment.Application 命名空间可以将自定义升级行为编程到 ClickOnce 应用程序中。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"> </p>
      <p xmlns="">此命名空间中的关键类为 ApplicationDeployment。可以使用 CheckForUpdate 或 CheckForUpdateAsync 方法测试您的部署是否有可用更新；CheckForUpdateAsync 方法在成功完成后引发 CheckForUpdateCompleted 事件。CheckForDetailedUpdate 返回有关更新的重要信息，如更新的版本号以及更新对当前用户是否为必需更新。有可用更新时，可以通过使用 Update 或 UpdateAsync 安装更新；UpdateAsync 方法在更新安装完成后引发 UpdateCompleted 事件。对于大型更新，可通过 CheckForUpdateProgressChanged 和 UpdateProgressChanged 事件接收进度通知，并使用 <MSHelp:link tabIndex=0 
keywords="T:System.ComponentModel.ProgressChangedEventArgs">ProgressChangedEventArgs</MSHelp:link> 中的信息通知用户下载状态。</p>
    <p xmlns="">还可以使用 ApplicationDeployment 根据需要下载大型文件和程序集。必须在部署的应用程序清单中将这些文件标记为“可选”，这样在安装时就不会下载这些文件了。可以通过使用 DownloadFileGroup 或 DownloadFileGroupAsync 方法在应用程序持续时间的任意时刻下载这些文件。可以通过为 <MSHelp:link tabIndex=0 
keywords="T:System.AppDomain">AppDomain</MSHelp:link> 类的 <MSHelp:link tabIndex=0 
keywords="E:System.AppDomain.AssemblyResolve">AssemblyResolve</MSHelp:link> 事件提供事件处理程序，在程序集加</p></td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Deployment.<br />
    Internal</td>
    <td>&nbsp;</td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Diagnostics</td>
    <td><p>提供特定的类，使您能够与系统进程、事件日志和性能计数器进行交互。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"> </p>
      <ul xmlns="">
        <li>
          <p>EventLog 组件提供在网络上写入事件日志、读取事件日志项以及创建和删除事件日志与事件源的功能。EntryWrittenEventHandler 提供与事件日志进行异步交互的方式。支持类提供对详细控制的访问，其中包括：权限限制、指定事件日志类型的功能（控制通过事件日志项写入的默认数据的类型）以及循环访问事件日志项集合的功能。有关这些任务的更多信息，请参见 EventLogPermission、EventLogEntryType 和 EventLogEntryCollection 类。</p>
        </li>
        <li>
          <p>Process 类提供下列功能：监视整个网络的系统进程以及启动和停止本地系统进程。除了检索运行进程列表（通过指定计算机、进程名称或进程 ID）或查看有关当前可访问处理器的进程的信息之外，还可以获取有关进程线程和模块的详细信息，其方法是通过 Process 类本身，以及分别通过与 ProcessThread 和 ProcessModule 类进行交互来获取。利用 ProcessStartInfo 类，您可以指定用来启动新进程的多种元素，如输入流、输出流、错误流、工作目录以及命令行谓词和参数。它们使您能够对进程的行为进行细微的控制。其他相关类用于指定窗口样式、进程和线程优先级以及与线程和模块的集合进行交互。</p>
        </li>
        <li>
          <p>PerformanceCounter 类使您能够监视系统性能，而 PerformanceCounterCategory 类则提供新建自定义计数器和类别的方式。您可以写入本地自定义计数器和从本地及远程计数器（系统和自定义计数器）中读取。您可以使用 PerformanceCounter 类对计数器进行取样，并使用 CounterSample 类来计算连续性能计数器样本的结果。CounterCreationData 类用于在一个类别中创建多个计数器并指定其类型。与性能计数器组件关联的其他类提供对计数器集合、计数器权限和计数器类型的访问。</p>
        </li>
      </ul>
    <p xmlns="">System.Diagnostics 命名空间还提供用于调试应用程序和跟踪代码执行情况的类。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Diagnostics.<br />
    CodeAnalysis</td>
    <td>包含用于与代码分析工具进行交互的类。代码分析工具用于分析代码与编码约定（如命名规则或安全性规则）的一致性。</td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Diagnostics.<br />
    Design</td>
    <td>包含可用于扩展对应用程序监视和检测的设计时支持的类。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"></CONTENT></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Diagnostics.<br />
    SymbolStore</td>
    <td>提供的类允许读取和向 Microsoft 中间语言 (MSIL) 映射写入调试符号信息（如源行）。面向 .NET Framework 的编译器可以将调试符号信息存储到程序员的数据库 (PDB) 文件中。调试器和代码探查器工具可以在运行时读取调试符号信息。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.DirectoryService</td>
    <td><p>间用以从托管代码简便地访问 Active Directory。该命名空间包含两个组件类,即 DirectoryEntry 和 DirectorySearcher，它们使用 Active Directory 服务接口 (ADSI) 技术。ADSI 是 Microsoft 提供的一组接口，作为使用各种网络提供程序的灵活的工具。无论网络有多大，ADSI 都可以使管理员能够相对容易地定位和管理网络上的资源。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"> </p>
      <p xmlns="">此命名空间中的类可以与任何 Active Directory 服务提供程序一起使用。当前的一些提供程序包括 Internet 信息服务 (IIS)、轻量目录访问协议 (LDAP)、Novell NetWare 目录服务 (NDS) 和 WinNT。</p>
    <p xmlns="">ADSI 是 Microsoft Active Directory 的编程接口，使应用程序能够只使用一个接口就可以与网络上的不同目录进行交互。使用 ADSI，可以创建一些应用程序，用以执行常见任务，如备份数据库、访问打印机和管理用户帐户。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Drawing</td>
    <td>提供了对 GDI+ 基本图形功能的访问。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Drawing.Design</td>
    <td>包含扩展设计时用户界面 (UI) 逻辑和绘制的类。
    <p 
xmlns="">此命名空间中的类可用于创建自定义工具栏的项、类型特定的值编辑器（可以编辑并可以用图形方式表示其支持的类型的值）和类型转换器（在一定的类型之间转换值）。此命名空间提供基本的框架，可用来开发设计时 UI 的扩展。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Drawing.Drawing2D</td>
    <td>提供高级的二维和矢量图形功能。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Drawing.Imaging</td>
    <td>提供高级 GDI+ 图像处理功能。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Drawing.Printing</td>
    <td>提供与打印相关的服务。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Drawing.Text</td>
    <td>提供高级 GDI+ 排版功能。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.EnterpriseServices</td>
    <td>为企业应用程序提供重要的基础结构。COM+ 为企业环境中部署的组件编程模型提供服务结构。该命名空间向 .NET 对象提供对 COM+ 服务的访问，COM+ 服务令 .NET Framework 对象更适用于企业应用程序。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.EnterpriseServices.<br />
    Internal</td>
    <td>为 COM+ 服务提供基础结构支持。该命名空间中的类和接口专门用于支持从非托管 COM+ 类对 System.EnterpriseServices 进行调用。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Globalization</td>
    <td><p>System.Globalization 命名空间包含定义区域性相关信息的类，这些信息包括语言、国家/地区、使用的日历、日期、货币和数字的格式模式以及字符串的排序顺序。我们可以使用这些类编写全球化（国际化）应用程序。而像 StringInfo 和 TextInfo 这样的类更是为我们提供了诸如代理项支持和文本元素处理等高级全球化功能。 </p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.IO</td>
    <td>包含允许读写文件和数据流的类型以及提供基本文件和目录支持的类型。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.IO.Compression</td>
    <td>包含提供基本的流压缩和解压缩服务的类。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.IO.IsolatedStorage</td>
    <td>System.IO.IsolatedStorage 命名空间包含允许创建和使用独立存储区的类型。使用这些存储区可以读取和写入不太受信任的代码无法访问的数据，并可以防止公开保存在文件系统其他位置的敏感信息。数据存储在由当前用户和由代码所在的程序集分隔的隔室中。另外，数据可以由域进行隔离。漫游配置文件可以和独立存储一起使用，这样独立存储区将随用户的配置文件一起移动。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Management</td>
    <td><p>提供对大量管理信息和管理事件集合的访问，这些信息和事件是与根据 Windows 管理规范 (WMI) 结构对系统、设备和应用程序设置检测点有关的。应用程序和服务可以使用从 ManagementObjectSearcher 和 ManagementQuery 派生的类，查询感兴趣的管理信息（例如在磁盘上还剩多少可用空间、当前 CPU 利用率是多少、某一应用程序正连接到哪一数据库等等）；或者应用程序和服务可以使用 ManagementEventWatcher 类预订各种管理事件。这些可访问的数据可以来自分布式环境中托管的和非托管的组件。 </p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Management.<br />
    Instrumentation</td>
    <td>提供一些类，这些类是为应用程序设置检测点以用于管理和通过 WMI 向潜在的使用者公开其管理信息和事件所必需的。像 Microsoft Application Center 或 Microsoft Operations Manager 这样的使用者然后可以很容易地管理您的应用程序，并且您的应用程序的监视和配置可用于管理员脚本或其他应用程序，无论是托管的还是非托管的。对于您要公开的类使用 InstrumentationClass 自定义属性，或者使用所提供的 BaseEvent 和 Instance 基类以及 Instrumentation 帮助器类，可以很容易地实现为应用程序设置检测点。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Net</td>
    <td>System.Net 命名空间为当前网络上使用的多种协议提供了简单的编程接口。WebRequest 和 WebResponse 类形成了所谓的可插接式协议的基础，可插接式协议是网络服务的一种实现，它使您能够开发出使用 Internet 资源的应用程序，而不必考虑各种不同协议的具体细节。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Net.Cache</td>
    <td>定义用于为使用 WebRequest 和 HttpWebRequest 类获得的资源定义缓存策略的类型和枚举</td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Net.Configuration</td>
    <td>包含一些类，应用程序使用这些类以编程方式访问和更新 System.Net 命名空间的配置设置。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Net.Mail</td>
    <td><p>System.Net.Mail 命名空间包含用于将电子邮件发送到简单邮件传输协议 (SMTP) 服务器进行传送的类。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"> </p>
    <p xmlns="">MailMessage 类表示邮件的内容。SmtpClient 类将电子邮件传输到您指定用于邮件传送的 SMTP 主机。可以使用 Attachment 类创建邮件附件。</p></td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Net.Mime</td>
    <td><p>System.Net.Mime 命名空间包含用于表示 Multipurpose Internet Mail Exchange (MIME) 标头的类型。这些类型在使用 SmtpClient 类发送电子邮件时与 System.Net.Mail 命名空间中的类型一起用于指定 Content-Type、Content-Disposition 和 Content-transfer-Encoding 标头。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"> </p>
    <p xmlns="">MIME 数据由 Attachment 类表示。 </p></td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Net.<br />
    NetworkInformation</td>
    <td>提供对网络流量数据、网络地址信息和本地计算机的地址更改通知的访问。该命名空间还包含实现 Ping 实用工具的类。可以使用 Ping 和相关的类检查是否可通过网络连接到计算机。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Net.Security</td>
    <td>提供了网络流以便在主机间安全地通信。</td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Net.Sockets</td>
    <td><p>为需要严密控制网络访问的开发人员提供了 Windows Sockets (Winsock) 接口的托管实现。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"> </p>
    <p xmlns="">TcpClient、TcpListener 和 UdpClient 类封装有关创建到 Internet 的 TCP 和 UDP 连接的详细信息。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Reflection</td>
    <td>包含提供加载类型、方法和字段的有组织的视图的类和接口，具有动态创建和调用类型的功能。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Resources</td>
    <td><p>System.Resources 命名空间提供各种类和接口，这些类和接口使开发人员可以创建、存储和管理在应用程序中使用的不同特定于区域性的资源。System.Resources 命名空间最重要的类之一是 ResourceManager 类。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"> </p>
    <p xmlns="">ResourceManager 类使用户可以访问和控制在主程序集或在资源附属程序集中存储的资源。使用 System.Resources.ResourceManager.GetObject 和 System.Resources.ResourceManager.GetString 方法检索特定于区域性的对象和字符串。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Resources.Tools</td>
    <td>包含 StronglyTypedResourceBuilder 类，该类提供对强类型资源的支持。从 .NET Framework 2.0 版开始，此编译时功能通过创建包含一组静态只读 (get) 属性的类封装对资源的访问，从而更容易使用资源。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Runtime</td>
    <td>包含支持不同命名空间（如 <MSHelp:link tabIndex=0 
keywords="N:System">System</MSHelp:link>、Runtime 命名空间和 Security 命名空间）的高级类型。</td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Runtime.<br />
    CompileService</td>
    <td>为编译器编写器提供使用托管代码在元数据中指定属性（这些属性影响公共语言运行库的运行时行为）的功能。此命名空间仅供编译器编写器使用。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.Hosting</td>
    <td>包含用于应用程序域中的应用程序激活的高级类型。</td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Runtime.<br />
    InteropService</td>
    <td>提供各种各样支持 COM interop 及平台调用服务的成员。
    <p xmlns="">其中最重要的属性有 DllImportAttribute（可以用来定义用于访问非托管 API 的平台调用方法）和 MarshalAsAttribute（可以用来指定如何在托管内存与非托管内存之间封送数据）。 </p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td height="250">System.Runtime.Remoting</td>
    <td><p>提供允许开发人员创建和配置分布式应用程序的类和接口。其中一些更重要的类是 RemotingConfiguration 类、RemotingServices 类和 ObjRef 类。 </p>
      <p xmlns="">RemotingConfiguration 类包含用于与配置设置衔接的静态方法。RemotingConfiguration.Configure 方法允许开发人员通过使用 XML 格式化配置文件来配置远程处理基础结构。RemotingConfiguration 类还包含若干在客户端和服务器端注册驻留在服务器上的客户端激活对象和服务器端激活对象的方法。</p>
      <p xmlns="">RemotingServices 类提供若干帮助使用和发布远程对象的方法。System.Runtime.Remoting.RemotingServices.Marshal 方法提供在 ObjRef 类的实例中存储激活远程对象并与之通信所需的所有相关信息供以后序列化和传输到远程位置使用的功能。System.Runtime.Remoting.RemotingServices.Unmarshal 方法反转此过程，为远程对象创建可由应用程序使用的代理，不考虑任何远程处理分支。</p>
      <p xmlns="">ObjRef 类保存激活远程对象并与之通信所需的所有相关信息。该类是通过信道传输到远程位置的对象的序列化表示形式，在信道中它被取消封送（请参见 Unmarshal）并可用于创建远程对象的本地代理</p>      
      <p>&nbsp;</p>
    <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.Remoting.<br />
    Activation</td>
    <td>提供支持远程对象的服务器和客户端激活的类与对象。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.Remoting.<br />
    Channels</td>
    <td><p>System.Runtime.Remoting.Channels 命名空间包含支持并处理信道和信道接收器的类，这些信道和信道接收器在客户端调用远程对象上的方法时用作传输媒体。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"> </p>
      <p 
xmlns="">信道是跨越远程处理边界（无论是在应用程序域、进程还是计算机之间）在应用程序之间传递消息的对象。信道可以在终结点侦听入站消息，向其他终结点发送出站消息，或者进行这两种操作。这使您可以插入范围广泛的协议（即使公共语言运行库不在该信道的另一端）。</p>
    <p 
xmlns="">信道在发送消息之前或接收消息之后沿信道接收器对象链发送每个对象。此接收器链包含基本信道功能所需的接收器（如传输或堆栈生成器接收器），但您可以自定义信道接收器链以使用消息或流执行特殊任务。每个链中的每个接收器接收该对象；执行特定操作，然后将其继续传递给链中的下一个接收器。没有规定必须将消息接收器收到的对象原样传递给下一个接收器，尽管通常是这样的。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.Remoting.<br />
    Channels.Http</td>
    <td>&nbsp;</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.Remoting.<br />
    Channels.Ipc</td>
    <td>定义用于远程处理的通信信道，该信道使用 Windows 操作系统的进程间通信 (IPC) 系统。由于不使用网络通信，IPC 信道比 HTTP 和 TCP 信道快得多，但它只能用在同一物理计算机上的应用程序域之间进行通信。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Runtime.Remoting.<br />
      Channels.Tcp</td>
    <td>&nbsp;</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.Remoting.<br />
      Contexts</td>
    <td>System.Runtime.Remoting.Contexts 命名空间包含一些定义所有对象所驻留的上下文的对象。上下文是一个有序的属性序列，它为它所包含的对象定义环境。上下文是在激活过程中为对象创建的，这些对象被配置以要求某些自动服务，如同步、事务、实时 (JIT) 激活、安全等等。多个对象可以存在于一个上下文中。
    <p>每当创建了新对象时，.NET Framework 都会为该对象找到一个兼容的上下文或为其创建一个新的上下文。对象被放置到上下文中之后，将一直留在该处。可以绑定到上下文的类被称为上下文绑定类。当从其他上下文访问时，这些上下文绑定类是使用代理直接引用的。从一个上下文中的对象到另一个上下文中的对象的调用将经过上下文代理，并受到由组合上下文属性所实现的策略的影响。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.Remoting.<br />
      Messaging</td>
    <td>包含用于创建和传输消息的类。远程处理结构使用消息与远程对象进行通信。消息用于传输远程方法调用、激活远程对象和传达信息。消息对象携带一组命名属性，包括操作标识符、代表信息和参数等。System.Runtime.Remoting.Messaging 命名空间的一些最重要的类是 AsyncResult 类、RemotingSurrogateSelector 类和 ReturnMessage 类。
      <p>AsyncResult 类存储和返回异步方法调用的结果。AsyncResult 实例包含 return 值、调用状态、用于该调用的委托以及其他有关该异步方法调用的信息。</p>
      <p>RemotingSurrogateSelector 类可用于控制扩展 MarshalByRefObject 的对象的序列化。RemotingSurrogateSelector 选择用在这种对象的序列化和反序列化中的代理项。代理项是可以控制对象的序列化或反序列化的对象。</p>
    <p>ReturnMessage 类保存远程方法调用后返回的信息。ReturnMessage 保存从该远程方法调用产生的 return 值和所有 out 或 ref 参数。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.Remoting.<br />
    Metadata</td>
    <td>System.Runtime.Remoting.Metadata 命名空间包含类和属性，这些类和属性可用于自定义对象和字段的 SOAP 的生成和处理。该命名空间的类可用于指示 SOAPAction 标头字段、类型输出、XML 元素名称和方法 XML 命名空间 URI。在 SOAP 生成期间，该信息由 SOAP 序列化程序使用；而在 Web 服务描述语言 (WSDL) 生成期间，该信息由 Soapsuds 工具 (Soapsuds.exe) 使用。由该命名空间中的属性指定的信息可在生成的 SOAP 的接收端使用，以自定义远程方法调用和对象的处理。System.Runtime.Remoting.Metadata 命名空间的最重要的类之一是 SoapAttribute 类。SoapAttribute 类是非功能性的，并且只能用作所有元数据属性的基类。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.Remoting.<br />
    Metadata.W3cXsd2001</td>
    <td>System.Runtime.Remoting.Metadata.W3cXsd2001 命名空间包含万维网联合会 (W3C) 于 2001 年定义的 XML 架构定义 (XSD)。W3C 的“XML Schema Part 2: Datatypes”（XML 架构第 2 部分：数据类型）规范指定了各种数据类型的格式和行为。此命名空间包含符合 W3C 规范的数据类型的包装类。所有日期和时间类型都符合 ISO 标准规范。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.Remoting.<br />
    MetadataServices</td>
    <td>包含由 Soapsuds 工具 (Soapsuds.exe) 命令行工具和用户代码使用的类，这些类用于在元数据和远程处理基础结构的 XML 架构之间进行相互转换。此命名空间的一些最重要的类是 SdlChannelSink 类和 MetaData 类。
      <p>SdlChannelSink 类由远程处理结构用于在服务器端生成 Web 服务描述语言 (WSDL)。</p>
    <p>MetaData 类提供 Soapsuds 工具 (Soapsuds.exe) 命令行工具的功能，可用来通过编程方式获得同样的结果。MetaData 类的方法可用于创建描述在源代码中公开的服务的 XML 架构，并可用于从 XML 架构创建 C# 代码。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.Remoting.<br />
    Proxies</td>
    <td>System.Runtime.Remoting.Proxies 命名空间包含控制和提供代理功能的类。代理是本地对象，它是远程对象的映像。代理使客户端能够跨越远程处理边界访问对象。
    <p>System.Runtime.Remoting.Proxies 命名空间的最重要的类之一是 RealProxy 类，它为所有远程处理代理提供基本功能，并可用于创建自定义代理。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.Remoting.<br />
    Services</td>
    <td>包含向 .NET Framework 提供功能的服务类。该命名空间的最重要的类之一是 TrackingServices 类。
    <p>TrackingServices 类使用可插接式处理程序提供跟踪服务，这些可插接式处理程序能够检测何时封送和取消封送对象。可以通过实现 ITrackingHandler 接口创建可插接式处理程序。有关更多信息，请参见 Marshal 类。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.<br />
    Serialization</td>
    <td>包含可用于将对象序列化和反序列化的类。序列化是将对象或对象图形转换为线性字节序列，以存储或传输到另一个位置的过程。反序列化是接受存储的信息并利用它重新创建对象的过程。
      <p>通过 ISerializable 接口，类可以执行其自己的序列化行为。System.Runtime.Serialization.Formatters 命名空间中的类控制封装在序列化对象中的多种数据类型的实际格式。</p>
    <p>可以在 System.Runtime.Serialization.Formatters 命名空间中找到将对象序列化为特定格式或从特定格式反序列化对象的格式化程序。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.<br />
    Serialization.Formatters</td>
    <td>提供序列化格式化程序所使用的常见枚举、接口和类。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.<br />
      Serialization.Formatters.<br />
      Binary</td>
    <td>包含 BinaryFormatter 类，该类可用于以二进制格式将对象序列化和反序列化。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.<br />
      Serialization.Formatters.<br />
      Soap</td>
    <td>包含 SoapFormatter 类，该类可用于以 SOAP 格式将对象序列化和反序列化。生成使用此命名空间中的类型的应用程序时，必须引用 System.Runtime.Serialization.Formatters.Soap.dll 程序集。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Runtime.Versioning</td>
    <td><p>System.Runtime.Versioning 命名空间包含的高级类型支持对多个 .NET Framework 实现进行版本控制。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"> </p>
    <p xmlns="">此命名空间中的类型仅供 .NET Framework 使用，而不用于用户应用程序。 </p></td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Security</td>
    <td>提供公共语言运行库安全系统的基础结构，包括权限的基类。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Security.<br />
    AccessControl</td>
    <td>提供的编程元素用来控制对可保护对象的访问，并审核针对这些对象执行的与安全有关的操作。</td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Security.<br />
    Authentication</td>
    <td>提供一组描述连接安全性的枚举。</td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Security.<br />
    Cryptography</td>
    <td>提供加密服务，包括安全的数据编码和解码，以及许多其他操作，例如散列法、随机数字生成和消息身份验证。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Security.<br />
    Cryptography.Pkcs</td>
    <td>提供了公钥加密标准 (PKCS) 的编程元素，包括用于对数据签名的方法、用于交换密钥的方法、用于请求证书的方法、用于公钥加密和解密的方法，以及用于其他安全性功能的方法。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Security.<br />
      Cryptography.<br />
      X509Certificates</td>
    <td>包含 Authenticode X.509 v.3 证书的公共语言运行库实现。此证书被使用唯一且正确标识证书持有者的私钥签名。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Security.<br />
    Cryptography.Xml</td>
    <td>包含支持创建和验证 XML 数字签名的类。此命名空间中的类可实现万维网联合会建议“XML-Signature Syntax and Processing”（在 http://www.w3.org/TR/xmldsig-core/ 有说明）。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Security.<br />
    Permissions</td>
    <td>根据策略定义控制对操作和资源访问的类。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.ServiceProcess</td>
    <td>System.ServiceProcess 命名空间提供用于实现、安装和控制 Windows 服务应用程序的类。服务是长期运行的可执行文件，其运行没有用户界面。实现服务包括从 ServiceBase 类继承，也包括定义在传入开始、停止、暂停和继续命令时所处理的特定行为以及定义在系统关闭时所执行的自定义行为和操作。
      <p>服务是使用安装实用工具（例如 InstallUtil.exe）安装的。System.ServiceProcess 命名空间提供安装类，该类将服务信息写入注册表。ServiceProcessInstaller 类提供一个包含类，该类安装安装中所有服务所共有的组件。对于每个服务，您创建 ServiceInstaller 类的实例以安装服务特定的功能。</p>
    <p>ServiceController 类使您可以连接到现有的服务并对其进行操作或获取有关它的信息。该类通常用于管理功能，使您可以对服务启动、停止、暂停、继续或执行自定义命令。ServiceBase 类定义当命令发生时服务所执行的处理，而 ServiceController 是使您可以对服务调用这些命令的代理。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.ServiceProcess.<br />
    Design</td>
    <td>包含可用于扩展对 Windows 服务应用程序的设计时支持的类。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Text</td>
    <td>包含表示 ASCII、Unicode、UTF-7 和 UTF-8 字符编码的类；用于将字符块转换为字节块和将字节块转换为字符块的抽象基类；以及操作和格式化 <MSHelp:link tabIndex=0 keywords="T:System.String">String</MSHelp:link> 对象而不创建 String 的中间实例的 Helper 类。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Text.<br />
    RegularExpression</td>
    <td>包含一些类，这些类提供对 .NET Framework 正则表达式引擎的访问。该命名空间提供正则表达式功能，可以从运行在 Microsoft .NET Framework 内的任何平台或语言中使用该功能。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Threading</td>
    <td>提供一些使得可以进行多线程编程的类和接口。除同步线程活动和访问数据的类（Mutex、Monitor、Interlocked、AutoResetEvent 等）外，此命名空间还包含一个 ThreadPool 类（它允许用户使用系统提供的线程池）和一个 Timer 类（它在线程池线程上执行回调方法）。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Timers</td>
    <td>System.Timers 命名空间提供 Timer 组件，它使您可以指定的间隔引发事件。
      <p>Timer 组件是基于服务器的计时器，它使您能够指定在应用程序中引发 Elapsed 事件的周期性间隔。然后可以操控此事件以提供定期处理。例如，假设您有一台关键性服务器，必须每周 7 天、每天 24 小时都保持运行。可以创建一个使用 Timer 的服务，以定期检查服务器并确保系统开启并在运行。如果系统不响应，则该服务可以尝试重新启动服务器或通知管理员。</p>
    <p>基于服务器的 Timer 是为在多线程环境中用于辅助线程而设计的。服务器计时器可以在线程间移动来处理引发的 Elapsed 事件，这样就可以比 Windows 计时器更精确地按时引发事件。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Transactions</td>
    <td>包含的类可以编写自己的事务应用程序和资源管理器。具体地说，可以创建和参与（与一个或多个参与者）本地或分布式事务。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web</td>
    <td>提供使得可以进行浏览器与服务器通信的类和接口。此命名空间包括 HttpRequest 类（用于提供有关当前 HTTP 请求的广泛信息）、HttpResponse 类（用于管理对客户端的 HTTP 输出）以及 HttpServerUtility 类（用于提供对服务器端实用工具与进程的访问）。System.Web 还包括用于 Cookie 操作、文件传输、异常信息和输出缓存控制的类。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.Caching</td>
    <td>提供用于缓存服务器上常用数据的类。
    <p>此命名空间包括 Cache 类，该类是一个字典，您可以在其中存储任意数据对象，如哈希表和数据集。它还为这些对象提供了失效功能，并为您提供了添加和移除这些对象的方法。您还可以添加依赖于其他文件或缓存项的对象，并在从 Cache 对象中移除对象时执行回调以通知应用程序。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.Compilation</td>
    <td>包含用于生成和编译 ASP.NET 生成环境中的自定义文件类型的类。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Web.Configuration</td>
    <td>包含用于设置 ASP.NET 配置的类。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"></CONTENT></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.Handlers</td>
    <td>包含的 HTTP 处理程序类用于处理对 Web 服务器发出的请求。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.Hosting</td>
    <td>提供在 Microsoft Internet 信息服务 (IIS) 之外的托管应用程序中承载 ASP.NET 应用程序的功能。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.Management</td>
    <td>包含的类和接口用于管理和监视 Web 应用程序的运行状况。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Web.Mobile</td>
    <td>包含生成 ASP.NET 移动 Web 应用程序所需的核心功能，包括身份验证和错误处理。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.Profile</td>
    <td>用于在 Web 服务器应用程序中实现 ASP.NET 用户配置文件。
      <p>ASP.NET 配置文件用于在数据源（如数据库）中存储和检索用户设置。配置文件信息和属性值是使用配置文件提供程序管理的，可以使用 SqlProfileProvider 类存储在 Microsoft SQL Server 数据库中，也可以使用 ProfileProvider 抽象类的实现存储在自定义数据源中。</p>
      <p>ASP.NET 配置文件是使用 profile 配置节配置的。</p>
    <p>在启动启用了用户配置文件的应用程序时，ASP.NET 会创建一个类型为 ProfileCommon 的新类，该类从 ProfileBase 类继承。强类型访问器被添加到 profile 配置节中为每个属性定义的 ProfileCommon 类中。ProfileCommon 类的一个实例被设置为当前 HttpContext 对象的 Profile 属性的值。可以创建一个自定义配置文件实现，该实现从 ProfileBase 抽象类继承并为 profile 配置元素中未指定的用户配置文件定义相应的属性。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.<br />
    RegularExpression</td>
    <td>提供用于分析 ASP.NET 文件的正则表达式。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.Security</td>
    <td>包含用于在 Web 服务器应用程序中实现 ASP.NET 安全性的类。
      <p>Membership 类由 ASP.NET 应用程序用来验证用户凭据并管理用户设置（如密码和电子邮件地址）。使用 Roles 类可以根据指定给 Web 应用程序的角色的用户组对应用程序的授权进行管理。 </p>
      <p>Membership 类和 Roles 类都使用提供程序，即访问应用程序的数据存储以检索成员资格和角色信息的类。成员资格和角色信息可以使用 SqlMembershipProvider 和 SqlRoleProvider 类存储在 Microsoft SQL Server 数据库中；可以使用 ActiveDirectoryMembershipProvider 和 AuthorizationStoreRoleProvider 类存储在 Active Directory 中，还可以使用 MembershipProvider 和 RoleProvider 类的实现存储在自定义数据源中。</p>
      <p>使用 membership 元素（ASP.NET 设置架构）可以配置 ASP.NET 成员资格。访问使用成员资格的应用程序时，ASP.NET 创建 Membership 类的一个实例，该实例可用于查询成员资格信息。MembershipUser 类的提供程序特定的实现包含有关用户访问页的信息。可以为应用程序创建 MembershipUser 类的自定义实现。</p>
      <p>使用 roleManager 元素（ASP.NET 设置架构）可以配置 ASP.NET 角色。ASP.NET 创建 Roles 类的一个实例，该实例包含有关当前用户的角色成员资格的信息。 </p>
    <p>ASP.NET 提供与 Membership 类和 Roles 类交互的服务器控件。Login、CreateUserWizard 和 ChangePassword 控件使用 Membership 类来简化具有身份验证的 Web 应用程序的创建，而 LoginView 控件使用角色特定的模板为特定用户组自定义网页。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>Sysetm.Web.Services</td>
    <td>System.Web.Services 命名空间由使您可以用 ASP.NET 和 XML Web services 客户端来创建 XML Web services 的类组成。XML Web services 是提供了使用标准协议（如 HTTP、XML、XSD、SOAP 和 WSDL）在松耦合环境中交换消息的能力的应用程序。XML Web services 使得可以在不同环境中的公司内部以及在这样的公司之间生成模块化应用程序，从而使这些应用程序可以与多种多样的实现、平台和设备进行交互。这些应用程序的基于 SOAP 的 XML 消息可以具有定义完善的部分（结构化和类型化的部分）或者定义比较松散的部分（使用任意 XML）。消息可以随时间发展而不破坏协议的能力对于作为未来的 Web 构造块的 XML Web services 的灵活性和可靠性来说是非常重要的。
    <p>若要开始用 ASP.NET 创建 XML Web services，请查看 WebService 类，XML Web services 可以从此类派生以访问 ASP.NET 内部和 WebMethodAttribute 类，该 WebMethodAttribute 类必须放置在您想通过 Web 以编程方式公开的任何方法上。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.Services.<br />
    Configuration</td>
    <td>由用于配置使用 ASP.NET 创建的 XML Web services 的运行方式的类组成。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.Services.<br />
    Description</td>
    <td>System.Web.Services.Description 命名空间由使得您可以通过使用 Web 服务描述语言 (WSDL) 来公开描述 XML Web services 的类组成。此命名空间中的每个类都与 WSDL 规范中的某个特定元素相对应，并且类的层次结构与有效的 WSDL 文档的 XML 结构相对应。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.SessionState</td>
    <td><p>System.Web.SessionState 命名空间提供可将特定于某个单个客户端的数据存储在服务器上的一个 Web 应用程序中的类和接口。会话状态数据用于向客户端提供与该应用程序保持持久连接的样式。状态信息可以存储在本地进程内存中，或者，对于网络场配置，也可以使用 ASP.NET 状态服务或 Microsoft SQL Server 数据库将其存储在进程之外。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"> </p>
    <p xmlns="">会话状态可以与不支持 Cookie 的客户端一起使用。ASP.NET 可以配置为对客户端和服务器之间传输的 URL 字符串中的会话 ID 进行编码。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.UI</td>
    <td>System.Web.UI 命名空间提供的类和接口使您得以创建将作为用户界面元素出现在您的 Web 应用程序中的 ASP.NET 服务器控件和页。
    <p>此命名空间包括 Control 类，该类为所有服务器控件（不论是 HTML 服务器控件、Web 服务器控件还是用户控件）提供了一组通用功能。它还包括 Page 类，每次对包含在 Web 应用程序中的 .aspx 文件发出请求时，都会自动生成该类。从这两种类都可以继承。还提供了一些类，为服务器控件提供了数据绑定功能、保存给定控件或页的视图状态的能力，以及对可编程控件和文本控件的分析功能。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.UI.Adapters</td>
    <td>包含控件适配器和页适配器的基类，可使用这些适配器重写页和控件的生命周期状态，以针对新的标记标准或特定浏览器修改它们的默认标记或行为。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Web.UI.Design</td>
    <td>包含的类可用于扩展对 Web 窗体页和 Web 服务器控件的设计时支持。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.UI.Design.<br />
    MobileControls</td>
    <td>包含的类为 System.Web.UI.MobileControls 命名空间中的类提供设计时支持。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.UI.Design.<br />
    MobileControls.Converters</td>
    <td>包含的类为移动控件中的数据类型转换器提供设计时支持。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.UI.Design.<br />
    WebControls</td>
    <td>包含可用于扩展对 Web 服务器控件的设计时支持的类。</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.UI.Design.<br />
    WebControls.WebParts</td>
    <td>包含的类为从 System.Web.UI.WebControls.WebParts 命名空间中的类派生的控件提供设计时支持。</td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Web.UI.<br />
    MobileControls</td>
    <td>包含一组 ASP.NET 服务器控件，这些控件可以针对不同的移动设备呈现您的应用程序。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.UI.<br />
    MobileControls.Adapters</td>
    <td>包含可用于重写移动控件生命周期的各阶段的类，以便针对新的标记标准或特定的浏览器和移动设备修改其默认 HTML、CHTML 或 WML 标记或行为。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.UI.WebControls</td>
    <td>包含一些类，可使用这些类在网页上创建 Web 服务器控件。Web 服务器控件运行在服务器上并且包括按钮和文本框等窗体控件。它们还包括具有特殊用途的控件（如日历）。由于 Web 服务器控件运行在服务器上，因此可以以编程方式控制这些元素。尽管 Web 服务器控件呈现为 HTML，但它们的对象模型不一定反映 HTML 语法。 <CONTENT xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Web.Util</td>
    <td>System.Web.Util 命名空间是类的集合，这些类可以使回调方法在某一事务的范围内运行，并允许将工作发送给多个单独的线程。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Windows.Forms</td>
    <td>System.Windows.Forms 命名空间包含用于创建基于 Windows 的应用程序的类，以充分利用 Microsoft Windows 操作系统中提供的丰富的用户界面功能。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Xml</td>
    <td><p>为处理 XML 提供基于标准的支持。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"> </p>
      <p xmlns="">支持的标准包括：</p>
      <ul xmlns="">
        <li>
          <p>XML 1.0 - http://www.w3.org/TR/1998/REC-xml-19980210 - 包括 DTD 支持。 </p>
        </li>
        <li>
          <p>XML 命名空间 - http://www.w3.org/TR/REC-xml-names/ - 流级别和 DOM。 </p>
        </li>
        <li>
          <p>XSD 架构 - http://www.w3.org/2001/XMLSchema </p>
        </li>
        <li>
          <p>XPath 表达式 - http://www.w3.org/TR/xpath </p>
        </li>
        <li>
          <p>XSLT 转换 - http://www.w3.org/TR/xslt </p>
        </li>
        <li>
          <p>DOM 级别 1 核心 - http://www.w3.org/TR/REC-DOM-Level-1/ </p>
        </li>
        <li>
          <p>DOM 级别 2 核心 - http://www.w3.org/TR/DOM-Level-2/ </p>
        </li>
    </ul></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Xml.Schema</td>
    <td>为 XML 架构定义语言 (XSD) 架构提供基于标准的支持</td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Xml.Serialization</td>
    <td>包含用于将对象序列化为 XML 格式文档或流的类。
      <p>命名空间中的中心类是 XmlSerializer 类。要使用该类，请使用 XmlSerializer 构造函数创建类的实例（使用要序列化的对象的类型）。创建 XmlSerializer 之后，请创建要序列化的对象的实例。还必须创建对象（例如 Stream、TextWriter 或 XmlWriter），以将文件写入文档或流。然后，可以调用 Serialize 方法将对象转换为 XML 文档。</p>
      <p>要从 XML 文档反序列化对象，请创建读取文档或流的合适的对象（仍然为 Stream、TextWriter 或 XmlWriter）。在将结果对象转换为原始对象（已序列化）的类型时调用 Deserialize 方法。</p>
    <p>要进一步控制序列化，System.Xml.Serialization 命名空间需包含几个可应用到类的成员的 Attribute 类。例如，如果类包含将被序列化为 XML 元素的成员，则可将 XmlElementAttribute 属性应用到该成员。应用属性时，可以使用 ElementName 属性指定详细信息，例如实际的 XML 元素名称。有关所有属性的完整列表，请参见 XmlSerializer 类概述。</p></td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Xml.Serialization.<br />
    Advanced</td>
    <td>包含一些类，这些类允许您自定义用 Web 服务描述语言 (WSDL) 文档生成的代码。 <CONTENT 
xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"></td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Xml.Serialization.<br />
    Configuration</td>
    <td>包含的类用于读取应用程序配置文件中的 &lt;system.xml.serialization&gt; 元素节下所含的值。 </td>
    <td>2.0</td>
  </tr>
  <tr>
    <td>System.Xml.XPath</td>
    <td>包含的类用于定义光标模型，该模型可将 XML 信息项作为 XQuery 1.0 和 XPath 2.0 数据模型的实例进行导航和编辑。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Xml.Xsl</td>
    <td>为“可扩展样式表转换”(XSLT) 转换提供支持。它支持“W3C XSL 转换 (XSLT) 1.0 版推荐”(www.w3.org/TR/xslt)。 </td>
    <td>1.1</td>
  </tr>
  <tr>
    <td>System.Xml.Xsl.Runtime</td>
    <td>支持 .NET Framework 基础结构，不应直接从代码中使用</td>
    <td>2.0</td>
  </tr>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

</body>
</html>
