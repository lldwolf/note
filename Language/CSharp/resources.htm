<!DOCTYPE html>

<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
	<title>资源文件</title>
	<script type="text/javascript" src="../../mylib/js/css.js"></script>
</head>

<body>
	<p id="title">使用资源 </p>

	<h1>资源文件</h1>
	<h2>创建资源文件</h2>
	<p>.NET Framework 中包含一个称为 ResEditor 的示例应用程序，它可帮助您创建和编辑资源文件。ResEditor 应用程序使您可以创建二进制资源文件 (.resources) 以及 XML 资源文件 (.resX)。</p>
	<h4 class="dtH2">
	生成 ResEditor</h3>
	<p>ResEditor 以源代码的形式随 .NET Framework SDK 一起提供。您必须先使用提供的批处理文件生成 ResEditor，然后才能使用它。</p>
	<p class="labelproc">
		<b>生成 ResEditor 应用程序</b>
		<ol type="1">
			<li>
			启动 Windows，然后单击“开始”按钮，指向“所有程序”，然后指向“Visual Studio .NET 2003”，再指向“Visual Studio .NET 工具”，最后选择“Visual Studio .NET 命令提示”，打开 Visual Studio .NET 命令提示。 
  <li>在命令提示处，将目录更改为 <b>SDK\v1.1\Samples\Tutorials\resourcesandlocalization\reseditor</b> 文件夹，如下所示：
      <p><b>cd \Program Files\Microsoft Visual Studio .NET 2003\SDK\v1.1\Samples\Tutorials\resourcesandlocalization\reseditor</b> </p>
	  <li>在命令提示处，键入 <b>Build</b>，然后按 ENTER 键以生成该应用程序。
      <p><b>ResEditor</b> 已生成，并且可执行文件被放在 \Program Files\Microsoft Visual Studio .NET\FrameworkSDK\Samples\Tutorials\resourcesandlocalization\reseditor 文件夹中。 </p>
	  </li>
		</ol>
		<h4 class="dtH2">
		创建资源文件</h3>
	<p>生成 ResEditor 后，您可以使用它创建资源文件。</p>
	<p class="labelproc">
		<b>使用 ResEditor 创建资源文件</b>
		<ol type="1">
			<li>在 Windows 资源管理器中，浏览到包含 <b>ResEditor</b>
			可执行文件的目录。 
  <li>双击 <b>ResEditor</b>
			图标启动该应用程序。 
  <li>
			从“添加”下拉菜单中选择要添加的资源类型。 
  <li>
			在“添加”文本框中键入资源的名称，然后单击“添加”按钮，将资源项添加到文件中。 
  <li>在主窗格中，单击资源名称旁边的单元格以指定一个值。
      <ul type="disc">
		  <li>
		  对于“字符串”资源，在该框中键入相应的字符串。 
        <li>对于“图像”和其他类型的资源，请浏览到相应的文件。 </li>
	  </ul>
	  <li>
			对于要添加到文件中的每个资源，重复步骤 3、4、5。 
  <li>在“文件”菜单中，单击“另存为”以保存文件。您可以将文件保存为 .resources 文件，也可以保存为 .resX 文件。 </li>
		</ol>
		<h4 class="dtH2">
		编辑现有资源文件</h3>
	<p>您还可以使用 ResEditor 编辑现有资源文件。使用 ResEditor 既可编辑 .resources 文件也可编辑 .ResX 文件。</p>
	<p class="labelproc">
		<b>使用 ResEditor 编辑现有资源文件</b>
		<ol type="1">
			<li>在 Windows 资源管理器中，浏览到包含 <b>ResEditor</b>
			可执行文件的目录。 
  <li>双击 <b>ResEditor</b>
			图标启动该应用程序。 
  <li>
			在“文件”菜单上单击“打开”。 
  <li>在“打开资源文件”对话框中浏览到相应的资源文件。
      <p>资源文件打开，并且它包含的资源显示在主窗格中。 </p>
	  <li>如果要更改任何资源的值，请单击资源名称旁边的单元格并指定正确的值。
      <ul type="disc">
		  <li>
		  对于“字符串”资源，在该框中键入相应的字符串。 
        <li>对于“图像”和其他类型的资源，请浏览到相应的文件。 </li>
	  </ul>
		  <li>如果要重命名资源，请执行以下操作：
      <ol type="a">
		  <li>
		  通过单击要重命名的资源，突出显示它。 
        <li>
		  在“重命名”文本框中键入新名称。 
        <li>单击“重命名”按钮，应用新名称。 </li>
	  </ol>
			  <li>
			如果要删除资源，请通过单击该资源将其突出显示，然后从“资源”菜单中选择“删除”。 
  <li>编辑完资源文件后，选择“文件”，然后选择“另存为”以保存文件。 </li>
		</ol>
		<h2>从资源文件中检索</h2>
		<h3>将资源文件嵌入应用程序</h3>
		<ol type="1">
			<li>从“项目”菜单中，选择“添加现有项”。
      <p>“添加现有项”对话框打开。 </p>
				<li>
			浏览到要添加到项目中的资源文件。它可能是 .resources 文件，也可能是 .resX 文件。选择适当的文件。 
  <li>在“生成”菜单中，选择“生成解决方案”将资源文件嵌入到您的已编译项目中。 </li>
		</ol>
		<h3>创建ResourceManager类</h3>
		<pre class="code" data-type="csharp">ResourceManager myManager = new ResourceManager(&quot;CTest.report_sys_img&quot;, Assembly.GetExecutingAssembly());</pre>
		<p>
			第一个参数为嵌入文件的基名称，嵌入的资源文件的基名称是嵌入了资源文件的命名空间的名称加上不带任何扩展名的文件名。例如，myApplication 命名空间中名为 Resource1.resources 
的文件的基名称是 myApplication.Resource1。
	</p>
	<p>第二个参数也可以这样获取</p>
	<pre class="code" data-type="csharp">System.Reflection.Assembly myAssembly;
myAssembly = this.GetType().Assembly;
ResourceManager myManager = new ResourceManager(&quot;CTest.report_sys_img&quot;, myAssembly);</pre>
	<h3>检索资源</h3>
	<p>调用 ResourceManager.GetString 方法或 ResourceManager.GetObject 方法以检索资源。 </p>
	<ul type="disc">
		<li>若要检索“字符串”资源，请调用 <b>GetString</b>
		方法。 
  <li>若要检索其他类型的资源，请调用 <b>GetObject</b> 方法。通过 <b>GetObject</b> 方法检索到的资源必须显式转换成对应的类型。</li>
	</ul>
	<pre class="code" data-type="csharp">System.Drawing.Image myImage = (System.Drawing.Image)myManager.GetObject(&quot;photo_liulindong&quot;); </pre>
	<h2>将资源文件编译为资源程序集 </h2>
	<ol type="1">
		<li>
		使用“空项目”模板新建一个应用程序。 
  <li>
		从“项目”菜单中选择“添加现有项”，将资源文件添加到您的项目中。 
  <li>
		在解决方案资源管理器中，右击您的项目并从快捷菜单中选择“属性”，打开该项目的属性页。 
  <li>在“输出类型”下拉菜单中，将项目的输出类型更改为“类库”。
      <p>这将使您的程序集编译成 .dll 文件。 </p>
	  <li>从“生成”菜单中选择“生成 &lt;您的项目&gt;”，其中 &lt;您的项目&gt; 是项目的名称。
      <p>这样，您的资源就编译到了程序集中。 </p>
	  </li>
	</ol>
	<h2>使用资源文件时的常见错误</h2>
	<h3>未能在给定的程序集中找到任何适合于指定的区域性(或非特定区域性)的资源</h3>
	<p>请作如下检查：</p>
	<ol>
		<li>检查.resources或.resX文件的属性是否为“嵌入的资源”。</li>
		<li>检查项目的 默认命名空间 + &quot;.资源根名称&quot;是否为ResourceManager类构造函数中的第一个参数<br>
			其中资源的根名称。例如，名为“MyResource.en-US.resources”的资源文件的根名称为“MyResource”。
		</li>
	</ol>
	<h1>嵌入式资源</h1>
	<h2>图像 </h2>
	<p>即在将现有文件（如图形文件）加入项目后，将文件属性中的“生成操作”属性设为“嵌入的资源”，引用资源图片的方式如下：</p>
	<pre class="code" data-type="csharp">System.Reflection.Assembly thisExe;
thisExe = System.Reflection.Assembly.GetExecutingAssembly();
System.IO.Stream file = 
    thisExe.GetManifestResourceStream(&quot;AssemblyName.ImageFile.jpg&quot;);
this.pictureBox1.Image = Image.FromStream(file);</pre>
	<p>本示例需要： </p>
	<ul type="disc">
		<li>一个含有名为 pictureBox1 的 <strong>PictureBox</strong> 控件的 Windows 窗体。 </li>
	</ul>
	<p>在项目中添加图像文件，然后在解决方案资源管理器中将“生成操作”属性设置为“嵌入的资源”。</p>
	<p>将 "AssemblyName.ImageFile.jpg"   替换成程序集中已知的资源名称。可以使用程序集对象的 <strong>GetManifestResourceNames</strong> 方法查找该资源的名称。示例代码如下：</p>
	<pre class="code" data-type="csharp">System.Reflection.Assembly thisExe; 
thisExe = System.Reflection.Assembly.GetExecutingAssembly();
string [] resources = thisExe.GetManifestResourceNames();
string list = &quot;&quot;;

// Build the string of resources.
foreach (string resource in resources)
   list += resource + &quot;\r\n&quot;;</pre>
	<h2>文本文件</h2>
	<p>在程序中新建一文件文件TextFile1.txt作为嵌入的资源，读取的方式如下所示：</p>
	<pre class="code" data-type="csharp">Assembly a = Assembly.GetExecutingAssembly();
string r_name = a.GetName().Name + &quot;.TextFile1.txt&quot;;
Stream s1 = a.GetManifestResourceStream(r_name);
StreamReader sr = new StreamReader(s1);
string s = sr.ReadLine();
MessageBox.Show(s);</pre>
	<p>&nbsp;</p>
	<p>&nbsp;</p>

</body>
</html>
