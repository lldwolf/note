<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
	<script type="text/javascript" src="../../mylib/js/css.js"></script>
	<title>Web Service</title>
</head>
<body>
	<p id="title">Web Service </p>

	<h1>基本操作</h1>
	<h2>创建 Web Service Client</h2>
	<p>Visual Studio 在2008之后，推荐使用 WCF Client 来连接 Web Service，所以如果直接创建 Web Service Reference，需要使用以下步骤：</p>
	<ol>
		<li>Add Service Reference</li>
		<li>Advanced</li>
		<li>Add Web Reference</li>
	</ol>
	<h2>动态切换URL</h2>
	<p>修改生成的 *ServiceImplService 的 Url 属性即可</p>
	<h2>动态获取 Web Service 的信息</h2>
		<pre class="code" data-type="csharp" data-collapsed="true">using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Web.Services.Description;

namespace WebServiceTest
{
	public static class WebServiceHelper
	{
		#region InvokeWebService

		private static string GetWsClassName(string wsUrl)
		{
			string[] parts = wsUrl.Split('/');
			string[] pps = parts[parts.Length - 1].Split('.');

			return pps[0].Replace(&quot;?wsdl&quot;, &quot;&quot;);
		}

		public static List&lt;MethodInfo&gt; GetMethodList(string url)
		{
			string classname = WebServiceHelper.GetWsClassName(url);
			string @namespace = classname; // &quot;EnterpriseServerBase.WebService.DynamicWebCalling&quot;;

			try
			{
				//获取WSDL
				WebClient wc = new WebClient();

				if (!(url.ToLower().EndsWith(&quot;?wsdl&quot;)))
					url = url + &quot;?wsdl&quot;;

				Stream stream = wc.OpenRead(url);
				ServiceDescription sd = ServiceDescription.Read(stream);
				ServiceDescriptionImporter sdi = new ServiceDescriptionImporter();
				sdi.AddServiceDescription(sd, &quot;&quot;, &quot;&quot;);
				CodeNamespace cn = new CodeNamespace(@namespace);

				//生成客户端代理类代码
				CodeCompileUnit ccu = new CodeCompileUnit();
				ccu.Namespaces.Add(cn);
				sdi.Import(cn, ccu);
				//CSharpCodeProvider csc = new CSharpCodeProvider();
				CodeDomProvider icc = CodeDomProvider.CreateProvider(&quot;CSharp&quot;);

				//设定编译参数
				CompilerParameters cplist = new CompilerParameters();
				cplist.GenerateExecutable = false;
				cplist.GenerateInMemory = true;
				cplist.ReferencedAssemblies.Add(&quot;System.dll&quot;);
				cplist.ReferencedAssemblies.Add(&quot;System.XML.dll&quot;);
				cplist.ReferencedAssemblies.Add(&quot;System.Web.Services.dll&quot;);
				cplist.ReferencedAssemblies.Add(&quot;System.Data.dll&quot;);

				//编译代理类
				CompilerResults cr = icc.CompileAssemblyFromDom(cplist, ccu);
				if (true == cr.Errors.HasErrors)
				{
					System.Text.StringBuilder sb = new System.Text.StringBuilder();
					foreach (System.CodeDom.Compiler.CompilerError ce in cr.Errors)
					{
						sb.Append(ce.ToString());
						sb.Append(System.Environment.NewLine);
					}
					throw new Exception(sb.ToString());
				}

				//生成代理实例，并调用方法
				System.Reflection.Assembly assembly = cr.CompiledAssembly;
				Type t = assembly.GetType(@namespace + &quot;.&quot; + classname, true, true);

				List&lt;MethodInfo&gt; methods = new List&lt;MethodInfo&gt;();
				methods.AddRange(t.GetMethods(BindingFlags.Instance | BindingFlags.Public));

				//remove Begin &amp; End methods
				List&lt;MethodInfo&gt; beginMethods = methods.Where(method =&gt; method.Name.StartsWith(&quot;Begin&quot;)).ToList();
				List&lt;MethodInfo&gt; endMethods = methods.Where(method =&gt; method.Name.StartsWith(&quot;End&quot;)).ToList();
				foreach (MethodInfo method in beginMethods)
				{
					if (methods.Exists(m =&gt; m.Name.Equals(method.Name.Substring(5, method.Name.Length - 5), StringComparison.CurrentCultureIgnoreCase)))
						methods.Remove(method);
				}

				foreach (MethodInfo method in endMethods)
				{
					if (methods.Exists(m =&gt; m.Name.Equals(method.Name.Substring(3, method.Name.Length - 3), StringComparison.CurrentCultureIgnoreCase)))
						methods.Remove(method);
				}

				List&lt;MethodInfo&gt; inheritedMethods = new List&lt;MethodInfo&gt;(t.BaseType.GetMethods(BindingFlags.Instance | BindingFlags.Public));
				foreach (MethodInfo method in inheritedMethods)
				{
					methods.Remove(methods.Single(m =&gt; m.Name == method.Name));
				}

				methods = (from m in methods orderby m.Name select m).ToList();

				return methods;

			}
			catch (Exception ex)
			{
				throw new Exception(ex.InnerException.Message, new Exception(ex.InnerException.StackTrace));
			}
		}

		#endregion
	}
}</pre>
	<h2>动态调用 Web Service 方法</h2>
		<pre class="code" data-type="csharp" data-collapsed="true">using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Web.Services.Description;

public static class WebServiceHelper
{
	public static object InvokeWebService(string url, string classname, string methodname, object[] args)
	{
		string @namespace = "EnterpriseServerBase.WebService.DynamicWebCalling";
		if ((classname == null) || (classname == ""))
		{
			classname = WebServiceHelper.GetWsClassName(url);
		}

		try
		{
			//获取WSDL
			WebClient wc = new WebClient();

			if (!(url.ToLower().EndsWith("?wsdl")))
				url = url + "?wsdl";

			Stream stream = wc.OpenRead(url);
			ServiceDescription sd = ServiceDescription.Read(stream);
			ServiceDescriptionImporter sdi = new ServiceDescriptionImporter();
			sdi.AddServiceDescription(sd, "", "");
			CodeNamespace cn = new CodeNamespace(@namespace);

			//生成客户端代理类代码
			CodeCompileUnit ccu = new CodeCompileUnit();
			ccu.Namespaces.Add(cn);
			sdi.Import(cn, ccu);
			//CSharpCodeProvider csc = new CSharpCodeProvider();
			//ICodeCompiler icc = csc.CreateCompiler();
			CodeDomProvider icc = CodeDomProvider.CreateProvider("CSharp");

			//设定编译参数
			CompilerParameters cplist = new CompilerParameters();
			cplist.GenerateExecutable = false;
			cplist.GenerateInMemory = true;
			cplist.ReferencedAssemblies.Add("System.dll");
			cplist.ReferencedAssemblies.Add("System.XML.dll");
			cplist.ReferencedAssemblies.Add("System.Web.Services.dll");
			cplist.ReferencedAssemblies.Add("System.Data.dll");

			//编译代理类
			CompilerResults cr = icc.CompileAssemblyFromDom(cplist, ccu);
			if (true == cr.Errors.HasErrors)
			{
				System.Text.StringBuilder sb = new System.Text.StringBuilder();
				foreach (System.CodeDom.Compiler.CompilerError ce in cr.Errors)
				{
					sb.Append(ce.ToString());
					sb.Append(System.Environment.NewLine);
				}
				throw new Exception(sb.ToString());
			}

			//生成代理实例，并调用方法
			System.Reflection.Assembly assembly = cr.CompiledAssembly;
			Type t = assembly.GetType(@namespace + "." + classname, true, true);
			object obj = Activator.CreateInstance(t);
			System.Reflection.MethodInfo mi = t.GetMethod(methodname);

			return mi.Invoke(obj, args);
		}
		catch (Exception ex)
		{
			throw new Exception(ex.InnerException.Message, new Exception(ex.InnerException.StackTrace));
		}
	}

	private static string GetWsClassName(string wsUrl)
	{
		string[] parts = wsUrl.Split('/');
		string[] pps = parts[parts.Length - 1].Split('.');

		return pps[0].Replace("?wsdl", "");
	}
}</pre>
	<h2>常见错误</h2>
	<p>有时碰到错误 “Possible SOAP version mismatch: Envelope namespace http://schemas.xmlsoap.org/wsdl/ was unexpected. Expecting http://schemas.xmlsoap.org/soap/envelope/.”。这是因为在 Web Service 的URL中加入了 ?wsdl 后缀，去掉即可。</p>
	<h1>WCF Web Service Client</h1>
	<p>创建 client 使用 Add Service Reference 功能即可添加</p>
	<p>使用如下语句动态更改其 URL 地址</p>
	<pre class="code" data-type="csharp">client.Endpoint.Address = new EndpointAddress(url);</pre>
	<h1>Web Client</h1>
	<h2>一段递交WebService请求并获取返回页面的代码</h2>
	<div id="accordion-web-request">
		<p><a href="#">查看代码</a></p>
		<pre class="code" data-type="csharp">string error_uri = &quot;http://www.alltobid.com/chepai/chepaiAgain.htm&quot;;
StreamWriter sw = new StreamWriter(@&quot;c:\chepai.txt&quot;, true, System.Text.Encoding.Default, 200);
sw.WriteLine(&quot;投标号\t投标人\t投标时间\t投标结果&quot;);
int begin_num = Int32.Parse(this.textBox1.Text);
int end_num = Int32.Parse(this.textBox2.Text);
for(int counter = begin_num; counter &lt;= end_num; counter++)
{
	string test_num = counter.ToString();
	int prefix_len = 8 - test_num.Length;
	for(int i = 0; i &lt; prefix_len; i++)
		test_num = '0' + test_num;

	this.lbCounter.Text = test_num;
	this.lbCounter.Update();

	HttpWebRequest req = (HttpWebRequest)WebRequest.Create(&quot;http://www.alltobid.com/chepai/query.asp&quot;);
	req.Timeout = 5 * 1000;
	req.Method = &quot;POST&quot;;
	string postData = &quot;number=&quot; + test_num;
	ASCIIEncoding encoding = new ASCIIEncoding();
	byte[]  byte1 = encoding.GetBytes(postData);
	req.ContentType = &quot;application/x-www-form-urlencoded&quot;;
	req.ContentLength = postData.Length;

	HttpWebResponse res = null;
	try
	{
		Stream newStream = req.GetRequestStream();
		newStream.Write(byte1,0,byte1.Length);
		res = (HttpWebResponse)req.GetResponse();
		if(!res.ResponseUri.ToString().Equals(error_uri))
		{
			Stream res_stream = res.GetResponseStream();
			newStream.Close();
			Encoding encode = System.Text.Encoding.Default;
			StreamReader readStream = new StreamReader( res_stream, encode );
			Char[] read = new Char[256];
			int count = readStream.Read( read, 0, 256 );
			string res_data = &quot;&quot;;
			while (count &gt; 0) 
			{
				String str = new String(read, 0, count);
				res_data = res_data + str.Trim();
				count = readStream.Read(read, 0, 256);
			}
			res.Close();
			readStream.Close();

			//			Tools.displayWarning(res_data);
			int pos1 = res_data.IndexOf(&quot;投标卡号：&quot;);
			int pos2 = res_data.IndexOf(@&quot;&lt;td width=212&gt;&quot;, pos1);
			string bid_code = res_data.Substring(pos2 + 14, 8);
			pos1 = res_data.IndexOf(&quot;投标人：&quot;);
			pos2 = res_data.IndexOf(@&quot;&lt;td&gt;&quot;, pos1);
			int pos3 = res_data.IndexOf(@&quot;&lt;/td&gt;&quot;, pos2);
			string bid_name = res_data.Substring(pos2 + 4, pos3 - pos2 - 4);

			pos1 = res_data.IndexOf(&quot;投标时间：&quot;);
			pos2 = res_data.IndexOf(@&quot;&lt;td&gt;&quot;, pos1);
			pos3 = res_data.IndexOf(@&quot;&lt;/td&gt;&quot;, pos2);
			string bid_time = res_data.Substring(pos2 + 4, pos3 - pos2 - 4);

			pos1 = res_data.IndexOf(&quot;&lt;STRONG&gt;&quot;);
			pos2 = res_data.IndexOf(@&quot;&lt;/P&gt;&quot;, pos1);
			string bid_result = res_data.Substring(pos1 + 8, pos2 - pos1 - 8);
			sw.WriteLine(test_num + &quot;\t&quot; + bid_name + &quot;\t&quot; + bid_time + &quot;\t&quot; + bid_result);
			sw.Flush();
//						break;
			encode = null;
			readStream = null;
			res_data = null;
			res_stream = null;

		}

		newStream = null;
		postData = null;
		req = null;
		res = null;
		GC.Collect();
	}
	catch(WebException)
	{
		req = null;
		GC.Collect();
	}

}
sw.Close();
Tools.displayWarning(&quot;Completed!&quot;);</pre>
	</div>
	<h1>下载文件</h1>
	<pre class="code" data-type="csharp">string remoteUri = "http://big5.cmfu.com/chm/5647.chm";
WebClient myWebClient = new WebClient();
myWebClient.DownloadFile(remoteUri, @"c:\明.chm");</pre>
	<h1>.net发起web请求时保持Session</h1>
	<p>一般使用.NET C#发起一个web请求是用WebClient类，应为使用很简单，但是每调用一次OpenRead就会在服务器启用一个新Session</p>
	<p>使用HttpWebRequest + CookieContainer就可以让多个web请求只有一个session，为HttpWebRequest 指定一个CookieContainer，使用同一个CookieContainer的Request就是一个session。</p>
	<pre class="code" data-type="csharp">CookieContainer cc = new CookieContainer();
for(int i=0;i&lt;100;i++)
{
	HttpWebRequest myReq = (HttpWebRequest)WebRequest.Create(&quot;http://localhost/AspxApp/MainForm.aspx&quot;);
	myReq.CookieContainer = cc;
	HttpWebResponse resp = myReq.GetResponse() as HttpWebResponse;
	Stream s = resp.GetResponseStream();
	StreamReader sr = new StreamReader(s); String text = sr.ReadToEnd();
	sr.Close();
	s.Close();
}</pre>
	<h2>灌水机实例 </h2>
	<p><a href="demo/XCarFlood.zip">示例：灌水机示例</a></p>

</body>
</html>
