<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
<title>Spring - 装配方式</title>
<script type="text/javascript" src="../../mylib/js/css.js"></script>
</head>

<body>
	<p id="title">Spring - 装配方式</p>
	<h1>自动装配</h1>
	<h2>标准实现</h2>	
	<ol>
		<li>
			<p>建立 maven quickapp 项目</p>
		</li>
		<li>
			<p>pom.xml，注意我在此引用了 hamcrest-all 包，否则后面的 unit test 会报错</p>
			<pre class="code" data-type="xml" data-collapsed="false" title="pom.xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;lld&lt;/groupId&gt;
    &lt;artifactId&gt;spring_test&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;name&gt;spring_test&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;

    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;spring.version&gt;4.3.12.RELEASE&lt;/spring.version&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.12&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;
            &lt;artifactId&gt;hamcrest-all&lt;/artifactId&gt;
            &lt;version&gt;1.3&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;finalName&gt;spring_test&lt;/finalName&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.6.2&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;source&gt;1.8&lt;/source&gt;
                    &lt;target&gt;1.8&lt;/target&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;</pre>
		</li>
		<li>
			<p>建立服务接口</p>
			<pre class="code" data-type="java" data-collapsed="false" title="HelloService.java">package lld.spring_test.di.autowire;

public interface HelloService {
    void sayHi(String name);
}
</pre>
		</li>
		<li>
			<p>建立服务实现, 其实 Component 的参数在此可以省略。</p>
			<pre class="code" data-type="java" data-collapsed="false" title="HelloServiceImpl.java">package lld.spring_test.di.autowire;

import org.springframework.stereotype.Component;

@Component("helloService")
public class HelloServiceImpl implements HelloService {

    @Override
    public void sayHi(String name) {
        System.out.println("Hi, " + name);
    }

}
</pre>
		</li>
		<li>
			<p>建立装配类 ComponentScan 会扫描同 package 及子 package 下的类</p>
			<pre class="code" data-type="java" data-collapsed="false" title="AutoAssembleTest.java">package lld.spring_test.di.autowire;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan
public class HelloConfig {

}
</pre>
		</li>
		<li>
			<p>在 unit test 中测试自动装配</p>
			<pre class="code" data-type="java" data-collapsed="false" title="AutoAssembleTest.java">package lld.spring_test.di.autowire;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import lld.spring_test.di.autowire.HelloConfig;
import lld.spring_test.di.autowire.HelloService;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes=HelloConfig.class)
public class AutoAssembleTest {
    @Autowired
    private HelloService helloService;
    
    @Test
    public void testHello() {
        Assert.assertNotNull(helloService);
        helloService.sayHi("Lindong");
    }
    
}
</pre>
		</li>
	</ol>
	<h2>在 xml 中配置自动装配</h2>
	<p>如果不使用上例中的 HelloConfig 装配类，也可以使用 xml 实现自动扫描，XML 配置如下</p>
	<pre class="code" data-type="xml" data-collapsed="false" title="bean-autowire.xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"&gt;
        &lt;context:component-scan base-package="lld.spring_test.di.autowire" /&gt;
&lt;/beans&gt;</pre>
	<h2>其它</h2>
	<p>下表是 Spring 和 Java Dependency Injection 中 annotation 对照表, 通常情况下可互换，Spring 都支持</p>
	<table style="width: 800px">
		<tr>
			<th>Spring</th>
			<th>Java Dependency Injection</th>
		</tr>
		<tr>
			<td>@Component</td>
			<td>@Named</td>
		</tr>
		<tr>
			<td>@Autowired</td>
			<td>@Inject</td>
		</tr>
	</table>
</body>
</html>
