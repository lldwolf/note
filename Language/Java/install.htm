<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
    <title>安装及使用</title>
    <script type="text/javascript" src="../../mylib/js/css.js"></script>
</head>

<body>
    <p id="title">安装及使用</p>
    <h1>下载安装包</h1>
    <p>到<a href="java.sun.com">java.sun.com</a>下载最新的java安装包，我用的是windows安装版，使用的安装目录为d:\java</p>
    <h1>系统变量设置</h1>
    <ul>
        <li>JAVA_HOME：d:\java</li>
        <li>PATH：将d:\java\bin加入path路径，最好放在第一个。如果安装过ORACLE，ORACLE会默认安装java 1.2版本</li>
    </ul>
    <h1>常用命令</h1>
    <p>%JAVA_HOME%\bin目录要放到path路径中，常用的命令有下面几个</p>
    <h2>javac</h2>
    <p>编译命令，格式如下：</p>
    <pre class="code" data-type="sh">javac java文件名</pre>
    <p>例如：</p>
    <pre class="code" data-type="sh">javac Test.java</pre>
    <p>使用javac命令将java文件编译为.class文件。默认生成同名的.class文件，例如，上例即生成Test.class文件</p>
    <p>但实际上我们通常会编译整个目录，并需要引用到大量的第三方类库，这样需使用的命令如下所示</p>
    <pre class="code" data-type="sh"># Linux
find -name "*.java" > sources.txt
javac -classpath jar_path1:jar_path2 @sources.txt
:: Windows
dir /s /B *.java > sources.txt
javac -classpath jar_path1;jar_path2 @sources.txt</pre>
    <h2>java</h2>
    <p>进入程序所在根目录，例如 Test 的 namespace 为 test.my.Test，编译生成的文件位于 c:\projects\bin\test\my\Test.class，则需进入 c:\projects\bin 目录，运行如下命令</p>
    <pre class="code" data-type="sh">java test.my.Test</pre>
    <p>可以在中间加各种参数，如下表所示</p>
    <table style="width:80%">
        <tr>
            <th>参数</th>
            <th>说明</th>
            <th>示例</th>
        </tr>
        <tr>
            <td>classpath</td>
            <td>
                <p>引用的 jar 包，在 Linux 下以冒号(:)分隔，在 Windows 下以分号(;)分隔</p>
                <p>可以支持通配符，但不支持 *.jar 这种写法，而是 ./lib/* 这种写法</p>
            </td>
            <td><pre class="code" data-type="sh">java -classpath .:a.jar:b.jar:./lib/* test.my.Test</pre></td>
        </tr>
        <tr>
            <td>Xms</td>
            <td>初始化内存</td>
            <td><pre class="code" data-type="sh">java -Xms256m</pre></td>
        </tr>
        <tr>
            <td>Xmx</td>
            <td>能使用的最大内存</td>
            <td><pre class="code" data-type="sh">java -Xmx2048m</pre></td>
        </tr>
        <tr>
            <td>D</td>
            <td>自定义参数</td>
            <td>
                <pre class="code" data-type="sh">#运行后 Java 程序可使用 System.getProperty("myparam") 获取到值 1
java -Dmyparam=1</pre>
            </td>
        </tr>
    </table>
    <h2>jar</h2>
    <p>运行 jar 包</p>
    <pre class="code" data-type="sh">java -jar [jar_file]</pre>
    <p>但如果想运行 jar 包中的某一个类，则使用如下语法</p>
    <pre class="code" data-type="sh">java -cp [jar_file] [my.package.Class]</pre>
    <h1>JVM 参数</h1>
    <h2>常用调试参数</h2>
    <ul>
        <li>
            <p>-Djavax.net.debug=all</p>
            <p>打印所有的调试信息</p>
        </li>
    </ul>
    <h2>参数列表</h2>
    <h3>GC 相关</h3>
    <table style="width:95%">
        <tr>
            <th>参数</th>
            <th>Desc.</th>
        </tr>
        <tr>
            <td>-XX:PretenureSizeThreshold=3145728</td>
            <td>表示对象大于3145728（3M）时直接进入老年代分配，这里只能以字节作为单位</td>
        </tr>
        <tr>
            <td>-XX:MaxTenuringThreshold=1</td>
            <td>表示对象年龄大于1，自动进入老年代</td>
        </tr>
        <tr>
            <td>-XX:NewRatio=4</td>
            <td>表示设置年轻代：老年代的大小比值为1：4，这意味着年轻代占整个堆的1/5</td>
        </tr>
        <tr>
            <td>-XX:SurvivorRatio=8</td>
            <td>表示设置2个Survivor区：1个Eden区的大小比值为2:8，这意味着Survivor区占整个年轻代的1/5，这个参数默认为8</td>
        </tr>
        <tr>
            <td>-Xmn20M</td>
            <td>表示设置年轻代的大小为20M</td>
        </tr>
        <tr>
            <td>-XX:+PrintHeapAtGC</td>
            <td>表示可以看到每次GC前后堆内存布局</td>
        </tr>
        <tr>
            <td>-XX:+UseG1GC</td>
            <td>表示让JVM使用G1垃圾收集器</td>
        </tr>
        <tr>
            <td>-XX:+PrintGC</td>
            <td>表示在控制台上打印出GC信息</td>
        </tr>
        <tr>
            <td>-XX:+PrintGCDetails</td>
            <td>表示在控制台上打印出GC具体细节</td>
        </tr>
        <tr>
            <td>-XX:+ParallelRefProcEnabled</td>
            <td></td>
        </tr>
        <tr>
            <td>-XX:ParallelGCThreads=15</td>
            <td></td>
        </tr>
        <tr>
            <td>-XX:ConcGCThreads=4</td>
            <td></td>
        </tr>
        <tr>
            <td>-verbose:gc</td>
            <td></td>
        </tr>
        <tr>
            <td>-XX:+PrintGCTimeStamps</td>
            <td></td>
        </tr>
        <tr>
            <td>-XX:+PrintGCDateStamps</td>
            <td></td>
        </tr>
        <tr>
            <td>-XX:+PrintTenuringDistribution</td>
            <td></td>
        </tr>
        <tr>
            <td>-XX:+UseGCLogFileRotation</td>
            <td></td>
        </tr>
        <tr>
            <td>-XX:NumberOfGCLogFiles=10</td>
            <td></td>
        </tr>
        <tr>
            <td>-XX:GCLogFileSize=32m</td>
            <td></td>
        </tr>
        <tr>
            <td>-Xloggc:/logs/hbase-cdh5/gc-region-server-cfswps11u-phys.log</td>
            <td></td>
        </tr>
    </table>
    <h3>Others</h3>
    <p>（1）-Xms20M</p>
    <p>表示设置堆容量的最小值为20M，必须以M为单位</p>
    <p>（2）-Xmx20M</p>
    <p>表示设置堆容量的最大值为20M，必须以M为单位。将-Xmx和-Xms设置为一样可以避免堆自动扩展。大的项目-Xmx和-Xms一般都要设置到10G、20G甚至还要高</p>
    <p>（3）-verbose:gc</p>
    <p>表示输出虚拟机中GC的详细情况</p>
    <p>（4）-Xss128k</p>
    <p>表示可以设置虚拟机栈的大小为128k</p>
    <p>（5）-Xoss128k</p>
    <p>表示设置本地方法栈的大小为128k。不过HotSpot并不区分虚拟机栈和本地方法栈，因此对于HotSpot来说这个参数是无效的</p>
    <p>（6）-XX:PermSize=10M</p>
    <p>表示JVM初始分配的永久代的容量，必须以M为单位</p>
    <p>（7）-XX:MaxPermSize=10M</p>
    <p>表示JVM允许分配的永久代的最大容量，必须以M为单位，大部分情况下这个参数默认为64M</p>
    <p>（8）-Xnoclassgc</p>
    <p>表示关闭JVM对类的垃圾回收</p>
    <p>（9）-XX:+TraceClassLoading</p>
    <p>表示查看类的加载信息</p>
    <p>（10）-XX:+TraceClassUnLoading</p>
    <p>表示查看类的卸载信息</p>
    <p>（14）-XX:+HeapDumpOnOutOfMemoryError</p>
    <p>表示可以让虚拟机在出现内存溢出异常时Dump出当前的堆内存转储快照</p>
    <p>（20）-XX:CompileThreshold=1000</p>
    <p>表示一个方法被调用1000次之后，会被认为是热点代码，并触发即时编译</p>
    <p>（22）-XX:+PrintTLAB</p>
    <p>表示可以看到TLAB的使用情况</p>
    <p>（23）-XX:+UseSpining</p>
    <p>开启自旋锁</p>
    <p>（24）-XX:PreBlockSpin</p>
    <p>更改自旋锁的自旋次数，使用这个参数必须先开启自旋锁</p>
    <h2>在 Eclipse 中设置 JVM 启动参数</h2>
    <p>Java Application里面选到自己的类，选择Arguments，VM arguments空白部分就可以设置虚拟机参数了。如果点击了Run Configurations没有出现自己的类的话也没关系，双击一下Java Application就好了</p>
    <p><img alt="" src="images/eclipse_jvm_args.png" /></p>
</body>
</html>
