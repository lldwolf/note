<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
    <script type="text/javascript" src="../../mylib/js/css.js"></script>
    <title>Java Note</title>
</head>

<body>
    <p id="title">MyBatis Generator</p>
	<h1>Overview</h1>
	<p>MyBatis Generator 可根据表自动生成 mapper.xml 和 mapper.java 接口</p>
	<h1>使用方法</h1>
	<h2>下载</h2>
	<p>可以使用 maven 下载，在项目 pom.xml 中加入</p>
	<pre class="code" data-type="xml">&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;
    &lt;version&gt;1.3.4&lt;/version&gt;
&lt;/dependency&gt;</pre>
	<h2>生成</h2>
	<h3>generatorConfig.xml</h3>
	<p>这个文件是主配置文件，示例如下：</p>
	<pre class="code" data-type="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;

&lt;generatorConfiguration&gt;
    &lt;context id="poemTables" targetRuntime="MyBatis3"&gt;
        &lt;jdbcConnection driverClass="org.sqlite.JDBC" connectionURL="jdbc:sqlite::resource:poem.db" userId="" password=""&gt;
        &lt;/jdbcConnection&gt;

        &lt;javaTypeResolver&gt;
            &lt;property name="forceBigDecimals" value="true" /&gt;
        &lt;/javaTypeResolver&gt;

        &lt;javaModelGenerator targetPackage="com.poem.lld.model" targetProject="d:/temp/src"&gt;
            &lt;property name="enableSubPackages" value="true" /&gt;
            &lt;property name="trimStrings" value="true" /&gt;
        &lt;/javaModelGenerator&gt;

        &lt;sqlMapGenerator targetPackage="poemMapper.xml" targetProject="d:/temp/src"&gt;
            &lt;property name="enableSubPackages" value="true" /&gt;
        &lt;/sqlMapGenerator&gt;

        &lt;javaClientGenerator type="XMLMAPPER" targetPackage="com.poem.lld.dao" targetProject="d:/temp/src"&gt;
            &lt;property name="enableSubPackages" value="true" /&gt;
        &lt;/javaClientGenerator&gt;

        &lt;table tableName="poem"&gt;&lt;/table&gt;
        &lt;table tableName="author"&gt;&lt;/table&gt;

    &lt;/context&gt;
&lt;/generatorConfiguration&gt;</pre>
	<p>里面包含了如下信息：</p>
	<ul>
		<li>jdbcConnection: JDBC 连接信息</li>
		<li>javaTypeResolver: 表示将用 Java 的 java.math.BigDecimal 类型来表示数据库的 Numeric 和 Decimal 类型，否则会使用 Integner</li>
		<li>javaModelGenerator: 配置 Model 类，这里加了 trimStrings 表示从数据返回的值都需要作 trim 处理</li>
		<li>sqlMapGenerator: 配置 mapper.xml</li>
		<li>javaClientGenerator: 配置 DAO 接口</li>
		<li>table: 要对付哪个表，可写多个</li>
	</ul>
	<p>注意，我这里把所有的文件都生成到 d:\temp\src 目录下了，这个目录需要提前建好，MyBatis 不会自动创建，更过分的是，居然显示生成成功而没有任何结果。</p>
	<h3>GeneratorSqlmap.java</h3>
	<p>这里我使用程序来生成，也可以使用命令行来生成。</p>
	<p>这个类用于根据上面的配置文件生成 mapper.xml, model 类, DAO 接口</p>
	<pre class="code" data-type="java">import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.apache.ibatis.io.Resources;
import org.mybatis.generator.api.MyBatisGenerator;
import org.mybatis.generator.config.Configuration;
import org.mybatis.generator.config.xml.ConfigurationParser;
import org.mybatis.generator.internal.DefaultShellCallback;

public class GeneratorSqlmap {

    public void generator() throws Exception {
        List<String> warnings = new ArrayList<String>();
        boolean overwrite = true;
        File configFile = Resources.getResourceAsFile("generatorConfig.xml");
        ConfigurationParser cp = new ConfigurationParser(warnings);
        Configuration config = cp.parseConfiguration(configFile);
        DefaultShellCallback callback = new DefaultShellCallback(overwrite);
        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
        myBatisGenerator.generate(null);
    }

    public static void main(String[] args) throws Exception {
        try {
            GeneratorSqlmap generatorSqlmap = new GeneratorSqlmap();
            generatorSqlmap.generator();
            System.out.println("Done");
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

</pre>
	<h1>结果文件分析</h1>
	<p>分析下结果文件可以发现一些我们没前没讲的技巧或特性</p>
	<h2>Model</h2>
	<p>对于每张表，MyBatis Generator 会生成两个 Model 类，一个是基本类，这个中规中矩，没啥可说的，就是为每列生成一个 Java 属性。另一个类是 Example 类，这个是用来控制 SQL 语句特性的，例如排序，查找等等</p>
	<h2>DAO 接口</h2>
	<p>我们可以看到，除了基本的增删改查，它还很贴心地为我们加了好多方法，例如按条件查，统计等，还有神奇的 *Selective 方法。例如 insertSelective，它生成的 SQL 是按需生成的，为空的字段将不出现在结果 insert 语句中</p>
	<h2>mapper.xml</h2>
	<p>这里我们可以看到一些技巧，例如：</p>
	<h3>sql 标签</h3>
	<p>如果一段 SQL 会被很多语句使用，可以将其提取出来，其它语句引用它就好了，如下所示：</p>
	<pre class="code" data-type="xml">
  &lt;sql id="Base_Column_List"&gt;
    id, title, author, content, album, type, url, public_degree, dynasty, author_id
  &lt;/sql&gt;
  &lt;select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap"&gt;
    select 
    &lt;include refid="Base_Column_List" /&gt;
    from poem
    where id = #{id,jdbcType=INTEGER}
  &lt;/select&gt;
</pre>
	<h3>判断传入参数是否为空</h3>
	<p>使用了 _parameter 引用传入参数</p>
	<pre class="code" data-type="xml">&lt;if test="_parameter != null"&gt;
  &lt;include refid="Example_Where_Clause" /&gt;
&lt;/if&gt;
</pre>
	<h3>trim 标签</h3>
	<p>用来处理拼接 SQL 时的多余前缀或后缀。例如，在拼接 insert 字段列表时，最后一个逗号将会被  suffixOverrides 设置给去掉。类似的还有 prefixOverrides，可也以用竖线来表示去掉多个可选值，例如，prefixOverrdes="AND|OR" 表示去掉第一个出现的 AND 或 OR。</p>
	<pre class="code" data-type="xml">insert into poem
&lt;trim prefix="(" suffix=")" suffixOverrides=","&gt;
  &lt;if test="id != null"&gt;
    id,
  &lt;/if&gt;
  &lt;if test="title != null"&gt;
    title,
  &lt;/if&gt;
&lt;/trim&gt;</pre>
	<h3>choose 标签</h3>
	<pre class="code" data-type="xml">  &lt;choose&gt;
    &lt;when test="criterion.noValue"&gt;
      and ${criterion.condition}
    &lt;/when&gt;
    &lt;when test="criterion.singleValue"&gt;
      and ${criterion.condition} #{criterion.value}
    &lt;/when&gt;
    &lt;when test="criterion.betweenValue"&gt;
      and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
    &lt;/when&gt;
    &lt;when test="criterion.listValue"&gt;
      and ${criterion.condition}
      &lt;foreach close=")" collection="criterion.value" item="listItem" open="(" separator=","&gt;
        #{listItem}
      &lt;/foreach&gt;
    &lt;/when&gt;
  &lt;/choose&gt;</pre>
  <h1>演示</h1>
  <p>下例演示了如何使用自动生成的代码进行复杂查询，下例查询在唐代指定作者的作品中查询带“花”和“月”的作品，在宋代指定作者的作品中查询带“风”和“雪”的作品</p>
  <pre class="code" data-type="java">@Test
public void testQueryPoem() throws IOException {
    PoemExample filter = new PoemExample();
    filter.setDistinct(true);
    filter.setOrderByClause("author");
    Criteria criteria = filter.createCriteria();
    criteria.andDynastyEqualTo("唐代");
    criteria.andAuthorIn(Arrays.asList(new String[] { "李白", "杜甫", "李商隐", "杜牧" }));
    criteria.andContentLike("%月%");
    criteria.andContentLike("%花%");
    Criteria criteria2 = filter.or();
    criteria2.andDynastyEqualTo("宋代");
    criteria2.andAuthorIn(Arrays.asList(new String[] { "苏轼", "辛弃疾", "柳永" }));
    criteria2.andContentLike("%风%");
    criteria2.andContentLike("%雪%");
    List&lt;Poem&gt; poemList = poemMapper.selectByExample(filter);
    Assert.assertNotNull(poemList);

    System.out.println("result count: " + poemList.size());
    if (poemList.size() &gt; 0) {
        poemList.forEach(poem -&gt; {
            System.out.println(poem);
        });
    }
}</pre>
	<p>注意到对于 like 条件我们需要手工加 % 通配符，这倒不是因为 MyBatis 偷懒，而是为了更加通用，例如，如果你想模糊匹配 "%风%花%" 就很难单纯使用配置文件来自动生成。</p>
</html>
