<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
<title>Spring - Bean 作用域</title>
<script type="text/javascript" src="../../mylib/js/css.js"></script>
</head>

<body>
	<p id="title">Spring - Bean 作用域</p>
    <h1>Overview</h1>
    <p>默认情况下，Spring 使用单例模式创建 Bean，即在整个 ApplicationContext 的生命周期内只为 Bean 创建一个实例。但如果使用的类是易变的 (mutable)，这时就不太合适。因为对象的状态会被污染从而导致意想不到的结果。</p>
    <p>Spring 支持如下几种作用域</p>
    <ul>
        <li>单例 (ConfigurableBeanFactory.SCOPE_SINGLETON)，这是默认作用域</li>
        <li>原型 (ConfigurableBeanFactory.SCOPE_PROTOTYPE)，每次注入或通过上下文获取均创建一个新的实例</li>
        <li>请求 (WebApplicationContext.SCOPE_REQUEST)，在 Web 应用中，为每个请求创建一个 bean 实例</li>
        <li>会话 (WebApplicationContext#SCOPE_SESSION), 在 Web 应用中，为每个 session 创建一个 bean 实例</li>
    </ul>
    <h1>示例</h1>
    <ol>
        <li>
            <p>创建 maven quickapp project</p>
        </li>
        <li>
            <p>在 pom.xml 中添加引用</p>
        </li>
        <li>
            <p>pom.xml，注意我在此引用了 hamcrest-all 包，否则后面的 unit test 会报错</p>
            <pre class="code" data-type="xml" data-collapsed="false" title="pom.xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;lld&lt;/groupId&gt;
    &lt;artifactId&gt;spring_test&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
    &lt;name&gt;spring_test&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;spring.version&gt;4.3.12.RELEASE&lt;/spring.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.12&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;
            &lt;artifactId&gt;hamcrest-all&lt;/artifactId&gt;
            &lt;version&gt;1.3&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;finalName&gt;spring_test&lt;/finalName&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.6.2&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;source&gt;1.8&lt;/source&gt;
                    &lt;target&gt;1.8&lt;/target&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre>
        </li>
        <li>
            <p>定义测试 Bean 接口</p>
            <pre class="code" data-type="java" data-collapsed="false" title="IdService.java">package lld.spring_test.scope;

public interface IdService {
    int getId();
}
</pre>
            <p>定义其实现，加入一个延时保证每次创建的 id 值不相同</p>
            <pre class="code" data-type="java" data-collapsed="false" title="IdServiceImpl.java">package lld.spring_test.scope;

import java.time.Clock;
import java.util.Random;

import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component
@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)
public class IdServiceImpl implements IdService {

    private int id;

    public IdServiceImpl() {
        Random random = new Random(Clock.systemUTC().millis());
        id = random.nextInt(1000000);

        try {
            Thread.sleep(10);
        } catch (InterruptedException e) {

        }
    }

    @Override
    public int getId() {
        return id;
    }

}
</pre>
        </li>
        <li>
            <p>创建 Unit Test </p>
            <pre class="code" data-type="java" data-collapsed="false" title="ScopeTest.java">package lld.spring_test.di.scope;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import lld.spring_test.scope.IdConfig;
import lld.spring_test.scope.IdService;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes=IdConfig.class)
public class ScopeTest {
    @Autowired
    private IdService helloService1;
    @Autowired
    private IdService helloService2;
    
    @Test
    public void testId() throws InterruptedException {
        Assert.assertNotNull(helloService1);
        System.out.println(helloService1.getId());
        Thread.sleep(100);
        System.out.println(helloService2.getId());

    }
    
}
</pre>
        </li>
        <li>
            <p>这时我们看到两次输出的值是相同的，如果把 @Scope 参数换为 ConfigurableBeanFactory.SCOPE_PROTOTYPE 即可看到两次值不同，即表示创建了两次 bean 实例。</p>
        </li>
    </ol>
</body>
</html>
