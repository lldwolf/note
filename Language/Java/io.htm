<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
	<title>I/O</title>
	<script type="text/javascript" src="../../mylib/js/css.js"></script>
</head>

<body>
	<p id="title">I/O</p>
	<h1>路径操作</h1>
	<h2>获取当前路径</h2>
	<h3>取当前项目路径</h3>
	<pre class="code" data-type="java">System.getProperty("user.dir")</pre>
	<h3>取当前执行路径</h3>
	<pre class="code" data-type="java">public class Test {
	public static void main(String[] args) throws Exception {
		System.out.println(Test.class.getResource("").getPath());
	}
}</pre>
	<h2>判断文件/文件夹是否存在</h2>
	<pre class="code" data-type="java">if ((new File(path).exists())) {}</pre>
	<h2>根据路径获取文件列表</h2>
	<h2>根据 CLASSPATH 加载文件</h2>
	<pre class="code" data-type="java">public class Test {
	public static void main(String[] args) throws Exception {
		Properties props = new Properties();
		props.load(Test.class.getClassLoader().getResourceAsStream("test.properties"));
	}
}</pre>
    <h1>文件夹操作</h1>
    <h2>创建文件夹</h2>
    <pre class="code" data-type="java">
public static void makeDirectory(String dirPath) {
    if (!(new File(dirPath).exists())) {
        (new File(dirPath)).mkdirs();
    }
}
</pre>
    <p>mkdirs 表示如果上级目录不存在则同时创建上级目录，如果是 mkdir 则只会在上级目录存在的情况下创建目录</p>
	<h1>文本文件I/O</h1>
	<h2>读取</h2>
	<h3>FileReader</h3>
	<p>使用FileReader，示例代码如下所示：</p>
	<pre class="code" data-type="java">import java.io.FileReader;

public class TextReader
{
	public static void main(String[] args) throws Exception
	{
		FileReader fr = new FileReader("C:/1.txt");
		int ch = fr.read();
		while(ch != -1)
		{
			System.out.print((char)ch);
			ch = fr.read();
		}
	}
}</pre>
	<h3>BufferedReader</h3>
	<pre class="code" data-type="java">public class ReadFileIntoAStringLineByLine {

	public static void main(String[] args) throws IOException {

		BufferedReader bufferedReader = new BufferedReader(new FileReader("readme.txt"));

		StringBuffer stringBuffer = new StringBuffer();
		String line = null;

		while ((line = bufferedReader.readLine()) != null) {

			stringBuffer.append(line).append("\n");
		}

		System.out.println(stringBuffer);
	}
}</pre>
	<h2>写入</h2>
	<p>使用FileWriter，示例代码如下所示：</p>
	<pre class="code" data-type="java">import java.io.FileWriter;

public class TextWriter
{
	public static void main(String[] args) throws Exception
	{
		FileWriter fw = new FileWriter("C:/1.txt");
		fw.write("结庐在人境\r\n");
		fw.write("而无车马喧\r\n");
		fw.write("all are shit!");
		fw.flush();
		fw.close();
	}
}</pre>
    <h1>二进制文件</h1>
    <p>二进制文件读写示例</p>
    <pre class="code" data-type="java" data-collapsed="false" title="文本文件读取示例代码">
package lld.test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class FileTest4Binary {
	private static final String FILE_NAME = "C:\\Temp\\test.png";
	private static final String OUTPUT_FILE_NAME = "C:\\Temp\\test_copy.png";

	public static void main(String... aArgs) throws IOException {
		FileTest4Binary binary = new FileTest4Binary();
		byte[] bytes = binary.readSmallBinaryFile(FILE_NAME);
		printBytes(bytes);
		log("Small - size of file read in:" + bytes.length);
		binary.writeSmallBinaryFile(bytes, OUTPUT_FILE_NAME);
	}

	public byte[] readSmallBinaryFile(String aFileName) throws IOException {
		Path path = Paths.get(aFileName);
		return Files.readAllBytes(path);
	}

	public void writeSmallBinaryFile(byte[] aBytes, String aFileName) throws IOException {
		Path path = Paths.get(aFileName);
		Files.write(path, aBytes); // creates, overwrites
	}

	private static void log(Object msg) {
		System.out.println(msg);
	}
	
	private static void printBytes(byte[] bytes) {
		if (bytes == null) {
			log("bytes is empty.");
			return;
		}
		
		int maxChar = 16 * 2;
		int counter = 0;
		StringBuilder buffer = new StringBuilder();
		
		for (byte b : bytes) {
			buffer.append(String.format("%02X ", b));
			counter++;
			
			if (counter % maxChar == 0) {
				buffer.append("\n");
			}
		}
		
		log(buffer.toString());
	}

}
</pre>
    <h1>文件操作</h1>
    <h2>复制文件及目录的示例代码</h2>
    <pre class="code" data-type="java">
package test;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FileUtil {
    private static Logger logger = LoggerFactory.getLogger(FileUtil.class);

    public static void main(String[] args) {
        makeDirectory("c:/temp/1/2/3");
        System.out.println("success");
    }

    public static void copyDirectory(String srcDirPath, String destDirPath) throws IOException {
        String[] srcDirs = srcDirPath.split(";");
        for (String srcDirStr : srcDirs) {
            copyDirectory(new File(srcDirStr), new File(destDirPath));
        }
    }

    public static void copyDirectory(File srcDir, File destDir) throws IOException {
        logger.info("Copy file in " + srcDir + " to " + destDir);

        File[] files = srcDir.listFiles(new FilenameFilter() {

            @Override
            public boolean accept(File dir, String name) {
                return name.contains(".");
            }

        });

        for (int i = 0; i < files.length; i++) {
            copyFile(files[i], new File(destDir.getAbsoluteFile() + "/" + files[i].getName()));
        }
    }

    public static void copyFile(File sourceFile, File targetFile) throws IOException {
        Files.copy(sourceFile.toPath(), targetFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
    }

    public static void makeDirectory(String dirPath) {
        if (!(new File(dirPath).exists())) {
            (new File(dirPath)).mkdirs();
        }
    }
}
</pre>
    <h1>Appache Commons IO</h1>
    <h2>简介</h2>
    <p>官方网址 <a href="http://commons.apache.org/proper/commons-io/">http://commons.apache.org/proper/commons-io/</a>.</p>
    <p>常用功能示例</p>
    <table style="width:95%">
        <tr>
            <th>功能</th>
            <th>示例代码</th>
        </tr>
        <tr>
            <td>取文件的扩展名</td>
            <td>
                <pre class="code" data-type="java">import org.apache.commons.io.FilenameUtils;
String ext = FilenameUtils.getExtension(fileName);  // returns txt for *.txt file
</pre>
            </td>
        </tr>
        <tr>
            <td>读文本文件</td>
            <td><pre class="code" data-type="java">public static void replacePropertiesContent() throws Exception {
	String str = FileUtils.readFileToString(new File("C:/1.txt"));
	System.out.println(str);
}</pre></td>
        </tr>
    </table>
</body>
</html>
