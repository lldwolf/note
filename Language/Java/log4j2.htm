<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
    <script type="text/javascript" src="../../mylib/js/css.js"></script>
    <title>log4j2</title>
</head>

<body>
    <p id="title">log4j2</p>
    <h1>第一个程序</h1>
    <p>相比较 log4j，log4j2 使用上有些许变化，以下是我使用 log4j2 的示例</p>
    <ol>
        <li>
            <p>新建 Maven 项目，在 pom.xml 中引用 log4j2 如下</p>
            <pre class="code" data-type="xml">
&lt;dependency&gt;
    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
    &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
    &lt;version&gt;1.7.25&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;
    &lt;version&gt;2.9.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;
    &lt;version&gt;2.9.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;
    &lt;version&gt;2.9.1&lt;/version&gt;
&lt;/dependency&gt;
</pre>
        </li>
        <li>
            <p>log4j2 支持包括 json 在内的各种各样的配置文件，如果使用 properties 文件，在 java source 根目录下建立 log4j2.properties 如下所示：</p>
            <pre class="code" data-type="properties">status = error
dest = err
name = PropertiesConfig
 
property.filename = /tmp/my.log
 
filter.threshold.type = ThresholdFilter
filter.threshold.level = debug
 
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d %p %C [%t] %m%n
 
appender.rolling.type = RollingFile
appender.rolling.name = RollingFile
appender.rolling.fileName = ${filename}
appender.rolling.filePattern = /tmp/my-%d{MM-dd-yy-HH-mm-ss}-%i.log.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d %p %C [%t] %m%n
appender.rolling.policies.type = Policies
# 如果你想以系统运行时间作为 log 文件分割方式则加上注掉的配置
#appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
#appender.rolling.policies.time.interval = 2
#appender.rolling.policies.time.modulate = true
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
appender.rolling.policies.size.size=2MB
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.max = 5
 
# 对于 my.sample namespace 下的类则应用如下配置
logger.rolling.name = my.sample
logger.rolling.level = debug
logger.rolling.additivity = false
logger.rolling.appenderRef.rolling.ref = RollingFile
logger.rolling.appenderRef.stdout.ref = STDOUT

# 默认使用的配置
rootLogger.level = info
rootLogger.appenderRef.stdout.ref = STDOUT
rootLogger.appenderRef.rolling.ref = RollingFile
</pre>
        </li>
        <li>
            <p>调用方式如下所示：</p>
            <pre class="code" data-type="java">
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

private static final Logger logger = LogManager.getLogger(Test.class);
	
public static void main(String[] args) throws IOException {
	logger.info("Start");
	logger.debug("debug");
}</pre>
        </li>
    </ol>
    <h1>XML 配置文件示例</h1>
    <pre class="code" data-type="xml">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- 在运行时，可以动态修改配置文件，不用重启服务，在固定时长更新一次配置文件。monitorInterval设置更新配置文件时长， 单位为seconds ， min senconds &gt;= 5secondes --&gt;
&lt;Configuration  monitorInterval="30" &gt;

    &lt;Properties&gt;
        &lt;Property name="log.path"&gt;E:\log4j2_log\&lt;/Property&gt;
    &lt;/Properties&gt;

    &lt;Appenders&gt;
        &lt;!-- 控制台appdener--&gt;
        &lt;Console name="STDOUT" target="SYSTEM_OUT"&gt;
            &lt;PatternLayout    charset="UTF-8" pattern="%m%n"/&gt;
        &lt;/Console&gt;

        &lt;!-- File appdener--&gt;
        &lt;File name="MyFile" fileName="logs/app.log" bufferedIO="true" &gt;
            &lt;PatternLayout&gt;
                &lt;Charset&gt;UTF-8&lt;/Charset&gt;
                &lt;Pattern&gt;%d %p %c{1.} [%t] %m%n&lt;/Pattern&gt;
            &lt;/PatternLayout&gt;
        &lt;/File&gt;

        &lt;!-- RandomAccessFile 性能高于 File--&gt;
        &lt;RandomAccessFile name="MyFile" fileName="logs/RandomAccessFile.log"  &gt;
            &lt;PatternLayout&gt;
                &lt;Charset&gt;UTF-8&lt;/Charset&gt;
                &lt;Pattern&gt;%d %p %c{1.} [%t] %m%n&lt;/Pattern&gt;
            &lt;/PatternLayout&gt;
        &lt;/RandomAccessFile&gt;

        &lt;!--&lt;RollingFile&gt;&lt;/RollingFile&gt;--&gt;

        &lt;!--
            注意：一般情况下都使用RollingRandomAccessFile 。
            RollingRandomAccessFile可以按照日志名称的格式进行定期备份，拥有一定的备份策略。
            1.是否压缩备份日志：直接在filePattern属性的文件名称最后加对应的压缩后缀，如gzip压缩用 .gz
        --&gt;
        &lt;RollingRandomAccessFile name="RollingRandomAccessFile" fileName="logs/RollingRandomAccessFile.log"
                                 filePattern="logs/RollingRandomAccessFile-%d{yyyy-MM-dd}-%i.log.gz"&gt;
            &lt;PatternLayout&gt;
                &lt;Pattern&gt;%d %p %c{1.} [%t] %m%n&lt;/Pattern&gt;
            &lt;/PatternLayout&gt;
            &lt;!-- 备份策略:满足其中一个就可以启动备份--&gt;
            &lt;Policies&gt;
                &lt;!-- interval 多久执行一次备份，单位为 RollingRandomAccessFile的属性filePattern中%d{yyyy-MM-dd}的最小时间单位，此处是天--&gt;
                &lt;TimeBasedTriggeringPolicy  interval="1"  modulate="true"/&gt;
                &lt;SizeBasedTriggeringPolicy size="250 MB"/&gt;
            &lt;/Policies&gt;
            &lt;!-- 默认的备份策略：max="7"表示最多只保留7份日志，fileIndex属性是在拥有多个备份日志的时候，命令是以递增的数为文件名，max值时值大的文件是最新的内容，min值时值大的是最久的内容--&gt;
            &lt;DefaultRolloverStrategy  fileIndex="max" max="7"&gt;
                &lt;!-- 删除指定目录下60天之前的日志--&gt;
                &lt;Delete basePath="${log.path}" maxDepth="2"&gt;
                    &lt;IfFileName glob="*/app-*.log.gz" /&gt;
                    &lt;IfLastModified age="60d" /&gt;
                &lt;/Delete&gt;
            &lt;/DefaultRolloverStrategy&gt;
        &lt;/RollingRandomAccessFile&gt;

        &lt;!-- 异步 appder  ,使用的是ArrayBlocingQueue --&gt;
        &lt;Async name="Async"&gt;
            &lt;AppenderRef ref="MyFile"/&gt;
        &lt;/Async&gt;

    &lt;/Appenders&gt;

    &lt;Loggers&gt;
        &lt;Root level="error"&gt;
            &lt;AppenderRef ref="MyFile"/&gt;
        &lt;/Root&gt;

        &lt;!-- logger
        additivity属性：如果设置为true（默认值）则log会被打印两次，这里的logger和root--&gt;
        &lt;Logger name="com.foo.bar.MyApp" level="info" additivity="true"&gt;
            &lt;appender-ref ref="RandomAccessFile"/&gt;
        &lt;/Logger&gt;

        &lt;!-- 异步 logger：使用了disruptor类库，代替Jdk中的queue，性能提高很多
        includeLocation属性是指layout中的  %C or $class, %F or %file, %l or %location, %L or %line, %M or %method，异步logger默认为false，如果设置为true，会影响logger的性能
        --&gt;
        &lt;AsyncLogger name="com.foo.test" level="info" additivity="false" includeLocation="false"&gt;
            &lt;appender-ref ref="log4j2test"/&gt;
            &lt;appender-ref ref="STDOUT"/&gt;
        &lt;/AsyncLogger&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;
</pre>
    <h1>Binding with SLF4J</h1>
    <ol>
        <li>
            <p>log配置：Log4j2 + Slf4j</p>
            <pre class="code" data-type="xml">
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;
    &lt;version&gt;2.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;
    &lt;version&gt;2.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt; &lt;!-- ??:??Slf4j??Log4j2 --&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;
    &lt;version&gt;2.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt; &lt;!-- ??:??commons logging??Log4j2 --&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-jcl&lt;/artifactId&gt;
    &lt;version&gt;2.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
    &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
    &lt;version&gt;1.7.10&lt;/version&gt;
&lt;/dependency&gt;
</pre>
        </li>
        <li>
            <p>代码中使用</p>
            <pre class="code" data-type="java">
@RunWith(SpringJUnit4ClassRunner.class)  //使用Spring Junit4进行测试  
@ContextConfiguration ({"classpath:spring/applicationContext.xml"}) //加载配置文件
public abstract class BaseJunit4Test {
}

import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
mport com.xjj.test.BaseJunit4Test; 
public class Log4j2Test extends BaseJunit4Test {
 static public Logger logger = LoggerFactory.getLogger(Log4j2Test.class); 

   @Test
   public void logTC1(){
      logger.error("error");
      logger.debug("debug");
      logger.info("info");
      logger.trace("trace");
      logger.warn("warn");
      logger.error("error {}", "param");
 }
}
</pre>
        </li>
    </ol>
    <h1>常用 Log Appender 示例</h1>
    <h2>RollingFileAppender</h2>
    <h2>RollingRandomAccessFileAppender</h2>
    <p>用于异步异模，效率更高</p>
    <h3>简单示例</h3>
    <pre class="code" data-type="xml">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration status="warn" name="MyApp" packages=""&gt;
  &lt;Appenders&gt;
    &lt;RollingRandomAccessFile name="RollingRandomAccessFile" fileName="/logs/app.log"
                 filePattern="/logs/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log"&gt;
      &lt;PatternLayout&gt;
        &lt;Pattern&gt;%d %p %c [%t] %m%n&lt;/Pattern&gt;
      &lt;/PatternLayout&gt;
      &lt;Policies&gt;
        &lt;TimeBasedTriggeringPolicy /&gt;
        &lt;SizeBasedTriggeringPolicy size="250 MB"/&gt;
      &lt;/Policies&gt;
    &lt;/RollingRandomAccessFile&gt;
  &lt;/Appenders&gt;
  &lt;Loggers&gt;
    &lt;Root level="error"&gt;
      &lt;AppenderRef ref="RollingRandomAccessFile"/&gt;
    &lt;/Root&gt;
  &lt;/Loggers&gt;
&lt;/Configuration&gt;
</pre>
    <p>说明如下：</p>
    <ul>
        <li>当前日志文件为 /logs/app.log</li>
        <li>每天会生成新的日志文件</li>
        <li>如果当前日志文件超过 250 M 也会生成新的日志文件</li>
        <li>旧日志文件会归档至以日期命名的目录</li>
    </ul>
    <h3>进阶示例</h3>
    <pre class="code" data-type="xml">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Configuration status="warn" name="MyApp" packages=""&gt;
  &lt;Appenders&gt;
    &lt;RollingRandomAccessFile name="RollingRandomAccessFile" fileName="logs/app.log"
                 filePattern="logs/$${date:yyyy-MM}/app-%d{yyyy-MM-dd-HH}-%i.log.gz"&gt;
      &lt;PatternLayout&gt;
        &lt;Pattern&gt;%d %p %c{1.} [%t] %m%n&lt;/Pattern&gt;
      &lt;/PatternLayout&gt;
      &lt;Policies&gt;
        &lt;TimeBasedTriggeringPolicy interval="6" modulate="true"/&gt;
        &lt;SizeBasedTriggeringPolicy size="250 MB"/&gt;
      &lt;/Policies&gt;
            &lt;DefaultRolloverStrategy max="20" /&gt;
    &lt;/RollingRandomAccessFile&gt;
  &lt;/Appenders&gt;
  &lt;Loggers&gt;
    &lt;Root level="error"&gt;
      &lt;AppenderRef ref="RollingRandomAccessFile"/&gt;
    &lt;/Root&gt;
  &lt;/Loggers&gt;
&lt;/Configuration&gt;
</pre>
    <p>在前一示例的基础上添加了如下功能：</p>
    <ul>
        <li>归档日志使用 gzip 压缩</li>
        <li>每 6 个小时生成新的日志文件，这地方有个小技巧，这个数字的单位由 filePattern 中的最小单位决定。</li>
        <li>最多保持 20 个日志归档</li>
    </ul>
    <h1>异步模式示例</h1>
    <p>借助于 disruptor, log4j2 在多线程异步输出日志下相比 log4j 或 logback 有了极大的提高（20~30 倍）。</p>
    <h2>pom.xml</h2>
    <pre class="code" data-type="xml">
&lt;dependency&gt;
    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
    &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
    &lt;version&gt;1.7.25&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;
    &lt;version&gt;2.9.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;
    &lt;version&gt;2.9.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;
    &lt;version&gt;2.9.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.lmax&lt;/groupId&gt;
    &lt;artifactId&gt;disruptor&lt;/artifactId&gt;
    &lt;version&gt;3.3.4&lt;/version&gt;
&lt;/dependency&gt;
</pre>
    <h2>全局异步模式</h2>
    <ol>
        <li>
            <p>添加 log4j2.component.properties</p>
            <pre class="code" data-type="properties">
Log4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
</pre>
        </li>
        <li>
            <p>log4j2.xml</p>
            <pre class="code" data-type="xml">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;Configuration status=&quot;warn&quot; name=&quot;MyApp&quot; packages=&quot;&quot;&gt;
    &lt;Appenders&gt;
        &lt;RollingRandomAccessFile name=&quot;random&quot; fileName=&quot;/tmp/logs/thrift-bench.log&quot; filePattern=&quot;/tmp/logs/thrift-bench-%i.log&quot;&gt;
            &lt;PatternLayout&gt;
                &lt;Pattern&gt;%d %p %c [%t] %m%n&lt;/Pattern&gt;
            &lt;/PatternLayout&gt;
            &lt;Policies&gt;
                &lt;SizeBasedTriggeringPolicy size=&quot;10 MB&quot; /&gt;
            &lt;/Policies&gt;
            &lt;DefaultRolloverStrategy max=&quot;5&quot;/&gt;
        &lt;/RollingRandomAccessFile&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;Root level=&quot;info&quot;&gt;
            &lt;AppenderRef ref=&quot;random&quot; /&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;
</pre>
        </li>
    </ol>
    <h2>混合异步模式</h2>
    <p>log4j2.xml</p>
    <h3>主要使用异步模式，部分使用同步模式</h3>
    <pre class="code" data-type="xml">
&lt;Loggers&gt;
    &lt;asyncRoot level=&quot;error&quot;&gt;
        &lt;AppenderRef ref=&quot;random&quot;/&gt;
    &lt;/asyncRoot&gt;

    &lt;Logger name=&quot;com.foo.test&quot; level=&quot;info&quot;&gt;
        &lt;AppenderRef ref=&quot;random&quot;/&gt;
    &lt;/Logger&gt;
&lt;/Loggers&gt;
</pre>
    <h3>主要使用同步模式，部分使用异步模式</h3>
    <pre class="code" data-type="xml">
&lt;Loggers&gt;
    &lt;Root level=&quot;error&quot;&gt;
        &lt;AppenderRef ref=&quot;random&quot;/&gt;
    &lt;/Root&gt;

    &lt;AsyncLogger name=&quot;com.foo.test&quot; level=&quot;info&quot;&gt;
        &lt;AppenderRef ref=&quot;random&quot;/&gt;
    &lt;/AsyncLogger&gt;
&lt;/Loggers&gt;
</pre>
    <h1>FAQ</h1>
    <h2>配置文件语法</h2>
    <p>标签可使用大小写间隔方式或全小写横线分隔方式，例如 AppenderRef 和 appender-ref 表示相同的标签。</p>
    <h1>References</h1>
    <h2>Resources</h2>
    <ul>
        <li>
            <a href="https://logging.apache.org/log4j/2.x/manual/layouts.html#PatternLayout">Pattern Layout</a>
        </li>
        <li>
            <a href="https://logging.apache.org/log4j/log4j-2.2/manual/appenders.html">Log4j2 Appenders</a>
        </li>
        <li>
            <a href="http://logging.apache.org/log4j/2.x/manual/async.html">Asynchronous Loggers for Low-Latency Logging</a>
        </li>
        <li>
            <a href="https://zhuanlan.zhihu.com/p/36554554">Log4j2与Slf4j的最佳实践</a>
        </li>
    </ul>
    <h2>一个我常用的配置</h2>
    <pre class="code" data-type="xml">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;Configuration&gt;
    &lt;Appenders&gt;
        &lt;Console name=&quot;STDOUT&quot; target=&quot;SYSTEM_OUT&quot;&gt;
            &lt;PatternLayout pattern=&quot;%d %p %c [%t] %m%n&quot; /&gt;
        &lt;/Console&gt;
        &lt;RollingRandomAccessFile name=&quot;random&quot; fileName=&quot;/tmp/logs/thrift-bench.log&quot; filePattern=&quot;/tmp/logs/thrift-bench-%i.log&quot;&gt;
            &lt;PatternLayout&gt;
                &lt;Pattern&gt;%d %p %c [%t] %m%n&lt;/Pattern&gt;
            &lt;/PatternLayout&gt;
            &lt;Policies&gt;
                &lt;SizeBasedTriggeringPolicy size=&quot;1 MB&quot; /&gt;
            &lt;/Policies&gt;
            &lt;DefaultRolloverStrategy max=&quot;5&quot;/&gt;
        &lt;/RollingRandomAccessFile&gt;
    &lt;/Appenders&gt;
    &lt;Loggers&gt;
        &lt;Root level=&quot;trace&quot;&gt;
            &lt;AppenderRef ref=&quot;STDOUT&quot; /&gt;
            &lt;AppenderRef ref=&quot;random&quot; /&gt;
        &lt;/Root&gt;
    &lt;/Loggers&gt;
&lt;/Configuration&gt;
</pre>
</body>
</html>
