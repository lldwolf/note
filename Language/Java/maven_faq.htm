<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
    <script type="text/javascript" src="../../mylib/js/css.js"></script>
    <title>Maven FAQ</title>
</head>

<body>
    <p id="title">Maven FAQ</p>
    <h1>使用命令行创建项目框架</h1>
    <pre class="code" data-type="sh">
# 使用 maven-archetype-quickstart 模板创建框架
mvn archetype:generate -DinteractiveMode=false -DgroupId=com.lld -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart

# 使用交互方式创建项目框架
mvn archetype:generate -DinteractiveMode=true
</pre>
    <h1>中央仓库为 SSL 网站</h1>
<pre class="code" data-type="sh">
mvn clean package -Djavax.net.ssl.trustStore=C:/data/maven -Djavax.net.ssl.trustStorePassword=changeit
</pre>
    <h1>打包时如何打包 properties 或 XML 配置文件</h1>
    <p>推荐将这些文件放在 src/main/resources 目录下，这样 Maven 会自动打包</p>
    <p>或者在 pom.xml 中配置如下</p>
    <pre class="code" data-type="xml">&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;                      
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/resources&lt;/directory&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;</pre>
    <h1>跳过指定步骤</h1>
    <h2>如何在 Windows 下跳过 RPM 阶段</h2>
    <p>使用 profile，仅在 Linux 环境下打包 RPM</p>
    <pre class="code" data-type="xml">
&lt;profiles&gt;
	&lt;profile&gt;
		&lt;id&gt;rpm&lt;/id&gt;
		&lt;activation&gt;
			&lt;os&gt;
				&lt;family&gt;UNIX&lt;/family&gt;
			&lt;/os&gt;
		&lt;/activation&gt;
		&lt;build&gt;
			&lt;plugins&gt;
				&lt;plugin&gt;
					&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
					&lt;artifactId&gt;rpm-maven-plugin&lt;/artifactId&gt;
					...
				&lt;/plugin&gt;
			&lt;/plugins&gt;
		&lt;/build&gt;
	&lt;/profile&gt;
&lt;/profiles&gt;
</pre>
    <p>OS family 可选 Windows, UNIX, Mac</p>
    <h1>编译问题</h1>
    <h2>编译时如何指定目标 JDK 版本</h2>
    <pre class="code" data-type="xml">
&lt;plugin&gt;
	&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
	&lt;version&gt;3.5.1&lt;/version&gt;
	&lt;configuration&gt;
		&lt;source&gt;1.8&lt;/source&gt;
		&lt;target&gt;1.8&lt;/target&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;
</pre>
    <h2>编译时如何指定不编译的文件</h2>
    <p>使用如下方式跳过</p>
    <pre class="code" data-type="xml">
&lt;plugin&gt;
	&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
	&lt;version&gt;3.5.1&lt;/version&gt;
	&lt;configuration&gt;
		&lt;source&gt;1.8&lt;/source&gt;
		&lt;target&gt;1.8&lt;/target&gt;
		&lt;excludes&gt;
			&lt;exclude&gt;**/mytest/*.java&lt;/exclude&gt;
			&lt;exclude&gt;com/my/NoUsed.java&lt;/exclude&gt;
			&lt;exclude&gt;etc/*&lt;/exclude&gt;
		&lt;/excludes&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;
</pre>
    <p>需要注意如下几点：</p>
    <ul>
    <li>在此使用的路径为对应源代码路径的相对路径</li>
    <li>对于 exclude 的类，如果它被其它类引用了，exclude 将失效（maven 还是很聪明的）。所以需要将引用它的类一块儿放在 exclude 列表中才行。</li>
    </ul>
    <h1>如何引用本地 jar 包</h1>
    <h2>引用 jar</h2>
    <p>对于不在仓库中的 jar 包引用，可以使用如下两种方法</p>
    <p>注册 jar 包到本地仓库，然后就可以在 pom.xml 中正常引用，命令如下所示：</p>
    <pre class="code" data-type="sh">mvn install:install-file -Dfile=[jar file path] -DgroupId=[group id] -DartifactId=[artifact id] -Dversion=[version] -Dpackaging=jar -DgeneratePom=true</pre>
    <p>也可以在 pom.xml 直接使用绝对路径引用这些 jar 包并将其引用范围设为 system 如下所示：</p>
    <pre class="code" data-type="xml">&lt;dependency&gt;
	&lt;groupId&gt;com.roufid.tutorials&lt;/groupId&gt;
	&lt;artifactId&gt;example-app&lt;/artifactId&gt;
	&lt;version&gt;1.0&lt;/version&gt;
	&lt;scope&gt;system&lt;/scope&gt;
	&lt;systemPath&gt;${basedir}/lib/yourJar.jar&lt;/systemPath&gt;
&lt;/dependency&gt;</pre>
    <h2>关联 Source Code</h2>
    <p>如果是自己写的类库，那么将 source 也打成 jar 后，使用常规的 Eclipse attach source 在指定 xxxx-source.jar.</p>
    <p>至于如何打包 source, 请参考 “如何打包源文件” 一节。</p>
    <h1>如何手工指定 settings.xml 路径</h1>
    <pre class="code" data-type="sh">mvn clean package -s settings.xml</pre>
    <p>-s 是 --settings 的缩写</p>
    <h1>Source Code</h1>
    <h2>手工指定 Source Code 目录</h2>
    <p> src 路径只能指定一个</p>
    <pre class="code" data-type="xml">
&lt;build&gt;
	&lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
	...
&lt;/build&gt;
</pre>
    <h1>Resources</h1>
    <h2>默认不创建 resources 目录</h2>
    <p>使用 maven quickapp architype 创建项目时，默认不创建 resources 目录，可使用如下方式创建并加到路径中</p>
    <ol>
    <li>在 src/main 目录下创建 resources 目录</li>
    <li>在项目结点上使用右键菜单 Maven &rArr; Update Project</li>
    <li>src/main/resources 将自动加入到 Build Path &rArr; Source 下</li>
    </ol>
    <h2>如何手工指定 src/resources 路径</h2>
    <p>resource 可指定多个路径，默认 src 路径只有一个</p>
    <pre class="code" data-type="xml">
&lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
&lt;resources&gt;
	&lt;resource&gt;
		&lt;directory&gt;etc&lt;/directory&gt;
		&lt;excludes&gt;
			&lt;exclude&gt;**/*.java&lt;/exclude&gt;
		&lt;/excludes&gt;
	&lt;/resource&gt;
	&lt;resource&gt;
		&lt;directory&gt;res&lt;/directory&gt;
		&lt;excludes&gt;
			&lt;exclude&gt;**/*.java&lt;/exclude&gt;
		&lt;/excludes&gt;
	&lt;/resource&gt;
&lt;/resources&gt;
</pre>
    <h1>为不同的环境设定不同属性</h1>
    <p>常见场景是本地测试时使用的路径格式为 Windows，而部署到服务器上使用 Linux 路径</p>
    <ol>
        <li>
            <p>在 properties 文件中使用变量</p>
            <pre class="code" data-type="properties">
property.filename = ${log.folder}/my.log
</pre>
        </li>
        <li>
            <p>在 pom.xml 中定义 profile</p>
            <pre class="code" data-type="xml">
&lt;profiles&gt;
    &lt;profile&gt;
        &lt;id&gt;dev&lt;/id&gt;
        &lt;properties&gt;
            &lt;log.folder&gt;C:/tmp&lt;/log.folder&gt;
        &lt;/properties&gt;
    &lt;/profile&gt;
    &lt;profile&gt;
        &lt;id&gt;prod&lt;/id&gt;
        &lt;properties&gt;
            &lt;log.folder&gt;/tmp&lt;/log.folder&gt;
        &lt;/properties&gt;
    &lt;/profile&gt;
&lt;/profiles&gt;
</pre>
        </li>
        <li>
            <p>在 pom.xml 中启用资源过滤</p>
            <pre class="code" data-type="xml">
&lt;resources&gt;
	&lt;resource&gt;
		&lt;directory&gt;src/main/resources&lt;/directory&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
	&lt;/resource&gt;
&lt;/resources&gt;
</pre>
        </li>
        <li>
            <p>使用如下命令打包</p>
            <pre class="code" data-type="sh">mvn package -Pdev</pre>
        </li>
    </ol>
    <p>如果是 Tomcat 应用，需在 Eclipse 中设定如下：</p>
    <p>Maven Active Profile 设置</p>
    <p><img alt="" src="images/maven-profile-eclipse.png" /></p>
    <p>在 Run As &rArr; Maven build 中将 maven goals 设为 <span class="emphasis">tomcat:run</span></p>
    <p></p>
    <h1>Unit Test</h1>
    <h2>指定 Unit Test 的位置</h2>
    <p>使用如下配置指定 unit test 的 source code 和 resource</p>
    <pre class="code" data-type="xml">
&lt;build&gt;
    &lt;testSourceDirectory&gt;junit/src&lt;/testSourceDirectory&gt;
    &lt;testResources&gt;
        &lt;testResource&gt;
            &lt;directory&gt;junit/config&lt;/directory&gt;
        &lt;/testResource&gt;
    &lt;/testResources&gt;
&lt;/build&gt;
</pre>
    <h2>如何跳过 test 阶段</h2>
    <pre class="code" data-type="sh">mvn clean package -Dmaven.test.skip=true</pre>
    <h2>只运行指定的 Unit Test</h2>
    <pre class="code" data-type="sh">mvn -Dtest=lld.MyTestClass#myTestMethod test</pre>
    <h1>打包问题</h1>
    <h2>如何打包源文件</h2>
    <p>配置如下</p>
    <pre class="code" data-type="xml">&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
      &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;
      &lt;version&gt;3.0.1&lt;/version&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;id&gt;attach-sources&lt;/id&gt;
          &lt;phase&gt;verify&lt;/phase&gt;
          &lt;goals&gt;
            &lt;goal&gt;jar-no-fork&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;</pre>
    <p>如果想单独为源码打 jar 包，需要将上述配置单独写一个 pom.xml 并运行</p>
    <pre class="code" data-type="sh">mvn source:jar</pre>
    <p>如果想将源码一块儿打包进本他仓库，将上述配置放在主 pom.xml 中</p>
    <pre class="code" data-type="sh">mvn clean package</pre>
    <p>更详细的可以看<a href="https://maven.apache.org/plugins/maven-source-plugin/usage.html">Apache Source Plugin Usage</a></p>
    <h2>如何同时生成多个 jar 包</h2>
    <p>例如从部分 class 生成另外一个 jar 包</p>
    <pre class="code" data-type="xml">
&lt;build&gt;
		&lt;plugin&gt;
			&lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
			&lt;executions&gt;
				&lt;execution&gt;
					&lt;id&gt;sub-jar1&lt;/id&gt;
					&lt;goals&gt;
						&lt;goal&gt;jar&lt;/goal&gt;
					&lt;/goals&gt;
					&lt;phase&gt;package&lt;/phase&gt;
					&lt;configuration&gt;
						&lt;classifier&gt;sub-jar1-name&lt;/classifier&gt;
						&lt;includes&gt;
							&lt;include&gt;a/b/*.class&lt;/include&gt;
							&lt;include&gt;a/c/**/*.class&lt;/include&gt;
							&lt;include&gt;a/d/A.class&lt;/include&gt;
						&lt;/includes&gt;
						&lt;excludes&gt;
							&lt;exclude&gt;a/b/B*.class&lt;/exclude&gt;
						&lt;/excludes&gt;
					&lt;/configuration&gt;
				&lt;/execution&gt;
				&lt;execution&gt;
					&lt;id&gt;sub-jar2&lt;/id&gt;
					...
		&lt;/plugin&gt;
	&lt;/plugins&gt;
&lt;/build&gt;
</pre>
    <h2>如何打 RPM 包</h2>
    <pre class="code" data-type="xml">
&lt;rpm-install-location&gt;my-install-location&lt;/rpm-install-location&gt;
&lt;rpm-user&gt;my-user-id&lt;/rpm-user&gt;
&lt;rpm-group&gt;my-group&lt;/rpm-group&gt;
...
&lt;plugin&gt;
	&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
	&lt;artifactId&gt;rpm-maven-plugin&lt;/artifactId&gt;
	&lt;version&gt;2.0.1&lt;/version&gt;
	&lt;executions&gt;
		&lt;execution&gt;
			&lt;phase&gt;package&lt;/phase&gt;
			&lt;configuration&gt;
				&lt;release&gt;33684&lt;/release&gt;
				&lt;copyright&gt;Lindong&lt;/copyright&gt;
				&lt;distribution&gt;My RPM Package&lt;/distribution&gt;
				&lt;group&gt;System&lt;/group&gt;
				&lt;needarch&gt;false&lt;/needarch&gt;
				&lt;packager&gt;Lindong&lt;/packager&gt;
				&lt;version&gt;${project.version}&lt;/version&gt;
				&lt;prefix&gt;${rpm-install-location}&lt;/prefix&gt;
				&lt;!-- sub folders location --&gt;
				&lt;mappings&gt;
					&lt;mapping&gt;
						&lt;directory&gt;${rpm-install-location}/lib&lt;/directory&gt;
						&lt;filemode&gt;755&lt;/filemode&gt;
						&lt;username&gt;${rpm-user}&lt;/username&gt;
						&lt;groupname&gt;${rpm-group}&lt;/groupname&gt;
						&lt;sources&gt;
							&lt;source&gt;
								&lt;location&gt;${basedir}/target/dependency&lt;/location&gt;
							&lt;/source&gt;
							&lt;source&gt;
								&lt;location&gt;${basedir}/target/jar&lt;/location&gt;
							&lt;/source&gt;
						&lt;/sources&gt;
					&lt;/mapping&gt;
				&lt;/mappings&gt;
				&lt;postinstall&gt;&lt;![CDATA[$RPM_INSTALL_PREFIX/scripts/autodeploy/postinstall.ksh]]&gt;&lt;/postinstall&gt;
			&lt;/configuration&gt;
			&lt;goals&gt;
				&lt;goal&gt;rpm&lt;/goal&gt;
			&lt;/goals&gt;
		&lt;/execution&gt;
	&lt;/executions&gt;
&lt;/plugin&gt;
</pre>
    <h1>同一族的产品共享版本号</h1>
    <p>例如对于 CXF，多个 jar 包可以共享一个版本号，这样升级时可以只改一处就可以了。</p>
    <pre class="code" data-type="xml">
&lt;properties&gt;
	&lt;cxf.version&gt;3.2.0&lt;/cxf.version&gt;
&lt;/properties&gt;
&lt;dependencies&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
		&lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;/artifactId&gt;
		&lt;version&gt;${cxf.version}&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
		&lt;artifactId&gt;cxf-rt-transports-http&lt;/artifactId&gt;
		&lt;version&gt;${cxf.version}&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
		&lt;artifactId&gt;cxf-rt-transports-http-jetty&lt;/artifactId&gt;
		&lt;version&gt;${cxf.version}&lt;/version&gt;
	&lt;/dependency&gt;
&lt;/dependencies&gt;
</pre>
    <h1>依赖问题 (Dependency)</h1>
    <h2>传递依赖版本问题</h2>
    <p>在实操过程中，发现 dependencyManagement 的顺序会导致依赖包版本不一致，例如：</p>
    <pre class="code" data-type="xml">&lt;dependencyManagement&gt;
	&lt;dependencies&gt;
          &lt;dependency&gt;
              &lt;groupId&gt;de.codecentric&lt;/groupId&gt;
              &lt;artifactId&gt;spring-boot-admin-server&lt;/artifactId&gt;
              &lt;version&gt;1.5.2&lt;/version&gt;
              &lt;type&gt;pom&lt;/type&gt;
              &lt;scope&gt;import&lt;/scope&gt;
          &lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
			&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
			&lt;version&gt;Edgware.RELEASE&lt;/version&gt;
			&lt;type&gt;pom&lt;/type&gt;
			&lt;scope&gt;import&lt;/scope&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
</pre>
    <p>这种情况下引入的 spring-cloud-netflix-core 是 1.3.0，而换序后引入的是 1.4.0. Sigh.</p>
    <h2>查看传递依赖树</h2>
    <pre class="code" data-type="sh">mvn dependency:tree</pre>
    <h2>将依赖的 jar 包打在一起</h2>
    <p>可以在打包时同时将依赖的 jar 包导出，命令如下所示</p>
    <pre class="code" data-type="sh">mvn clean package dependency:copy-dependencies -DoutputDirectory=target/lib</pre>
    <p>如果想将所有的依赖 jar 包及自己的程序打在一起，不用费心去设 classpath，在 pom.xml 中加入如下配置</p>
    <pre class="code" data-type="xml">&lt;build&gt;
	&lt;finalName&gt;HelloServer&lt;/finalName&gt;
	&lt;plugins&gt;
		&lt;plugin&gt;
			&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
			&lt;configuration&gt;
				&lt;archive&gt;
					&lt;manifest&gt;
                        &lt;!-- 想要运行的结果 jar 包中的入口类 --&gt;
						&lt;mainClass&gt;lld.cxf.service.HelloServer&lt;/mainClass&gt;
					&lt;/manifest&gt;
				&lt;/archive&gt;
				&lt;descriptorRefs&gt;
					&lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
				&lt;/descriptorRefs&gt;
			&lt;/configuration&gt;
		&lt;/plugin&gt;
	&lt;/plugins&gt;
&lt;/build&gt;
</pre>
    <p>使用如下命令编译并打包</p>
    <pre class="code" data-type="sh">mvn clean compile assembly:single</pre>
    <p>必须先 compile 否则你自己的代码不会在结果中</p>
    <h2>去掉某个 jar 包的默认依赖</h2>
    <pre class="code" data-type="xml">
&lt;dependency&gt;
	&lt;groupId&gt;org.apache.thrift&lt;/groupId&gt;
	&lt;artifactId&gt;libthrift&lt;/artifactId&gt;
	&lt;version&gt;0.8.0&lt;/version&gt;
	&lt;exclusions&gt;
		&lt;exclusion&gt;
			&lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
			&lt;artifactId&gt;httpcore&lt;/artifactId&gt;
		&lt;/exclusion&gt;
		&lt;exclusion&gt;
			&lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
			&lt;artifactId&gt;httpclient&lt;/artifactId&gt;
		&lt;/exclusion&gt;
	&lt;/exclusions&gt;
&lt;/dependency&gt;
</pre>
    <h1>pom.xml</h1>
    <h2>如何指定其它 pom.xml</h2>
    <pre class="code" data-type="sh">mvn -f otherPomFile.xml</pre>
    <h2>如何共享 pom.xml 片断</h2>
    <p>对于多个类似的项目，我们可以把公共的 pom.xml 片断抽出，并在各个 pom.xml 引用</p>
    <p>创建公共 pom.xml 如下</p>
    <pre class="code" data-type="xml">
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	&lt;groupId&gt;com.my&lt;/groupId&gt;
	&lt;artifactId&gt;common.parent&lt;/artifactId&gt;
	&lt;version&gt;1.0.0&lt;/version&gt;
	&lt;packaging&gt;pom&lt;/packaging&gt;
	&lt;!-- 任意配置项 --&gt;
&lt;/project&gt;
</pre>
    <p>引用方式如下：</p>
    <pre class="code" data-type="xml">
&lt;name&gt;My Project&lt;/name&gt;
&lt;url&gt;http://maven.apache.org&lt;/url&gt;
&lt;parent&gt;
	&lt;groupId&gt;com.my&lt;/groupId&gt;
	&lt;artifactId&gt;common.parent&lt;/artifactId&gt;
	&lt;version&gt;1.0.0&lt;/version&gt;
	&lt;relativePath&gt;../common.parent/pom.xml&lt;/relativePath&gt;
&lt;/parent&gt;
&lt;properties&gt;
&lt;/properties&gt;
</pre>
    <h1>Deploy</h1>
    <h2>Deploy 到本地库</h2>
    <pre class="code" data-type="sh">mvn clean install</pre>
    <h2>Deploy 至中央库</h2>
    <ol>
        <li>
            <p>settings.xml 中设置身份验证</p>
            <pre class="code" data-type="xml">
&lt;servers&gt;
    &lt;server&gt;
        &lt;username&gt;admin&lt;/username&gt;
        &lt;password&gt;admin123&lt;/password&gt;
        &lt;id&gt;nexus-3rd&lt;/id&gt;
    &lt;/server&gt;
&lt;/servers&gt;
</pre>
        </li>
        <li>
            <p>pom.xml 中添加 repository 引用</p>
            <pre class="code" data-type="xml">
&lt;distributionManagement&gt;
    &lt;repository&gt;
        &lt;id&gt;nexus-3rd&lt;/id&gt;
        &lt;url&gt;http://localhost:8081/nexus/content/repositories/thirdparty/&lt;/url&gt;
    &lt;/repository&gt;
&lt;/distributionManagement&gt;
</pre>
        </li>
        <li>
            <pre class="code" data-type="sh">mvn clean deploy</pre>
        </li>
    </ol>
    <h1>引用 Servlet</h1>
    <p>若需开发 servlet 应用，可使用如下方式引用 Tomcat 提供的 jar 包</p>
    <pre class="code" data-type="xml">
&lt;dependency&gt;
    &lt;groupId&gt;tomcat&lt;/groupId&gt;
    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
    &lt;version&gt;5.5.23&lt;/version&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;tomcat&lt;/groupId&gt;
    &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;
    &lt;version&gt;5.5.23&lt;/version&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
</pre>
    <h1>Maven 有哪些内置属性</h1>
    <table style="width: 800px">
    <tr>
    <th>属性</th>
    <th>说明</th>
        </tr>
    <tr>
    <td>${basedir}</td>
    <td>项目的根目录，即包含pom.xml文件的目录</td>
        </tr>
    <tr>
    <td>${version}</td>
    <td>项目版本号</td>
        </tr>
    <tr>
    <td>${project.basedir}</td>
    <td>同 ${basedir}</td>
        </tr>
    <tr>
    <td>${project.baseUri}</td>
    <td>项目文件地址</td>
        </tr>
    <tr>
    <td>${maven.build.timestamp}</td>
    <td>项目构建时间</td>
        </tr>
    <tr>
    <td>${maven.build.timestamp.format}</td>
    <td>属性${maven.build.timestamp}的展示格式，默认值为yyyyMMdd-HHmm，可自定义格式，在 pom.xml 的 properties 中添加 maven.build.timestamp.format 指定</td>
        </tr>
    <tr>
    <td>${project.build.directory}</td>
    <td>主源码路径</td>
        </tr>
    <tr>
    <td>${project.build.sourceEncoding}</td>
    <td>主源码的编码格式</td>
        </tr>
    <tr>
    <td>${project.build.sourceDirectory}</td>
    <td>主源码的路径</td>
        </tr>
    <tr>
    <td>${project.build.finalName}</td>
    <td>输出文件名称</td>
        </tr>
    <tr>
    <td>${project.vesion}</td>
    <td>同 ${version}</td>
        </tr>
    <tr>
    <td>${settings.localRepository}</td>
    <td>本地仓库的地址</td>
        </tr>
    <tr>
    <td>${env.JAVA_HOME}</td>
    <td>JAVA_HOME环境变量的值</td>
        </tr>
    </table>
    <p>可以使用mvn help:system命令可查看所有 env.* 环境变量</p>
    <h1>其它错误</h1>
    <p>有时碰到一些莫名的错误，如果实在搞不定，可以尝试一下清除本地 Maven 库。</p>
    <p>例如，我曾经碰到过如下错误</p>
    <ul>
    <li>POM Error: Error parsing lifecycle processing instructions</li>
    <li>Compile Error: OutOfArrayIndexException ...</li>
    </ul>
    <p>清除本地库的步骤</p>
    <ol>
    <li>关闭 Eclipse</li>
    <li>删除 %USERPROFILE%\.m2\repository 下所有文件</li>
    <li>重启 Eclipse</li>
    </ol>
</body>
</html>
