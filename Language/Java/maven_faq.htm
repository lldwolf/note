<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
    <script type="text/javascript" src="../../mylib/js/css.js"></script>
    <title>Java Note</title>
</head>

<body>
    <p id="title">Maven FAQ</p>
    <h1>打包时如何打包 properties 或 XML 配置文件</h1>
    <p>推荐将这些文件放在 src/main/resources 目录下，这样 Maven 会自动打包</p>
    <p>或者在 pom.xml 中配置如下</p>
    <pre class="code" data-type="xml">&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;                      
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/resources&lt;/directory&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;</pre>
    <h1>如何跳过 test 阶段</h1>
    <pre class="code" data-type="sh">mvn clean package -Dmaven.test.skip=true</pre>
    <h1>编译时如何指定不编译的文件</h1>
    <p>使用如下方式跳过</p>
    <pre class="code" data-type="xml">
&lt;plugin&gt;
	&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
	&lt;version&gt;3.5.1&lt;/version&gt;
	&lt;configuration&gt;
		&lt;source&gt;1.8&lt;/source&gt;
		&lt;target&gt;1.8&lt;/target&gt;
		&lt;excludes&gt;
			&lt;exclude&gt;**/mytest/*.java&lt;/exclude&gt;
			&lt;exclude&gt;com/my/NoUsed.java&lt;/exclude&gt;
			&lt;exclude&gt;etc/*&lt;/exclude&gt;
		&lt;/excludes&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;
</pre>
    <p>需要注意如下几点：</p>
    <ul>
        <li>在此使用的路径为对应源代码路径的相对路径</li>
        <li>对于 exclude 的类，如果它被其它类引用了，exclude 将失效（maven 还是很聪明的）。所以需要将引用它的类一块儿放在 exclude 列表中才行。</li>
    </ul>
    <h1>如何引用本地 jar 包</h1>
    <p>对于不在仓库中的 jar 包引用，可以使用如下两种方法</p>
    <p>注册 jar 包到本地仓库，然后就可以在 pom.xml 中正常引用，命令如下所示：</p>
    <pre class="code" data-type="sh">mvn install:install-file -Dfile=[jar file path] -DgroupId=[group id] -DartifactId=[artifact id] -Dversion=[version] -Dpackaging=jar -DgeneratePom=true</pre>
    <p>也可以在 pom.xml 直接使用绝对路径引用这些 jar 包并将其引用范围设为 system 如下所示：</p>
    <pre class="code" data-type="xml">&lt;dependency&gt;
	&lt;groupId&gt;com.roufid.tutorials&lt;/groupId&gt;
	&lt;artifactId&gt;example-app&lt;/artifactId&gt;
	&lt;version&gt;1.0&lt;/version&gt;
	&lt;scope&gt;system&lt;/scope&gt;
	&lt;systemPath&gt;${basedir}/lib/yourJar.jar&lt;/systemPath&gt;
&lt;/dependency&gt;</pre>
    <h1>如何手工指定 settings.xml 路径</h1>
    <pre class="code" data-type="sh">mvn clean package -s settings.xml</pre>
    <p>-s 是 --settings 的缩写</p>
    <h1>如何手工指定 src/resource 路径</h1>
    <p>resource 可指定多个路径，默认 src 路径只有一个</p>
    <pre class="code" data-type="xml">
&lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
&lt;resources&gt;
	&lt;resource&gt;
		&lt;directory&gt;etc&lt;/directory&gt;
		&lt;excludes&gt;
			&lt;exclude&gt;**/*.java&lt;/exclude&gt;
		&lt;/excludes&gt;
	&lt;/resource&gt;
	&lt;resource&gt;
		&lt;directory&gt;res&lt;/directory&gt;
		&lt;excludes&gt;
			&lt;exclude&gt;**/*.java&lt;/exclude&gt;
		&lt;/excludes&gt;
	&lt;/resource&gt;
&lt;/resources&gt;
</pre>
    <h1>如何打包源文件</h1>
    <p>配置如下</p>
    <pre class="code" data-type="xml">&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
      &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;
      &lt;version&gt;3.0.1&lt;/version&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;id&gt;attach-sources&lt;/id&gt;
          &lt;phase&gt;verify&lt;/phase&gt;
          &lt;goals&gt;
            &lt;goal&gt;jar-no-fork&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;</pre>
    <p>如果想单独为源码打 jar 包，需要将上述配置单独写一个 pom.xml 并运行</p>
    <pre class="code" data-type="sh">mvn source:jar</pre>
    <p>如果想将源码一块儿打包进本他仓库，将上述配置放在主 pom.xml 中</p>
    <pre class="code" data-type="sh">mvn clean package</pre>
    <p>更详细的可以看<a href="https://maven.apache.org/plugins/maven-source-plugin/usage.html">Apache Source Plugin Usage</a></p>
    <h1>同一族的产品共享版本号</h1>
    <p>例如对于 CXF，多个 jar 包可以共享一个版本号，这样升级时可以只改一处就可以了。</p>
    <pre class="code" data-type="xml">
&lt;properties&gt;
	&lt;cxf.version&gt;3.2.0&lt;/cxf.version&gt;
&lt;/properties&gt;
&lt;dependencies&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
		&lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;/artifactId&gt;
		&lt;version&gt;${cxf.version}&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
		&lt;artifactId&gt;cxf-rt-transports-http&lt;/artifactId&gt;
		&lt;version&gt;${cxf.version}&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
		&lt;artifactId&gt;cxf-rt-transports-http-jetty&lt;/artifactId&gt;
		&lt;version&gt;${cxf.version}&lt;/version&gt;
	&lt;/dependency&gt;
&lt;/dependencies&gt;
</pre>
    <h1>将依赖的 jar 包打在一起</h1>
    <p>可以在打包时同时将依赖的 jar 包导出，命令如下所示</p>
    <pre class="code" data-type="sh">mvn clean package dependency:copy-dependencies -DoutputDirectory=target/lib</pre>
    <p>如果想将所有的依赖 jar 包及自己的程序打在一起，不用费心去设 classpath，在 pom.xml 中加入如下配置</p>
    <pre class="code" data-type="xml">&lt;build&gt;
	&lt;finalName&gt;HelloServer&lt;/finalName&gt;
	&lt;plugins&gt;
		&lt;plugin&gt;
			&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
			&lt;configuration&gt;
				&lt;archive&gt;
					&lt;manifest&gt;
                        &lt;!-- 想要运行的结果 jar 包中的入口类 --&gt;
						&lt;mainClass&gt;lld.cxf.service.HelloServer&lt;/mainClass&gt;
					&lt;/manifest&gt;
				&lt;/archive&gt;
				&lt;descriptorRefs&gt;
					&lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
				&lt;/descriptorRefs&gt;
			&lt;/configuration&gt;
		&lt;/plugin&gt;
	&lt;/plugins&gt;
&lt;/build&gt;
</pre>
    <p>使用如下命令编译并打包</p>
    <pre class="code" data-type="sh">mvn clean compile assembly:single</pre>
    <p>必须先 compile 否则你自己的代码不会在结果中</p>
    <h1>如何指定其它 pom.xml</h1>
    <pre class="code" data-type="sh">mvn -f otherPomFile.xml</pre>
    <h1>引用 Servlet</h1>
    <p>若需开发 servlet 应用，可使用如下方式引用 Tomcat 提供的 jar 包</p>
    <pre class="code" data-type="xml">
&lt;dependency&gt;
    &lt;groupId&gt;tomcat&lt;/groupId&gt;
    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
    &lt;version&gt;5.5.23&lt;/version&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;tomcat&lt;/groupId&gt;
    &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;
    &lt;version&gt;5.5.23&lt;/version&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
</pre>
    <h1>Maven 有哪些内置属性</h1>
    <table style="width: 800px">
        <tr>
            <th>属性</th>
            <th>说明</th>
        </tr>
        <tr>
            <td>${basedir}</td>
            <td>项目的根目录，即包含pom.xml文件的目录</td>
        </tr>
        <tr>
            <td>${version}</td>
            <td>项目版本号</td>
        </tr>
        <tr>
            <td>${project.basedir}</td>
            <td>同 ${basedir}</td>
        </tr>
        <tr>
            <td>${project.baseUri}</td>
            <td>项目文件地址</td>
        </tr>
        <tr>
            <td>${maven.build.timestamp}</td>
            <td>项目构建时间</td>
        </tr>
        <tr>
            <td>${maven.build.timestamp.format}</td>
            <td>属性${maven.build.timestamp}的展示格式，默认值为yyyyMMdd-HHmm，可自定义格式，在 pom.xml 的 properties 中添加 maven.build.timestamp.format 指定</td>
        </tr>
        <tr>
            <td>${project.build.directory}</td>
            <td>主源码路径</td>
        </tr>
        <tr>
            <td>${project.build.sourceEncoding}</td>
            <td>主源码的编码格式</td>
        </tr>
        <tr>
            <td>${project.build.sourceDirectory}</td>
            <td>主源码的路径</td>
        </tr>
        <tr>
            <td>${project.build.finalName}</td>
            <td>输出文件名称</td>
        </tr>
        <tr>
            <td>${project.vesion}</td>
            <td>同 ${version}</td>
        </tr>
        <tr>
            <td>${settings.localRepository}</td>
            <td>本地仓库的地址</td>
        </tr>
        <tr>
            <td>${env.JAVA_HOME}</td>
            <td>JAVA_HOME环境变量的值</td>
        </tr>
    </table>
    <p>可以使用mvn help:system命令可查看所有 env.* 环境变量</p>
</body>
</html>
