<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
<title>FireFox与IE的兼容性问题</title>
<script type="text/javascript" src="../../mylib/js/css.js"></script>
</head>

<body>
<p id="title">FireFox与IE的兼容性问题</p>

<p>以下以 IE 代替 Internet Explorer，以 MF 代替 Mozzila Firefox</p>
<h1> document.form.item 问题</h1>
<p> (1)现有问题：</p>
<p> 现有代码中存在许多 document.formName.item(”itemName”) 这样的语句，不能在 MF 下运行</p>
<p> (2)解决方法：</p>
<p> 改用 document.formName.elements[”elementName”]</p>
<h2> 集合类对象问题</h2>
<p> (1)现有问题：</p>
<p> 现有代码中许多集合类对象取用时使用 ()，IE 能接受，MF 不能。</p>
<p> (2)解决方法：</p>
<p> 改用 [] 作为下标运算。如：document.forms(”formName”) 改为 document.forms[”formName”]。</p>
<p> 又如：document.getElementsByName(”inputName”)(1) 改为 document.getElementsByName(”inputName”)[1]</p>
<h1>  window.event</h1>
<p> (1)现有问题：</p>
<p> 使用 window.event 无法在 MF 上运行</p>
<p> (2)解决方法：</p>
<p> MF 的 event 只能在事件发生的现场使用，此问题暂无法解决。可以这样变通：</p>
<p> 原代码(可在IE中运行)：</p>
<pre>input type=”button” name=”someButton” value=”提交” onclick=”javascript:gotoSubmit()”

function gotoSubmit() {
…
alert(window.event); // use window.event
…
}</pre>
<p> 新代码(可在IE和MF中运行)：</p>
<p> input type=”button” name=”someButton” value=”提交” onclick=”javascript:gotoSubmit(event)”<br />
  …</p>
<p>function gotoSubmit(evt) {<br />
  evt = evt ? evt : (window.event ? window.event : null);<br />
  …<br />
  alert(evt); // use evt<br />
  …<br />
  }</p>
<p>此外，如果新代码中第一行不改，与老代码一样的话(即 gotoSubmit 调用没有给参数)，则仍然只能在IE中运行，但不会出错。所以，这种方案 tpl 部分仍与老代码兼容。</p>
<h1>N. 4 HTML 对象的 id 作为对象名的问题</h1>
<p> (1)现有问题</p>
<p> 在 IE 中，HTML 对象的 ID 可以作为 document 的下属对象变量名直接使用。在 MF 中不能。</p>
<p> (2)解决方法</p>
<p> 用 getElementById(”idName”) 代替 idName 作为对象变量使用。</p>
<h1>用idName字符串取得对象的问题</h1>
<p> (1)现有问题</p>
<p> 在IE中，利用 eval(idName) 可以取得 id 为 idName 的 HTML 对象，在MF 中不能。</p>
<p> (2)解决方法</p>
<p> 用 getElementById(idName) 代替 eval(idName)。</p>
<h1> 变量名与某 HTML 对象 id 相同的问题</h1>
<p> (1)现有问题</p>
<p> 在 MF 中，因为对象 id 不作为 HTML 对象的名称，所以可以使用与 HTML 对象 id 相同的变量名，IE 中不能。</p>
<p> (2)解决方法</p>
<p> 在声明变量时，一律加上 var ，以避免歧义，这样在 IE 中亦可正常运行。</p>
<p> 此外，最好不要取与 HTML 对象 id 相同的变量名，以减少错误。</p>
<h1>event.x 与 event.y 问题</h1>
<p> (1)现有问题</p>
<p> 在IE 中，event 对象有 x, y 属性，MF中没有。</p>
<p> (2)解决方法</p>
<p> 在MF中，与event.x 等效的是 event.pageX。但event.pageX IE中没有。</p>
<p> 故采用 event.clientX 代替 event.x。在IE 中也有这个变量。</p>
<p> event.clientX 与 event.pageX 有微妙的差别（当整个页面有滚动条的时候），不过大多数时候是等效的。</p>
<p> 如果要完全一样，可以稍麻烦些：</p>
<pre>mX = event.x ? event.x : event.pageX;</pre>
<p> 然后用 mX 代替 event.x</p>
<p> (3)其它</p>
<p> event.layerX 在 IE 与 MF 中都有，具体意义有无差别尚未试验。</p>
<h1>关于frame</h1>
<p> (1)现有问题</p>
<p> 在 IE中 可以用window.testFrame取得该frame，mf中不行</p>
<p> (2)解决方法</p>
<p> 在frame的使用方面mf和ie的最主要的区别是：</p>
<p> 如果在frame标签中书写了以下属性：</p>
<pre>frame src=”xx.htm” id=”frameId” name=”frameName”</pre>
<p> 那么ie可以通过id或者name访问这个frame对应的window对象，而mf只可以通过name来访问这个frame对应的window对象。例如如果上述frame标签写在最上层的window里面的htm里面，那么可以这样访问</p>
<ul>
  <li> ie： window.top.frameId或者window.top.frameName来访问这个window对象</li>
  <li> mf： 只能这样window.top.frameName来访问这个window对象</li>
</ul>
<p>  另外，在mf和ie中都可以使用window.top.document.getElementById(”frameId”)来访问frame标签，并且可以通过</p>
<pre>window.top.document.getElementById(”testFrame”).src = ‘xx.htm’</pre>
<p>来切换frame的内容，也都可以通过window.top.frameName.location = ‘xx.htm’来切换frame的内容</p>
<h1> 自定义属性</h1>
<p>在mf中，自己定义的属性必须getAttribute()取得</p>
<h1> 子对象 </h1>
<p>在mf中没有 parentElement parement.children 而用
  parentNode parentNode.childNodes</p>
<p> childNodes的下标的含义在IE和MF中不同，MF使用DOM规范，childNodes中会插入空白文本节点。
  一般可以通过node.getElementsByTagName()来回避这个问题。当html中节点缺失时，IE和MF对parentNode的解释不同，例如</p>
<pre>&lt;form&gt;
&lt;table&gt;
&lt;input /&gt;
&lt;/table&gt;
&lt;/form&gt;</pre>
<p> MF中input.parentNode的值为form, 而IE中input.parentNode的值为空节点</p>
<p> MF中节点没有removeNode方法，必须使用如下方法 node.parentNode.removeChild(node)</p>
<h1> const 问题</h1>
<p> (1)现有问题:</p>
<p> 在 IE 中不能使用 const 关键字。如 const constVar = 32; 在IE中这是语法错误。</p>
<p> (2)解决方法:</p>
<p> 不使用 const ，以 var 代替。</p>
<h1> body 对象</h1>
<p> MF的body在body标签没有被浏览器完全读入之前就存在，而IE则必须在body完全被读入之后才存在</p>
<h1> url encoding</h1>
<p> 在js中如果书写url就直接写&amp;不要写&amp;amp;，例如</p>
<pre>var url = ‘xx.jsp?objectName=xx&amp;objectEvent=xxx’;
frm.action = url;</pre>
<p>那么很有可能url不会被正常显示以至于参数没有正确的传到服务器</p>
<p> 一般会服务器报错参数没有找到，当然如果是在tpl中例外，因为tpl中符合xml规范，要求&amp;书写为&amp;一般MF无法识别js中的&amp;</p>
<h1>nodeName 和 tagName 问题</h1>
<p> (1)现有问题：</p>
<p> 在MF中，所有节点均有 nodeName 值，但 textNode 没有 tagName 值。在 IE 中，nodeName 的使用好象有问题（具体情况没有测试，但我的IE已经死了好几次）。</p>
<p> (2)解决方法：</p>
<p> 使用 tagName，但应检测其是否为空。</p>
<h1> 元素属性</h1>
<p> IE下 input.type属性为只读，但是MF下可以修改</p>
<h1>document.getElementsByName() 和 document.all[name] 的问题</h1>
<p> (1)现有问题：</p>
<p> 在 IE 中，getElementsByName()、document.all[name] 均不能用来取得 div 元素（是否还有其它不能取的元素还不知道）。<br />
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp; </p>

</body>
</html>
