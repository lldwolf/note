<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>数据库查询语句</title>
<script language="javascript" src="css.js"></script>
</head>

<body>
<h1>第二章 数据库查询语句
</h1>
<h2>2.1 单表查询及SELECT要素</h2>
<h3>2.1.1 基本语法 </h3>
<pre>select 字段列表
from 表
[where 条件]
[order by 排序字段]</pre>
<p><img src="images/bm1.BMP">注意：对SQL SERVER而言，from子句也是可以省略的，而对ORACLE则不可省略，有时我们只需要这样一个功能，例如，我们知道123与352这两个数相加的结果，在SQL SERVER中可以直接写 ： </p>
<pre>select 123 + 352</pre>
<p>返回相加结果，在ORACLE中对该功能使用这样一个解决方案，使用一个系统表“dual”，它里面只有一条记录，这样对于上述功能就可以这样写：</p>
<pre>select 123 + 352 from dual</pre>
<h3>2.1.2 最简单的用法</h3>
<p>例1：列出component表中的所有记录</p>
<pre>select * from component
</pre>
<h3>2.1.3 使用条件及LIKE的用法 </h3>
<p>例2：列出component表中位号以TE开头的记录，只显示cmpnt_id, cmpnt_name, cmpnt_serv这3个字段的内容</p>
<pre>select cmpnt_id, cmpnt_name, cmpnt_serv
from component
where cmpnt_name like 'TE%'</pre>
<p>条件的语法格式为</p>
<pre>要判断的表达式（一般为字段名） 操作符 条件表达式</pre>
<p>常用的操作符如下表所示：</p>
<table width="90%" >
  <tr>
    <th width="20%">操作符</th>
    <th width="80%">说明</th>
  </tr>
  <tr>
    <td><div align="center">=</div></td>
    <td>两个表达式是否相等</td>
  </tr>
  <tr>
    <td><div align="center">&lt;&gt;</div></td>
    <td>两个表达式是否不相等</td>
  </tr>
  <tr>
    <td><div align="center">&gt;</div></td>
    <td>前表达式是否大于后表达式</td>
  </tr>
  <tr>
    <td><div align="center">&lt;</div></td>
    <td>前表达式是否小于后表达式</td>
  </tr>
  <tr>
    <td><div align="center">&gt;=</div></td>
    <td>前表达式是否不小于后表达式</td>
  </tr>
  <tr>
    <td><div align="center">&lt;=</div></td>
    <td>前表达式是否不大于后表达式</td>
  </tr>
  <tr>
    <td><div align="center">LIKE</div></td>
    <td>前表达式是否与后表达式相似, 使用符号'%'作为通配符，详见2.1.3.1节</td>
  </tr>
  <tr>
    <td><div align="center">IN</div></td>
    <td>前表达式是否在后表达式的列表中,详见2.1.3.2节</td>
  </tr>
  <tr>
    <td><div align="center">IS [NOT] NULL </div></td>
    <td>用于判断一个值是否为NULL, 详见2.1.3.3节 </td>
  </tr>
</table>
<p><img src="images/bm1.BMP">注：如果使用LIKE操作符，虽然并不强制在条件表达式中使用通配符‘%’，但强烈建议这样做，如果不需要使用通配符的话，那么建议不要用LIKE，而用‘=’即可。</p>
<h4>2.1.3.1 LIKE 的用法 </h4>
<p>使用如下两个通配符：</p>
<ul>
  <li>%：匹配任意多个字符（0个至任意多个）</li>
  <li>_：匹配单个字符</li>
</ul>
<p>如果要搜索数据库内容中的%或_，那么需用转义符，SQL SERVER的转义符为“[]”，即搜索这两个通配符时使用“[%]”和“[_]”</p>
<p>还有一种ORACLE和SQL SERVER都支持的的转义符自定义语法，例如可以定义“@”为转义符，那么写法应如下：</p>
<pre>like '@%AA%' escape '@'</pre>
<p>它会搜索所有以“%AA”开头的字符串，如果要搜索转义字符，用“@@”来搜索“@”，同样的功能在SQL SERVER中写法如下：</p>
<pre>like '[%]AA%'</pre>
<p>在SQL SERVER中，LIKE匹配字符串有着更为强大的功能，有点吸取了正则表达式的意思，但一是因为不通用（ORACLE不支持），另外是因为用法相对复杂，所以用处并不大，这里只作简要介绍：</p>
<table width="90%" >
  <tr>
    <th width="20%">通配符</th>
    <th width="40%">描述</th>
    <th width="40%">示例</th>
  </tr>
  <tr>
    <td>[]</td>
    <td>指定范围 ([a-f]) 或集合 ([abcdef]) 中的任何单个字符。</td>
    <td>WHERE au_lname LIKE '[C-P]arsen' 将查找以arsen 结尾且以介于 C 与 P 之间的任何单个字符开始的作者姓氏，例如，Carsen、Larsen、Karsen 等。</td>
  </tr>
  <tr>
    <td>[^]</td>
    <td>不属于指定范围 ([a-f]) 或集合 ([abcdef]) 的任何单个字符</td>
    <td>WHERE au_lname LIKE 'de[^l]%' 将查找以 de 开始且其后的字母不为 l 的所有作者的姓氏。</td>
  </tr>
</table>
<p><img src="images/bm1.BMP">注意：如果在SQL SERVER中要搜索“[”或“]”，对于“[”，使用字符串“[[]”，对于“]”，直接用字符串“]”即可。</p>
<h4>2.1.3.2 IN 操作符的用法 </h4>
<p>IN 操作符确定给定的值是否与子查询或列表中的值相匹配。与子查询中的值匹配将在高级查询一章中进行介绍,在此只介绍在IN中使用列表. 示例如下: </p>
<p>例3: 我想查询索引表中位号为 TE1101 和 TE1102 的记录, 其SQL语句可使用如下写法:</p>
<pre>select *
from component
where cmpnt_name in ('TE1101', 'TE1102')</pre>
<h4>2.1.3.3 IS [NOT] NULL 操作符的用法</h4>
<p>用于确定一个给定的表达式是否为 NULL。</p>
<p>例4: 列出component表中所有仪表功能(cmpnt_serv)为空的记录.</p>
<pre>select *
from component
where cmpnt_serv is null</pre>
<p><img src="images/bm1.BMP">注意: 在ORACLE 和 SQL SERVER 数据库中, 对NULL有不同的定义, 在ORACLE中, 空字符串''被认为与NULL相同, 而在SQL SERVER中, 空字符串也是一个字符串. 所以在ORACLE中, 条件 cmpnt_serv is null 与 cmpnt_serv = ''功能相同, 在SQL SERVER中则会出现不同结果. </p>
<h4>2.1.3.4 使用多个条件</h4>
<p>多个条件之间使用逻辑操作符 AND 或 OR 空开, AND 表示逻辑与, 即要求 AND 两边的两个条件都要满足, OR 表示逻辑或, 即 OR 两边的条件只要有一个满足就可以了. 类似于数学四则运算中的加减乘除有优先级一样, AND的运算优先级要大于 OR, 即在条件表达式中, 会先对AND两边的条件进行判断, 再判断 OR 两边的条件. 在此我举一个例子进行说明:</p>
<p>例5: 列出component表中满足下列条件的记录: 位号以TE开头或以FE开头, 且仪表功能(cmpnt_serv)为&quot;流量检测&quot;的仪表.(不要管这个要求有多么不合理, 我这只是在教SQL, 不是在教仪表)</p>
<p>或许你会这样写:</p>
<pre>select *
from component
where cmpnt_name like 'TE%' or cmpnt_name like 'FE%'
  and cmpnt_serv = '流量检测'</pre>
<p>看上去很不错, 但很可惜, 你不会得到想要的结果, 你会发现结果中FE类仪表是对的, 但对TE类仪表, 不管它的仪表功能是啥, 都给列出来了, 这就是逻辑操作优先级导致的问题了, 因为AND的优先级高, 因此它会先判断</p>
<pre>cmpnt_name like 'FE%' and cmpnt_serv = '流量检测'</pre>
<p>然后再去判断第一个条件, 这样错误就出来了, 因为根据OR运算法则, 只要仪表位号以TE开头, 那么整个条件就算满足了, 正确的写法就该是这样:</p>
<pre>select *
from component 
where (cmpnt_name like 'TE%' or cmpnt_name like 'FE%')
  and cmpnt_serv = '流量检测'</pre>
<p>那个括号的功能是要求先计算括号内的条件, 或者你可以更累赘地写成如下形式(不推荐): </p>
<pre>select *
from component
where cmpnt_name like 'TE%' and cmpnt_serv = '流量检测'
   or cmpnt_name like 'FE%' and cmpnt_serv = '流量检测'</pre>
<h4>2.1.3.5 NOT 的用法</h4>
<p>NOT对表达式的值取反, 其优先级高于 AND, 下例说明其用法:</p>
<p>例6: 列出component表中所有位号(cmpnt_name)不以TE开头, 且仪表功能(cmpnt_serv)为“流量检测”的记录</p>
<pre>select *
from component 
where not cmpnt_name like 'TE%'
  and cmpnt_serv = '流量检测'</pre>
<p><img src="images/bm1.BMP">注意：对于 like 和 in 操作符，其取反操作可写成 not like 和 not in，例如上例中可以这样写：cmpnt_name not like 'TE%'。</p>
<h3>2.1.4 使用排序功能</h3>
<p>例7：列出component表中位号以TE开头的记录，只显示cmpnt_id, cmpnt_name, cmpnt_serv这3个字段的内容，并按位号排序</p>
<pre>select cmpnt_id, cmpnt_name, cmpnt_serv
from component
where cmpnt_name like 'TE%'
order by cmpnt_name</pre>
<p>可有有多个字段参与排序, 多个字段有 ',' 隔开, 它会先安第一个字段进行排序, 再按第二个字段进行排序, ..., 以此类推.</p>
<p>默认的排序方式为升序排序, 如果你需要进行降序排序, 需要在排序字段后加上关键字“desc”，如下：</p>
<pre>order by cmpnt_name desc</pre>
<p>升序的指示符为“asc”，只不过一般会把它省略掉，如果排序条件中有的字段按升序排，有的字段按降序排，其写法如下：</p>
<pre>order by cmpnt_name desc, cmpnt_serv</pre>
<p>表示先按cmpnt_name降序排， cmpnt_name相同的再按cmpnt_serv升序排。</p>
<h3>2.1.5 调整输出结果 </h3>
<p>例8：列出component表中位号以TE开头的记录，只显示cmpnt_id, cmpnt_name, cmpnt_serv这3个字段的内容，并按位号排序，并要求结果集的列头为中文</p>
<pre>select cmpnt_id as 标识, cmpnt_name as 位号, cmpnt_serv as 仪表功能
from component
where cmpnt_name like 'TE%'
order by cmpnt_name</pre>
<p>更新列头除了使得结果集美观外，还有一个很重要的功能，我们可以在order by中使用更改后的名称，例如在上例中，最后的排序可以这样写：</p>
<pre>order by 位号</pre>
<p>只是上例你可能还看不出这样有什么好处，实际上表达式可能写得很复杂，这样这个功能就有用处了，例如下面的SQL语句：</p>
<pre>select '位号: ' + cmpnt_name + ' 功能: ' + cmpnt_serv as 仪表信息
from component
order by 仪表信息</pre>
<p><img src="images/bm1.BMP">注意：上面的语句我用了字符串相加的功能，上面的语句是SQL SERVER的语法，对于ORACLE，要把“+”换为“||”。</p>
<h3>2.1.6 习题</h3>
<p>1、显示回路功能为FI的回路(LOOP表)，要求列出回路号(LOOP_ID), 回路名(LOOP_NAME), 回路功能(LOOP_SERV), PID图号(DWG_ID), 按回路名排序 </p>
<h2>2.2 多表查询</h2>
<p>表的联接方式分为内联接和外联接，外联接又分为左外联接、右外联接和全外连接，在此我只讲述常用的内联接和左外联接（简称为左联接）。我在此以两个表来说明内联接和左联接的区别。</p>
<table width="40%" >
  <caption align="top">
  员工表（表名：Employee）
  </caption>
  <tr>
    <th>列</th>
    <th>英文列名</th>
  </tr>
  <tr>
    <td>员工编号</td>
    <td>EmployeeId</td>
  </tr>
  <tr>
    <td>姓名</td>
    <td>EmployeeName</td>
  </tr>
</table>
<table width="40%" >
  <caption align="top">
  迟到记录（LateRecord）
  </caption>
  <tr>
    <th>列</th>
    <th>英文列名</th>
  </tr>
  <tr>
    <td>员工编号</td>
    <td>EmployeeId</td>
  </tr>
  <tr>
    <td>迟到次数</td>
    <td>LateNumber</td>
  </tr>
</table>
<p>注：如果从未迟到过的员工，那么在LastRecord表中没有相应的记录</p>
<h3>2.2.1 笛卡尔积（交叉联接）</h3>
<p>返回左表中的所有行，左表中的每一行与右表中的所有行组合。这是两表间数据的最大组合。</p>
<h3>2.2.2 内联接 </h3>
<p>查询员工迟到的情况</p>
<pre>select a.EmployeeId, a.EmployeeName, b.LateNumber
from Employee a 
  inner join LateRecord b on b.EmployeeId = a.EmployeeId</pre>
<p>上语句的结果会列出迟到员工的信息，从未迟到员工的名字不会出现</p>
<p>对于内连接，可以省略掉inner，或者写成如下形式：</p>
<pre>select a.EmployeeId, a.EmployeeName, b.LateNumber
from Employee a, LateRecord b
where b.EmployeeId = a.EmployeeId</pre>
<h3>2.2.3 左联连 </h3>
<p>对于上节的功能，如果想变通一下，将从未迟到的员工的姓名也列出来，那么需要使用左联接：</p>
<pre>select a.EmployeeId, a.EmployeeName, b.LateNumber
from Employee a 
  left join LateRecord b on b.EmployeeId = a.EmployeeId</pre>
<p>对于从未迟到的员工，其迟到次数为空，在SQL SERVER中显示为NULL，在ORACLE中显示为空白。</p>
<h3>2.2.4 习题</h3>
<p>1、列出DEMO域下的所有UNIT，要求显示装置名(PLANT_NAME), 区域名(AREA_NAME), 单元名(UNIT_NAME), 并要求同一装置下的区域显示在一块儿, 同一区域下的单元显示在一块儿.(注: 涉及的表有PLANT(装置), PLANT_AREA(区域), PLANT_AREA_UNIT(单元)) </p>
<p>2、显示DEMO域下Crude Unit1 单元下的所有回路，要求显示回路名(LOOP.LOOP_NAME), 回路功能(LOOP.LOOP_SERV), 以及该回路下的所有位号(COMPONENT.CMPNT_NAME), 要求同一回路下的位号显示在一块儿.</p>
<h2>2.3 分组及统计（Group by子句及统计函数的使用）</h2>
<h3>2.3.1 count</h3>
<p>用于统计查询结果的行数</p>
<p>例1：统计每个回路下有多少位号，结果列标题为回路号、位号个数，按回路号排序。</p>
<pre>select a.loop_name as 回路号, count(1) as 位号个数
from loop a
  join component b on b.loop_id = a.loop_id
group by a.loop_name
order by a.loop_name</pre>
<p>一般来讲，凡是在select列表中，而又未被统计函数处理的字段，均应写在group by后的字段列表中。</p>
<h3>2.3.2 sum</h3>
<p>用于汇总字段的值</p>
<p>例2：hook_up_item_list表存放的是安装方案使用的材料，hook_up_component表存放的是位号使用的安装方案，item_list为材料表，那么请统计一下各个回路所使用的所有材料，要求输出回路号、材料代号，材料名称，使用数量。</p>
<pre>select a.loop_name as 回路号, e.hui_number as 材料编号, e.hui_desc as 材料名, sum(d.hu_item_qty) as 使用数量
from loop a
  join component b on b.loop_id = a.loop_id
  join hook_up_component c on c.cmpnt_id = b.cmpnt_id
  join hook_up_item_list d on c.hu_id = d.hu_id
  join item_list e on e.item_list_id = d.item_list_id
group by a.loop_name, e.hui_number, e.hui_desc
order by 回路号, 材料编号</pre>
<h3>2.3.3 avg</h3>
<p>均值函数</p>
<p>例1：查询电缆的平均长度</p>
<pre>select avg(cable_length) as 平均长度 from cable</pre>
<h3>2.3.4 min和max</h3>
<p>最大值和最小值</p>
<p>例1：</p>
<h3>2.3.5 distinct关键字</h3>
<p>用于保证返回的结果集中没有重复记录。</p>
<p>例: 数据库中有许多空回路(回路中没有任何仪表位号), 请取出非空回路数</p>
<pre>select count(distinct loop_id)
from component </pre>
<p>因为凡是component表中的loop_id表示是有位号的回路。</p>
<h3>2.3.6 having子句</h3>
<p>功能与where子句类似，只不过其查询条件为统计结果。</p>
<p>例1：查询位号数大于3的回路，要求输出回路号，位号个数</p>
<pre>select a.loop_name as 回路号, count(1) as 位号个数
from loop a
  join component b on b.loop_id = a.loop_id
group by a.loop_name
having count(1) > 3
order by a.loop_name</pre>
<h3>2.3.7 习题</h3>
<p>1、取DEMO域下Crude Unit1下的回路数(LOOP)</p>
<p>2、取所有的仪表类型数及被使用过的仪表类型数(注: 涉及的表为COMPONENT 和 COMPONENT_FUNCTION_TYPE, 用两个SQL语句实现)</p>
<p>3、获取使用数量大于10的仪表类型，即若某仪表类型的仪表在该域中的数量大于10，则符合条件。</p>
<h2>2.4 UNION的使用</h2>
<p>将两个或更多查询的结果组合为单个结果集，该结果集包含联合查询中的所有查询的全部行。</p>
<p>例：取所有回路号以&quot;101&quot;和&quot;222&quot;开头的回路</p>
<pre>select * from loop where loop_name like '101%'
union
select * from loop where loop_name like '222%'</pre>
<p>UNION 后可加可选关键字 ALL，如果不加ALL，返回的结果集中会自动滤掉相同的记录，加上ALL则返回所有记录。</p>
<p>&nbsp;</p>
<script language="javascript" src="index.js"></script>
</body>
</html>
